{"ast":null,"code":"var baseClamp = require('./_baseClamp'),\n  baseToString = require('./_baseToString'),\n  toInteger = require('./toInteger'),\n  toString = require('./toString');\n\n/**\r\n * Checks if `string` starts with the given target string.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 3.0.0\r\n * @category String\r\n * @param {string} [string=''] The string to inspect.\r\n * @param {string} [target] The string to search for.\r\n * @param {number} [position=0] The position to search from.\r\n * @returns {boolean} Returns `true` if `string` starts with `target`,\r\n *  else `false`.\r\n * @example\r\n *\r\n * _.startsWith('abc', 'a');\r\n * // => true\r\n *\r\n * _.startsWith('abc', 'b');\r\n * // => false\r\n *\r\n * _.startsWith('abc', 'b', 1);\r\n * // => true\r\n */\nfunction startsWith(string, target, position) {\n  string = toString(string);\n  position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length);\n  target = baseToString(target);\n  return string.slice(position, position + target.length) == target;\n}\nmodule.exports = startsWith;","map":{"version":3,"names":["baseClamp","require","baseToString","toInteger","toString","startsWith","string","target","position","length","slice","module","exports"],"sources":["C:/Users/sam/final/camunda-react/node_modules/lodash/startsWith.js"],"sourcesContent":["var baseClamp = require('./_baseClamp'),\r\n    baseToString = require('./_baseToString'),\r\n    toInteger = require('./toInteger'),\r\n    toString = require('./toString');\r\n\r\n/**\r\n * Checks if `string` starts with the given target string.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 3.0.0\r\n * @category String\r\n * @param {string} [string=''] The string to inspect.\r\n * @param {string} [target] The string to search for.\r\n * @param {number} [position=0] The position to search from.\r\n * @returns {boolean} Returns `true` if `string` starts with `target`,\r\n *  else `false`.\r\n * @example\r\n *\r\n * _.startsWith('abc', 'a');\r\n * // => true\r\n *\r\n * _.startsWith('abc', 'b');\r\n * // => false\r\n *\r\n * _.startsWith('abc', 'b', 1);\r\n * // => true\r\n */\r\nfunction startsWith(string, target, position) {\r\n  string = toString(string);\r\n  position = position == null\r\n    ? 0\r\n    : baseClamp(toInteger(position), 0, string.length);\r\n\r\n  target = baseToString(target);\r\n  return string.slice(position, position + target.length) == target;\r\n}\r\n\r\nmodule.exports = startsWith;\r\n"],"mappings":"AAAA,IAAIA,SAAS,GAAGC,OAAO,CAAC,cAAc,CAAC;EACnCC,YAAY,GAAGD,OAAO,CAAC,iBAAiB,CAAC;EACzCE,SAAS,GAAGF,OAAO,CAAC,aAAa,CAAC;EAClCG,QAAQ,GAAGH,OAAO,CAAC,YAAY,CAAC;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASI,UAAUA,CAACC,MAAM,EAAEC,MAAM,EAAEC,QAAQ,EAAE;EAC5CF,MAAM,GAAGF,QAAQ,CAACE,MAAM,CAAC;EACzBE,QAAQ,GAAGA,QAAQ,IAAI,IAAI,GACvB,CAAC,GACDR,SAAS,CAACG,SAAS,CAACK,QAAQ,CAAC,EAAE,CAAC,EAAEF,MAAM,CAACG,MAAM,CAAC;EAEpDF,MAAM,GAAGL,YAAY,CAACK,MAAM,CAAC;EAC7B,OAAOD,MAAM,CAACI,KAAK,CAACF,QAAQ,EAAEA,QAAQ,GAAGD,MAAM,CAACE,MAAM,CAAC,IAAIF,MAAM;AACnE;AAEAI,MAAM,CAACC,OAAO,GAAGP,UAAU"},"metadata":{},"sourceType":"script"}