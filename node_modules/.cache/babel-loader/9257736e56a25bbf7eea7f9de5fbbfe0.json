{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\n/**\r\n * A comment can contain text.\r\n */\n\nfunction CommentText(props) {\n  var className = props.className,\n    children = props.children,\n    content = props.content;\n  var classes = cx(className, 'text');\n  var rest = getUnhandledProps(CommentText, props);\n  var ElementType = getElementType(CommentText, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\nCommentText.handledProps = [\"as\", \"children\", \"className\", \"content\"];\nCommentText.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n  /** Primary content. */\n  children: PropTypes.node,\n  /** Additional classes. */\n  className: PropTypes.string,\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nexport default CommentText;","map":{"version":3,"names":["_extends","cx","PropTypes","React","childrenUtils","customPropTypes","getElementType","getUnhandledProps","CommentText","props","className","children","content","classes","rest","ElementType","createElement","isNil","handledProps","propTypes","process","env","NODE_ENV","as","elementType","node","string","contentShorthand"],"sources":["C:/Users/sam/final/camunda-react/node_modules/semantic-ui-react/dist/es/views/Comment/CommentText.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport cx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\r\n/**\r\n * A comment can contain text.\r\n */\r\n\r\nfunction CommentText(props) {\r\n  var className = props.className,\r\n      children = props.children,\r\n      content = props.content;\r\n  var classes = cx(className, 'text');\r\n  var rest = getUnhandledProps(CommentText, props);\r\n  var ElementType = getElementType(CommentText, props);\r\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\r\n    className: classes\r\n  }), childrenUtils.isNil(children) ? content : children);\r\n}\r\n\r\nCommentText.handledProps = [\"as\", \"children\", \"className\", \"content\"];\r\nCommentText.propTypes = process.env.NODE_ENV !== \"production\" ? {\r\n  /** An element type to render as (string or function). */\r\n  as: PropTypes.elementType,\r\n\r\n  /** Primary content. */\r\n  children: PropTypes.node,\r\n\r\n  /** Additional classes. */\r\n  className: PropTypes.string,\r\n\r\n  /** Shorthand for primary content. */\r\n  content: customPropTypes.contentShorthand\r\n} : {};\r\nexport default CommentText;"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,OAAOC,EAAE,MAAM,MAAM;AACrB,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,aAAa,EAAEC,eAAe,EAAEC,cAAc,EAAEC,iBAAiB,QAAQ,WAAW;AAC7F;AACA;AACA;;AAEA,SAASC,WAAWA,CAACC,KAAK,EAAE;EAC1B,IAAIC,SAAS,GAAGD,KAAK,CAACC,SAAS;IAC3BC,QAAQ,GAAGF,KAAK,CAACE,QAAQ;IACzBC,OAAO,GAAGH,KAAK,CAACG,OAAO;EAC3B,IAAIC,OAAO,GAAGZ,EAAE,CAACS,SAAS,EAAE,MAAM,CAAC;EACnC,IAAII,IAAI,GAAGP,iBAAiB,CAACC,WAAW,EAAEC,KAAK,CAAC;EAChD,IAAIM,WAAW,GAAGT,cAAc,CAACE,WAAW,EAAEC,KAAK,CAAC;EACpD,OAAO,aAAaN,KAAK,CAACa,aAAa,CAACD,WAAW,EAAEf,QAAQ,CAAC,CAAC,CAAC,EAAEc,IAAI,EAAE;IACtEJ,SAAS,EAAEG;EACb,CAAC,CAAC,EAAET,aAAa,CAACa,KAAK,CAACN,QAAQ,CAAC,GAAGC,OAAO,GAAGD,QAAQ,CAAC;AACzD;AAEAH,WAAW,CAACU,YAAY,GAAG,CAAC,IAAI,EAAE,UAAU,EAAE,WAAW,EAAE,SAAS,CAAC;AACrEV,WAAW,CAACW,SAAS,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAG;EAC9D;EACAC,EAAE,EAAErB,SAAS,CAACsB,WAAW;EAEzB;EACAb,QAAQ,EAAET,SAAS,CAACuB,IAAI;EAExB;EACAf,SAAS,EAAER,SAAS,CAACwB,MAAM;EAE3B;EACAd,OAAO,EAAEP,eAAe,CAACsB;AAC3B,CAAC,GAAG,CAAC,CAAC;AACN,eAAenB,WAAW"},"metadata":{},"sourceType":"module"}