{"ast":null,"code":"import * as ProcessDefinitionActions from './camunda-rest/process-definition';\nimport * as TaskActions from './camunda-rest/task';\nimport * as DeploymentActions from './camunda-rest/deployment';\nexport const loadTasks = () => (dispatch, getState) => {\n  return dispatch(TaskActions.fetchTasks());\n};\nexport const loadTaskFormKey = taskId => (dispatch, getState) => {\n  return dispatch(TaskActions.fetchTaskFormKey(taskId));\n};\nexport const completeTask = (taskId, values) => (dispatch, getState) => {\n  return dispatch(TaskActions.postCompleTask(taskId, values));\n};\nexport const loadProcessDefinitions = processDefinitionId => (dispatch, getState) => {\n  return dispatch(ProcessDefinitionActions.fetchProcessDefinitions(processDefinitionId));\n};\nexport const loadProcessDefinitionsWithXML = processDefinitionId => (dispatch, getState) => {\n  return dispatch(ProcessDefinitionActions.fetchProcessDefinitions(processDefinitionId)).then(data => {\n    data.response.result.forEach(id => {\n      dispatch(ProcessDefinitionActions.fetchProcessDefinitionXML(id));\n    });\n  });\n};\nexport const loadProcessDefinitionXML = processDefinitionId => (dispatch, getState) => {\n  return dispatch(ProcessDefinitionActions.fetchProcessDefinitionXML(processDefinitionId));\n};\nexport const loadFormKey = processDefinitionKey => (dispatch, getState) => {\n  return dispatch(ProcessDefinitionActions.fetchFormKey(processDefinitionKey));\n};\nexport const startProcessInstance = (processDefinitionKey, values) => (dispatch, getState) => {\n  return dispatch(ProcessDefinitionActions.postProcessInstance(processDefinitionKey, values));\n};\nexport const loadTaskVariables = (taskId, variableNames) => (dispatch, getState) => {\n  return dispatch(TaskActions.fetchTaskVariables(taskId, variableNames));\n};\nexport const deployProcess = (filename, file) => (dispatch, getState) => {\n  return dispatch(DeploymentActions.postProcessXML(filename, file));\n};","map":{"version":3,"names":["ProcessDefinitionActions","TaskActions","DeploymentActions","loadTasks","dispatch","getState","fetchTasks","loadTaskFormKey","taskId","fetchTaskFormKey","completeTask","values","postCompleTask","loadProcessDefinitions","processDefinitionId","fetchProcessDefinitions","loadProcessDefinitionsWithXML","then","data","response","result","forEach","id","fetchProcessDefinitionXML","loadProcessDefinitionXML","loadFormKey","processDefinitionKey","fetchFormKey","startProcessInstance","postProcessInstance","loadTaskVariables","variableNames","fetchTaskVariables","deployProcess","filename","file","postProcessXML"],"sources":["C:/Users/KondalaRaoThota/Truviq_Camunda/camunda-react/src/actions/index.js"],"sourcesContent":["import * as ProcessDefinitionActions from './camunda-rest/process-definition'\r\nimport * as TaskActions from './camunda-rest/task'\r\nimport * as DeploymentActions from './camunda-rest/deployment'\r\n\r\nexport const loadTasks = () => (dispatch, getState) => {\r\n  return dispatch(TaskActions.fetchTasks())\r\n}\r\n\r\nexport const loadTaskFormKey = (taskId) => (dispatch, getState) => {\r\n  return dispatch(TaskActions.fetchTaskFormKey(taskId))\r\n}\r\n\r\nexport const completeTask = (taskId, values) => (dispatch, getState) => {\r\n  return dispatch(TaskActions.postCompleTask(taskId, values))\r\n}\r\n\r\nexport const loadProcessDefinitions = (processDefinitionId) => (dispatch, getState) => {\r\n  return dispatch(ProcessDefinitionActions.fetchProcessDefinitions(processDefinitionId))\r\n}\r\n\r\nexport const loadProcessDefinitionsWithXML = (processDefinitionId) => (dispatch, getState) => {\r\n  return dispatch(ProcessDefinitionActions.fetchProcessDefinitions(processDefinitionId)).then((data) => {\r\n    data.response.result.forEach((id) => {\r\n      dispatch(ProcessDefinitionActions.fetchProcessDefinitionXML(id))\r\n    });\r\n\r\n  })\r\n}\r\n\r\nexport const loadProcessDefinitionXML = (processDefinitionId) => (dispatch, getState) => {\r\n  return dispatch(ProcessDefinitionActions.fetchProcessDefinitionXML(processDefinitionId))\r\n}\r\n\r\nexport const loadFormKey = (processDefinitionKey) => (dispatch, getState) => {\r\n  return dispatch(ProcessDefinitionActions.fetchFormKey(processDefinitionKey))\r\n}\r\n\r\nexport const startProcessInstance = (processDefinitionKey, values) => (dispatch, getState) => {\r\n  return dispatch(ProcessDefinitionActions.postProcessInstance(processDefinitionKey, values))\r\n}\r\n\r\nexport const loadTaskVariables = (taskId, variableNames) => (dispatch, getState) => {\r\n  return dispatch(TaskActions.fetchTaskVariables(taskId, variableNames))\r\n}\r\n\r\nexport const deployProcess = (filename, file) => (dispatch, getState) => {\r\n  return dispatch(DeploymentActions.postProcessXML(filename, file))\r\n}\r\n"],"mappings":"AAAA,OAAO,KAAKA,wBAAwB,MAAM,mCAAmC;AAC7E,OAAO,KAAKC,WAAW,MAAM,qBAAqB;AAClD,OAAO,KAAKC,iBAAiB,MAAM,2BAA2B;AAE9D,OAAO,MAAMC,SAAS,GAAGA,CAAA,KAAM,CAACC,QAAQ,EAAEC,QAAQ,KAAK;EACrD,OAAOD,QAAQ,CAACH,WAAW,CAACK,UAAU,EAAE,CAAC;AAC3C,CAAC;AAED,OAAO,MAAMC,eAAe,GAAIC,MAAM,IAAK,CAACJ,QAAQ,EAAEC,QAAQ,KAAK;EACjE,OAAOD,QAAQ,CAACH,WAAW,CAACQ,gBAAgB,CAACD,MAAM,CAAC,CAAC;AACvD,CAAC;AAED,OAAO,MAAME,YAAY,GAAGA,CAACF,MAAM,EAAEG,MAAM,KAAK,CAACP,QAAQ,EAAEC,QAAQ,KAAK;EACtE,OAAOD,QAAQ,CAACH,WAAW,CAACW,cAAc,CAACJ,MAAM,EAAEG,MAAM,CAAC,CAAC;AAC7D,CAAC;AAED,OAAO,MAAME,sBAAsB,GAAIC,mBAAmB,IAAK,CAACV,QAAQ,EAAEC,QAAQ,KAAK;EACrF,OAAOD,QAAQ,CAACJ,wBAAwB,CAACe,uBAAuB,CAACD,mBAAmB,CAAC,CAAC;AACxF,CAAC;AAED,OAAO,MAAME,6BAA6B,GAAIF,mBAAmB,IAAK,CAACV,QAAQ,EAAEC,QAAQ,KAAK;EAC5F,OAAOD,QAAQ,CAACJ,wBAAwB,CAACe,uBAAuB,CAACD,mBAAmB,CAAC,CAAC,CAACG,IAAI,CAAEC,IAAI,IAAK;IACpGA,IAAI,CAACC,QAAQ,CAACC,MAAM,CAACC,OAAO,CAAEC,EAAE,IAAK;MACnClB,QAAQ,CAACJ,wBAAwB,CAACuB,yBAAyB,CAACD,EAAE,CAAC,CAAC;IAClE,CAAC,CAAC;EAEJ,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAME,wBAAwB,GAAIV,mBAAmB,IAAK,CAACV,QAAQ,EAAEC,QAAQ,KAAK;EACvF,OAAOD,QAAQ,CAACJ,wBAAwB,CAACuB,yBAAyB,CAACT,mBAAmB,CAAC,CAAC;AAC1F,CAAC;AAED,OAAO,MAAMW,WAAW,GAAIC,oBAAoB,IAAK,CAACtB,QAAQ,EAAEC,QAAQ,KAAK;EAC3E,OAAOD,QAAQ,CAACJ,wBAAwB,CAAC2B,YAAY,CAACD,oBAAoB,CAAC,CAAC;AAC9E,CAAC;AAED,OAAO,MAAME,oBAAoB,GAAGA,CAACF,oBAAoB,EAAEf,MAAM,KAAK,CAACP,QAAQ,EAAEC,QAAQ,KAAK;EAC5F,OAAOD,QAAQ,CAACJ,wBAAwB,CAAC6B,mBAAmB,CAACH,oBAAoB,EAAEf,MAAM,CAAC,CAAC;AAC7F,CAAC;AAED,OAAO,MAAMmB,iBAAiB,GAAGA,CAACtB,MAAM,EAAEuB,aAAa,KAAK,CAAC3B,QAAQ,EAAEC,QAAQ,KAAK;EAClF,OAAOD,QAAQ,CAACH,WAAW,CAAC+B,kBAAkB,CAACxB,MAAM,EAAEuB,aAAa,CAAC,CAAC;AACxE,CAAC;AAED,OAAO,MAAME,aAAa,GAAGA,CAACC,QAAQ,EAAEC,IAAI,KAAK,CAAC/B,QAAQ,EAAEC,QAAQ,KAAK;EACvE,OAAOD,QAAQ,CAACF,iBAAiB,CAACkC,cAAc,CAACF,QAAQ,EAAEC,IAAI,CAAC,CAAC;AACnE,CAAC"},"metadata":{},"sourceType":"module"}