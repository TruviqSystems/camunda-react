{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createHTMLImage, customPropTypes, getElementType, getUnhandledProps, META } from '../../lib';\nimport Icon from '../../elements/Icon';\n\n/**\r\n * An event can contain an image or icon label.\r\n */\nfunction FeedLabel(props) {\n  var children = props.children,\n    className = props.className,\n    content = props.content,\n    icon = props.icon,\n    image = props.image;\n  var classes = cx('label', className);\n  var rest = getUnhandledProps(FeedLabel, props);\n  var ElementType = getElementType(FeedLabel, props);\n  if (!childrenUtils.isNil(children)) {\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), content, Icon.create(icon), createHTMLImage(image));\n}\nFeedLabel.handledProps = ['as', 'children', 'className', 'content', 'icon', 'image'];\nFeedLabel._meta = {\n  name: 'FeedLabel',\n  parent: 'Feed',\n  type: META.TYPES.VIEW\n};\nFeedLabel.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n  /** Primary content. */\n  children: PropTypes.node,\n  /** Additional classes. */\n  className: PropTypes.string,\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n  /** An event can contain icon label. */\n  icon: customPropTypes.itemShorthand,\n  /** An event can contain image label. */\n  image: customPropTypes.itemShorthand\n} : {};\nexport default FeedLabel;","map":{"version":3,"names":["_extends","cx","PropTypes","React","childrenUtils","createHTMLImage","customPropTypes","getElementType","getUnhandledProps","META","Icon","FeedLabel","props","children","className","content","icon","image","classes","rest","ElementType","isNil","createElement","create","handledProps","_meta","name","parent","type","TYPES","VIEW","propTypes","process","env","NODE_ENV","as","node","string","contentShorthand","itemShorthand"],"sources":["C:/Users/sam/final/camunda-react/node_modules/react-semantic-redux-form/node_modules/semantic-ui-react/dist/es/views/Feed/FeedLabel.js"],"sourcesContent":["import _extends from 'babel-runtime/helpers/extends';\r\nimport cx from 'classnames';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\nimport { childrenUtils, createHTMLImage, customPropTypes, getElementType, getUnhandledProps, META } from '../../lib';\r\nimport Icon from '../../elements/Icon';\r\n\r\n/**\r\n * An event can contain an image or icon label.\r\n */\r\nfunction FeedLabel(props) {\r\n  var children = props.children,\r\n      className = props.className,\r\n      content = props.content,\r\n      icon = props.icon,\r\n      image = props.image;\r\n\r\n\r\n  var classes = cx('label', className);\r\n  var rest = getUnhandledProps(FeedLabel, props);\r\n  var ElementType = getElementType(FeedLabel, props);\r\n\r\n  if (!childrenUtils.isNil(children)) {\r\n    return React.createElement(\r\n      ElementType,\r\n      _extends({}, rest, { className: classes }),\r\n      children\r\n    );\r\n  }\r\n\r\n  return React.createElement(\r\n    ElementType,\r\n    _extends({}, rest, { className: classes }),\r\n    content,\r\n    Icon.create(icon),\r\n    createHTMLImage(image)\r\n  );\r\n}\r\n\r\nFeedLabel.handledProps = ['as', 'children', 'className', 'content', 'icon', 'image'];\r\nFeedLabel._meta = {\r\n  name: 'FeedLabel',\r\n  parent: 'Feed',\r\n  type: META.TYPES.VIEW\r\n};\r\n\r\nFeedLabel.propTypes = process.env.NODE_ENV !== \"production\" ? {\r\n  /** An element type to render as (string or function). */\r\n  as: customPropTypes.as,\r\n\r\n  /** Primary content. */\r\n  children: PropTypes.node,\r\n\r\n  /** Additional classes. */\r\n  className: PropTypes.string,\r\n\r\n  /** Shorthand for primary content. */\r\n  content: customPropTypes.contentShorthand,\r\n\r\n  /** An event can contain icon label. */\r\n  icon: customPropTypes.itemShorthand,\r\n\r\n  /** An event can contain image label. */\r\n  image: customPropTypes.itemShorthand\r\n} : {};\r\n\r\nexport default FeedLabel;"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,+BAA+B;AACpD,OAAOC,EAAE,MAAM,YAAY;AAC3B,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,KAAK,MAAM,OAAO;AAEzB,SAASC,aAAa,EAAEC,eAAe,EAAEC,eAAe,EAAEC,cAAc,EAAEC,iBAAiB,EAAEC,IAAI,QAAQ,WAAW;AACpH,OAAOC,IAAI,MAAM,qBAAqB;;AAEtC;AACA;AACA;AACA,SAASC,SAASA,CAACC,KAAK,EAAE;EACxB,IAAIC,QAAQ,GAAGD,KAAK,CAACC,QAAQ;IACzBC,SAAS,GAAGF,KAAK,CAACE,SAAS;IAC3BC,OAAO,GAAGH,KAAK,CAACG,OAAO;IACvBC,IAAI,GAAGJ,KAAK,CAACI,IAAI;IACjBC,KAAK,GAAGL,KAAK,CAACK,KAAK;EAGvB,IAAIC,OAAO,GAAGjB,EAAE,CAAC,OAAO,EAAEa,SAAS,CAAC;EACpC,IAAIK,IAAI,GAAGX,iBAAiB,CAACG,SAAS,EAAEC,KAAK,CAAC;EAC9C,IAAIQ,WAAW,GAAGb,cAAc,CAACI,SAAS,EAAEC,KAAK,CAAC;EAElD,IAAI,CAACR,aAAa,CAACiB,KAAK,CAACR,QAAQ,CAAC,EAAE;IAClC,OAAOV,KAAK,CAACmB,aAAa,CACxBF,WAAW,EACXpB,QAAQ,CAAC,CAAC,CAAC,EAAEmB,IAAI,EAAE;MAAEL,SAAS,EAAEI;IAAQ,CAAC,CAAC,EAC1CL,QAAQ,CACT;EACH;EAEA,OAAOV,KAAK,CAACmB,aAAa,CACxBF,WAAW,EACXpB,QAAQ,CAAC,CAAC,CAAC,EAAEmB,IAAI,EAAE;IAAEL,SAAS,EAAEI;EAAQ,CAAC,CAAC,EAC1CH,OAAO,EACPL,IAAI,CAACa,MAAM,CAACP,IAAI,CAAC,EACjBX,eAAe,CAACY,KAAK,CAAC,CACvB;AACH;AAEAN,SAAS,CAACa,YAAY,GAAG,CAAC,IAAI,EAAE,UAAU,EAAE,WAAW,EAAE,SAAS,EAAE,MAAM,EAAE,OAAO,CAAC;AACpFb,SAAS,CAACc,KAAK,GAAG;EAChBC,IAAI,EAAE,WAAW;EACjBC,MAAM,EAAE,MAAM;EACdC,IAAI,EAAEnB,IAAI,CAACoB,KAAK,CAACC;AACnB,CAAC;AAEDnB,SAAS,CAACoB,SAAS,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAG;EAC5D;EACAC,EAAE,EAAE7B,eAAe,CAAC6B,EAAE;EAEtB;EACAtB,QAAQ,EAAEX,SAAS,CAACkC,IAAI;EAExB;EACAtB,SAAS,EAAEZ,SAAS,CAACmC,MAAM;EAE3B;EACAtB,OAAO,EAAET,eAAe,CAACgC,gBAAgB;EAEzC;EACAtB,IAAI,EAAEV,eAAe,CAACiC,aAAa;EAEnC;EACAtB,KAAK,EAAEX,eAAe,CAACiC;AACzB,CAAC,GAAG,CAAC,CAAC;AAEN,eAAe5B,SAAS"},"metadata":{},"sourceType":"module"}