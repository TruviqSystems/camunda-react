{"ast":null,"code":"import { log10 } from '../../util/Math';\n\n/**\n * Get step size for given range and number of steps.\n *\n * @param {Object} range\n * @param {number} range.min\n * @param {number} range.max\n */\nexport function getStepSize(range, steps) {\n  var minLinearRange = log10(range.min),\n    maxLinearRange = log10(range.max);\n  var absoluteLinearRange = Math.abs(minLinearRange) + Math.abs(maxLinearRange);\n  return absoluteLinearRange / steps;\n}\nexport function cap(range, scale) {\n  return Math.max(range.min, Math.min(range.max, scale));\n}","map":{"version":3,"names":["log10","getStepSize","range","steps","minLinearRange","min","maxLinearRange","max","absoluteLinearRange","Math","abs","cap","scale"],"sources":["C:/Users/KondalaRaoThota/Truviq_Camunda/camunda-react/node_modules/diagram-js/lib/navigation/zoomscroll/ZoomUtil.js"],"sourcesContent":["import {\n  log10\n} from '../../util/Math';\n\n/**\n * Get step size for given range and number of steps.\n *\n * @param {Object} range\n * @param {number} range.min\n * @param {number} range.max\n */\nexport function getStepSize(range, steps) {\n\n  var minLinearRange = log10(range.min),\n      maxLinearRange = log10(range.max);\n\n  var absoluteLinearRange = Math.abs(minLinearRange) + Math.abs(maxLinearRange);\n\n  return absoluteLinearRange / steps;\n}\n\nexport function cap(range, scale) {\n  return Math.max(range.min, Math.min(range.max, scale));\n}\n"],"mappings":"AAAA,SACEA,KAAK,QACA,iBAAiB;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,WAAWA,CAACC,KAAK,EAAEC,KAAK,EAAE;EAExC,IAAIC,cAAc,GAAGJ,KAAK,CAACE,KAAK,CAACG,GAAG,CAAC;IACjCC,cAAc,GAAGN,KAAK,CAACE,KAAK,CAACK,GAAG,CAAC;EAErC,IAAIC,mBAAmB,GAAGC,IAAI,CAACC,GAAG,CAACN,cAAc,CAAC,GAAGK,IAAI,CAACC,GAAG,CAACJ,cAAc,CAAC;EAE7E,OAAOE,mBAAmB,GAAGL,KAAK;AACpC;AAEA,OAAO,SAASQ,GAAGA,CAACT,KAAK,EAAEU,KAAK,EAAE;EAChC,OAAOH,IAAI,CAACF,GAAG,CAACL,KAAK,CAACG,GAAG,EAAEI,IAAI,CAACJ,GAAG,CAACH,KAAK,CAACK,GAAG,EAAEK,KAAK,CAAC,CAAC;AACxD"},"metadata":{},"sourceType":"module"}