{"ast":null,"code":"var baseToString = require('./_baseToString'),\n  castSlice = require('./_castSlice'),\n  hasUnicode = require('./_hasUnicode'),\n  isIterateeCall = require('./_isIterateeCall'),\n  isRegExp = require('./isRegExp'),\n  stringToArray = require('./_stringToArray'),\n  toString = require('./toString');\n\n/** Used as references for the maximum length and index of an array. */\nvar MAX_ARRAY_LENGTH = 4294967295;\n\n/**\n * Splits `string` by `separator`.\n *\n * **Note:** This method is based on\n * [`String#split`](https://mdn.io/String/split).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to split.\n * @param {RegExp|string} separator The separator pattern to split by.\n * @param {number} [limit] The length to truncate results to.\n * @returns {Array} Returns the string segments.\n * @example\n *\n * _.split('a-b-c', '-', 2);\n * // => ['a', 'b']\n */\nfunction split(string, separator, limit) {\n  if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {\n    separator = limit = undefined;\n  }\n  limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;\n  if (!limit) {\n    return [];\n  }\n  string = toString(string);\n  if (string && (typeof separator == 'string' || separator != null && !isRegExp(separator))) {\n    separator = baseToString(separator);\n    if (!separator && hasUnicode(string)) {\n      return castSlice(stringToArray(string), 0, limit);\n    }\n  }\n  return string.split(separator, limit);\n}\nmodule.exports = split;","map":{"version":3,"names":["baseToString","require","castSlice","hasUnicode","isIterateeCall","isRegExp","stringToArray","toString","MAX_ARRAY_LENGTH","split","string","separator","limit","undefined","module","exports"],"sources":["C:/Users/KondalaRaoThota/Truviq_Camunda/camunda-react/node_modules/lodash/split.js"],"sourcesContent":["var baseToString = require('./_baseToString'),\n    castSlice = require('./_castSlice'),\n    hasUnicode = require('./_hasUnicode'),\n    isIterateeCall = require('./_isIterateeCall'),\n    isRegExp = require('./isRegExp'),\n    stringToArray = require('./_stringToArray'),\n    toString = require('./toString');\n\n/** Used as references for the maximum length and index of an array. */\nvar MAX_ARRAY_LENGTH = 4294967295;\n\n/**\n * Splits `string` by `separator`.\n *\n * **Note:** This method is based on\n * [`String#split`](https://mdn.io/String/split).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to split.\n * @param {RegExp|string} separator The separator pattern to split by.\n * @param {number} [limit] The length to truncate results to.\n * @returns {Array} Returns the string segments.\n * @example\n *\n * _.split('a-b-c', '-', 2);\n * // => ['a', 'b']\n */\nfunction split(string, separator, limit) {\n  if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {\n    separator = limit = undefined;\n  }\n  limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;\n  if (!limit) {\n    return [];\n  }\n  string = toString(string);\n  if (string && (\n        typeof separator == 'string' ||\n        (separator != null && !isRegExp(separator))\n      )) {\n    separator = baseToString(separator);\n    if (!separator && hasUnicode(string)) {\n      return castSlice(stringToArray(string), 0, limit);\n    }\n  }\n  return string.split(separator, limit);\n}\n\nmodule.exports = split;\n"],"mappings":"AAAA,IAAIA,YAAY,GAAGC,OAAO,CAAC,iBAAiB,CAAC;EACzCC,SAAS,GAAGD,OAAO,CAAC,cAAc,CAAC;EACnCE,UAAU,GAAGF,OAAO,CAAC,eAAe,CAAC;EACrCG,cAAc,GAAGH,OAAO,CAAC,mBAAmB,CAAC;EAC7CI,QAAQ,GAAGJ,OAAO,CAAC,YAAY,CAAC;EAChCK,aAAa,GAAGL,OAAO,CAAC,kBAAkB,CAAC;EAC3CM,QAAQ,GAAGN,OAAO,CAAC,YAAY,CAAC;;AAEpC;AACA,IAAIO,gBAAgB,GAAG,UAAU;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,KAAKA,CAACC,MAAM,EAAEC,SAAS,EAAEC,KAAK,EAAE;EACvC,IAAIA,KAAK,IAAI,OAAOA,KAAK,IAAI,QAAQ,IAAIR,cAAc,CAACM,MAAM,EAAEC,SAAS,EAAEC,KAAK,CAAC,EAAE;IACjFD,SAAS,GAAGC,KAAK,GAAGC,SAAS;EAC/B;EACAD,KAAK,GAAGA,KAAK,KAAKC,SAAS,GAAGL,gBAAgB,GAAGI,KAAK,KAAK,CAAC;EAC5D,IAAI,CAACA,KAAK,EAAE;IACV,OAAO,EAAE;EACX;EACAF,MAAM,GAAGH,QAAQ,CAACG,MAAM,CAAC;EACzB,IAAIA,MAAM,KACJ,OAAOC,SAAS,IAAI,QAAQ,IAC3BA,SAAS,IAAI,IAAI,IAAI,CAACN,QAAQ,CAACM,SAAS,CAAE,CAC5C,EAAE;IACLA,SAAS,GAAGX,YAAY,CAACW,SAAS,CAAC;IACnC,IAAI,CAACA,SAAS,IAAIR,UAAU,CAACO,MAAM,CAAC,EAAE;MACpC,OAAOR,SAAS,CAACI,aAAa,CAACI,MAAM,CAAC,EAAE,CAAC,EAAEE,KAAK,CAAC;IACnD;EACF;EACA,OAAOF,MAAM,CAACD,KAAK,CAACE,SAAS,EAAEC,KAAK,CAAC;AACvC;AAEAE,MAAM,CAACC,OAAO,GAAGN,KAAK"},"metadata":{},"sourceType":"script"}