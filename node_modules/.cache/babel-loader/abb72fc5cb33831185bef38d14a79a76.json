{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\KondalaRaoThota\\\\Truviq_Camunda\\\\camunda-react\\\\src\\\\components\\\\DeployProcess.js\";\nimport React, { Component } from 'react';\nimport { deployProcess } from '../actions';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { Form, Button } from 'semantic-ui-react';\nimport FileReaderInput from 'react-file-reader-input';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass DeployProcess extends Component {\n  constructor() {\n    super(...arguments);\n    this.handleChange = (e, results) => {\n      results.forEach(result => {\n        const [e, file] = result;\n        this.uploadFile(file.name, e.target.result);\n      });\n    };\n  }\n  uploadFile(filename, file) {\n    this.props.deployProcess(filename, file);\n  }\n  render() {\n    if (!this.props.processDeployment) {\n      return /*#__PURE__*/_jsxDEV(Form, {\n        children: /*#__PURE__*/_jsxDEV(FileReaderInput, {\n          as: \"binary\",\n          id: \"my-file-input\",\n          onChange: this.handleChange,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            primary: true,\n            children: \"Select a BPMN file that you want to deploy to the Engine!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Successfully uploaded bpmn file to engine\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this);\n    }\n  }\n}\nconst mapStateToProps = (state, ownProps) => {\n  const params = ownProps.match.params;\n  return {\n    ...params,\n    ...state.entities\n  };\n};\nexport default withRouter(connect(mapStateToProps, {\n  deployProcess\n})(DeployProcess));","map":{"version":3,"names":["React","Component","deployProcess","connect","withRouter","Form","Button","FileReaderInput","jsxDEV","_jsxDEV","DeployProcess","constructor","arguments","handleChange","e","results","forEach","result","file","uploadFile","name","target","filename","props","render","processDeployment","children","as","id","onChange","primary","fileName","_jsxFileName","lineNumber","columnNumber","mapStateToProps","state","ownProps","params","match","entities"],"sources":["C:/Users/KondalaRaoThota/Truviq_Camunda/camunda-react/src/components/DeployProcess.js"],"sourcesContent":["import React, { Component } from 'react'\r\nimport { deployProcess } from '../actions'\r\nimport { connect } from 'react-redux'\r\nimport { withRouter } from 'react-router-dom'\r\nimport { Form, Button } from 'semantic-ui-react'\r\nimport FileReaderInput from 'react-file-reader-input'\r\n\r\nclass DeployProcess extends Component {\r\n  handleChange = (e, results) => {\r\n    results.forEach(result => {\r\n      const [e, file] = result\r\n      this.uploadFile(file.name, e.target.result)\r\n    });\r\n  }\r\n\r\n  uploadFile(filename, file) {\r\n    this.props.deployProcess(filename, file)\r\n  }\r\n\r\n  render() {\r\n    if (!this.props.processDeployment) {\r\n      return (\r\n        <Form>\r\n          <FileReaderInput as=\"binary\" id=\"my-file-input\" onChange={this.handleChange}>\r\n            <Button primary>Select a BPMN file that you want to deploy to the Engine!</Button>\r\n          </FileReaderInput>\r\n        </Form>\r\n      )\r\n    } else {\r\n      return (\r\n        <p>Successfully uploaded bpmn file to engine</p>\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  const params = ownProps.match.params\r\n  return {\r\n    ...params,\r\n    ...state.entities\r\n  }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, {\r\n  deployProcess\r\n})(DeployProcess))\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,aAAa,QAAQ,YAAY;AAC1C,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,IAAI,EAAEC,MAAM,QAAQ,mBAAmB;AAChD,OAAOC,eAAe,MAAM,yBAAyB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAErD,MAAMC,aAAa,SAAST,SAAS,CAAC;EAAAU,YAAA;IAAA,SAAAC,SAAA;IAAA,KACpCC,YAAY,GAAG,CAACC,CAAC,EAAEC,OAAO,KAAK;MAC7BA,OAAO,CAACC,OAAO,CAACC,MAAM,IAAI;QACxB,MAAM,CAACH,CAAC,EAAEI,IAAI,CAAC,GAAGD,MAAM;QACxB,IAAI,CAACE,UAAU,CAACD,IAAI,CAACE,IAAI,EAAEN,CAAC,CAACO,MAAM,CAACJ,MAAM,CAAC;MAC7C,CAAC,CAAC;IACJ,CAAC;EAAA;EAEDE,UAAUA,CAACG,QAAQ,EAAEJ,IAAI,EAAE;IACzB,IAAI,CAACK,KAAK,CAACrB,aAAa,CAACoB,QAAQ,EAAEJ,IAAI,CAAC;EAC1C;EAEAM,MAAMA,CAAA,EAAG;IACP,IAAI,CAAC,IAAI,CAACD,KAAK,CAACE,iBAAiB,EAAE;MACjC,oBACEhB,OAAA,CAACJ,IAAI;QAAAqB,QAAA,eACHjB,OAAA,CAACF,eAAe;UAACoB,EAAE,EAAC,QAAQ;UAACC,EAAE,EAAC,eAAe;UAACC,QAAQ,EAAE,IAAI,CAAChB,YAAa;UAAAa,QAAA,eAC1EjB,OAAA,CAACH,MAAM;YAACwB,OAAO;YAAAJ,QAAA,EAAC;UAAyD;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA;QAAS;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAClE;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACb;IAEX,CAAC,MAAM;MACL,oBACEzB,OAAA;QAAAiB,QAAA,EAAG;MAAyC;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAI;IAEpD;EACF;AACF;AAEA,MAAMC,eAAe,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK;EAC3C,MAAMC,MAAM,GAAGD,QAAQ,CAACE,KAAK,CAACD,MAAM;EACpC,OAAO;IACL,GAAGA,MAAM;IACT,GAAGF,KAAK,CAACI;EACX,CAAC;AACH,CAAC;AAED,eAAepC,UAAU,CAACD,OAAO,CAACgC,eAAe,EAAE;EACjDjC;AACF,CAAC,CAAC,CAACQ,aAAa,CAAC,CAAC"},"metadata":{},"sourceType":"module"}