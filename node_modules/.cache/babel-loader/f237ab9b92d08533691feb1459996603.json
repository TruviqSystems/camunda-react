{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps, META, useKeyOnly } from '../../lib';\n\n/**\r\n * A content sub-component for Accordion component.\r\n */\nfunction AccordionContent(props) {\n  var active = props.active,\n    children = props.children,\n    className = props.className,\n    content = props.content;\n  var classes = cx('content', useKeyOnly(active, 'active'), className);\n  var rest = getUnhandledProps(AccordionContent, props);\n  var ElementType = getElementType(AccordionContent, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\nAccordionContent.handledProps = ['active', 'as', 'children', 'className', 'content'];\nAccordionContent.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n  /** Whether or not the content is visible. */\n  active: PropTypes.bool,\n  /** Primary content. */\n  children: PropTypes.node,\n  /** Additional classes. */\n  className: PropTypes.string,\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nAccordionContent._meta = {\n  name: 'AccordionContent',\n  type: META.TYPES.MODULE,\n  parent: 'Accordion'\n};\nAccordionContent.create = createShorthandFactory(AccordionContent, function (content) {\n  return {\n    content: content\n  };\n});\nexport default AccordionContent;","map":{"version":3,"names":["_extends","cx","PropTypes","React","childrenUtils","createShorthandFactory","customPropTypes","getElementType","getUnhandledProps","META","useKeyOnly","AccordionContent","props","active","children","className","content","classes","rest","ElementType","createElement","isNil","handledProps","propTypes","process","env","NODE_ENV","as","bool","node","string","contentShorthand","_meta","name","type","TYPES","MODULE","parent","create"],"sources":["C:/Users/sam/final/camunda-react/node_modules/react-semantic-redux-form/node_modules/semantic-ui-react/dist/es/modules/Accordion/AccordionContent.js"],"sourcesContent":["import _extends from 'babel-runtime/helpers/extends';\r\nimport cx from 'classnames';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps, META, useKeyOnly } from '../../lib';\r\n\r\n/**\r\n * A content sub-component for Accordion component.\r\n */\r\nfunction AccordionContent(props) {\r\n  var active = props.active,\r\n      children = props.children,\r\n      className = props.className,\r\n      content = props.content;\r\n\r\n  var classes = cx('content', useKeyOnly(active, 'active'), className);\r\n  var rest = getUnhandledProps(AccordionContent, props);\r\n  var ElementType = getElementType(AccordionContent, props);\r\n\r\n  return React.createElement(\r\n    ElementType,\r\n    _extends({}, rest, { className: classes }),\r\n    childrenUtils.isNil(children) ? content : children\r\n  );\r\n}\r\n\r\nAccordionContent.handledProps = ['active', 'as', 'children', 'className', 'content'];\r\nAccordionContent.propTypes = process.env.NODE_ENV !== \"production\" ? {\r\n  /** An element type to render as (string or function). */\r\n  as: customPropTypes.as,\r\n\r\n  /** Whether or not the content is visible. */\r\n  active: PropTypes.bool,\r\n\r\n  /** Primary content. */\r\n  children: PropTypes.node,\r\n\r\n  /** Additional classes. */\r\n  className: PropTypes.string,\r\n\r\n  /** Shorthand for primary content. */\r\n  content: customPropTypes.contentShorthand\r\n} : {};\r\n\r\nAccordionContent._meta = {\r\n  name: 'AccordionContent',\r\n  type: META.TYPES.MODULE,\r\n  parent: 'Accordion'\r\n};\r\n\r\nAccordionContent.create = createShorthandFactory(AccordionContent, function (content) {\r\n  return { content: content };\r\n});\r\n\r\nexport default AccordionContent;"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,+BAA+B;AACpD,OAAOC,EAAE,MAAM,YAAY;AAC3B,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,KAAK,MAAM,OAAO;AAEzB,SAASC,aAAa,EAAEC,sBAAsB,EAAEC,eAAe,EAAEC,cAAc,EAAEC,iBAAiB,EAAEC,IAAI,EAAEC,UAAU,QAAQ,WAAW;;AAEvI;AACA;AACA;AACA,SAASC,gBAAgBA,CAACC,KAAK,EAAE;EAC/B,IAAIC,MAAM,GAAGD,KAAK,CAACC,MAAM;IACrBC,QAAQ,GAAGF,KAAK,CAACE,QAAQ;IACzBC,SAAS,GAAGH,KAAK,CAACG,SAAS;IAC3BC,OAAO,GAAGJ,KAAK,CAACI,OAAO;EAE3B,IAAIC,OAAO,GAAGhB,EAAE,CAAC,SAAS,EAAES,UAAU,CAACG,MAAM,EAAE,QAAQ,CAAC,EAAEE,SAAS,CAAC;EACpE,IAAIG,IAAI,GAAGV,iBAAiB,CAACG,gBAAgB,EAAEC,KAAK,CAAC;EACrD,IAAIO,WAAW,GAAGZ,cAAc,CAACI,gBAAgB,EAAEC,KAAK,CAAC;EAEzD,OAAOT,KAAK,CAACiB,aAAa,CACxBD,WAAW,EACXnB,QAAQ,CAAC,CAAC,CAAC,EAAEkB,IAAI,EAAE;IAAEH,SAAS,EAAEE;EAAQ,CAAC,CAAC,EAC1Cb,aAAa,CAACiB,KAAK,CAACP,QAAQ,CAAC,GAAGE,OAAO,GAAGF,QAAQ,CACnD;AACH;AAEAH,gBAAgB,CAACW,YAAY,GAAG,CAAC,QAAQ,EAAE,IAAI,EAAE,UAAU,EAAE,WAAW,EAAE,SAAS,CAAC;AACpFX,gBAAgB,CAACY,SAAS,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAG;EACnE;EACAC,EAAE,EAAErB,eAAe,CAACqB,EAAE;EAEtB;EACAd,MAAM,EAAEX,SAAS,CAAC0B,IAAI;EAEtB;EACAd,QAAQ,EAAEZ,SAAS,CAAC2B,IAAI;EAExB;EACAd,SAAS,EAAEb,SAAS,CAAC4B,MAAM;EAE3B;EACAd,OAAO,EAAEV,eAAe,CAACyB;AAC3B,CAAC,GAAG,CAAC,CAAC;AAENpB,gBAAgB,CAACqB,KAAK,GAAG;EACvBC,IAAI,EAAE,kBAAkB;EACxBC,IAAI,EAAEzB,IAAI,CAAC0B,KAAK,CAACC,MAAM;EACvBC,MAAM,EAAE;AACV,CAAC;AAED1B,gBAAgB,CAAC2B,MAAM,GAAGjC,sBAAsB,CAACM,gBAAgB,EAAE,UAAUK,OAAO,EAAE;EACpF,OAAO;IAAEA,OAAO,EAAEA;EAAQ,CAAC;AAC7B,CAAC,CAAC;AAEF,eAAeL,gBAAgB"},"metadata":{},"sourceType":"module"}