{"ast":null,"code":"import { isNumber, assign, forEach, every, debounce, bind, reduce, find } from 'min-dash';\nimport { add as collectionAdd, remove as collectionRemove } from '../util/Collections';\nimport { getType, getBBox as getBoundingBox } from '../util/Elements';\nimport { asTRBL } from '../layout/LayoutUtil';\nimport { append as svgAppend, attr as svgAttr, classes as svgClasses, create as svgCreate, transform as svgTransform } from 'tiny-svg';\nimport { createMatrix } from 'tiny-svg';\nfunction round(number, resolution) {\n  return Math.round(number * resolution) / resolution;\n}\nfunction ensurePx(number) {\n  return isNumber(number) ? number + 'px' : number;\n}\nfunction findRoot(element) {\n  while (element.parent) {\n    element = element.parent;\n  }\n  return element;\n}\n\n/**\n * Creates a HTML container element for a SVG element with\n * the given configuration\n *\n * @param  {Object} options\n * @return {HTMLElement} the container element\n */\nfunction createContainer(options) {\n  options = assign({}, {\n    width: '100%',\n    height: '100%'\n  }, options);\n  var container = options.container || document.body;\n\n  // create a <div> around the svg element with the respective size\n  // this way we can always get the correct container size\n  // (this is impossible for <svg> elements at the moment)\n  var parent = document.createElement('div');\n  parent.setAttribute('class', 'djs-container');\n  assign(parent.style, {\n    position: 'relative',\n    overflow: 'hidden',\n    width: ensurePx(options.width),\n    height: ensurePx(options.height)\n  });\n  container.appendChild(parent);\n  return parent;\n}\nfunction createGroup(parent, cls, childIndex) {\n  var group = svgCreate('g');\n  svgClasses(group).add(cls);\n  var index = childIndex !== undefined ? childIndex : parent.childNodes.length - 1;\n\n  // must ensure second argument is node or _null_\n  // cf. https://developer.mozilla.org/en-US/docs/Web/API/Node/insertBefore\n  parent.insertBefore(group, parent.childNodes[index] || null);\n  return group;\n}\nvar BASE_LAYER = 'base';\nvar HIDDEN_MARKER = 'djs-element-hidden';\n\n// render plane contents behind utility layers\nvar PLANE_LAYER_INDEX = 0;\nvar UTILITY_LAYER_INDEX = 1;\nvar REQUIRED_MODEL_ATTRS = {\n  shape: ['x', 'y', 'width', 'height'],\n  connection: ['waypoints']\n};\n\n/**\n * The main drawing canvas.\n *\n * @class\n * @constructor\n *\n * @emits Canvas#canvas.init\n *\n * @param {Object} config\n * @param {EventBus} eventBus\n * @param {GraphicsFactory} graphicsFactory\n * @param {ElementRegistry} elementRegistry\n */\nexport default function Canvas(config, eventBus, graphicsFactory, elementRegistry) {\n  this._eventBus = eventBus;\n  this._elementRegistry = elementRegistry;\n  this._graphicsFactory = graphicsFactory;\n  this._init(config || {});\n}\nCanvas.$inject = ['config.canvas', 'eventBus', 'graphicsFactory', 'elementRegistry'];\n\n/**\n * Creates a <svg> element that is wrapped into a <div>.\n * This way we are always able to correctly figure out the size of the svg element\n * by querying the parent node.\n\n * (It is not possible to get the size of a svg element cross browser @ 2014-04-01)\n\n * <div class=\"djs-container\" style=\"width: {desired-width}, height: {desired-height}\">\n *   <svg width=\"100%\" height=\"100%\">\n *    ...\n *   </svg>\n * </div>\n */\nCanvas.prototype._init = function (config) {\n  var eventBus = this._eventBus;\n\n  // html container\n  var container = this._container = createContainer(config);\n  var svg = this._svg = svgCreate('svg');\n  svgAttr(svg, {\n    width: '100%',\n    height: '100%'\n  });\n  svgAppend(container, svg);\n  var viewport = this._viewport = createGroup(svg, 'viewport');\n  this._layers = {};\n  this._planes = {};\n\n  // debounce canvas.viewbox.changed events\n  // for smoother diagram interaction\n  if (config.deferUpdate !== false) {\n    this._viewboxChanged = debounce(bind(this._viewboxChanged, this), 300);\n  }\n  eventBus.on('diagram.init', function () {\n    /**\n     * An event indicating that the canvas is ready to be drawn on.\n     *\n     * @memberOf Canvas\n     *\n     * @event canvas.init\n     *\n     * @type {Object}\n     * @property {SVGElement} svg the created svg element\n     * @property {SVGElement} viewport the direct parent of diagram elements and shapes\n     */\n    eventBus.fire('canvas.init', {\n      svg: svg,\n      viewport: viewport\n    });\n  }, this);\n\n  // reset viewbox on shape changes to\n  // recompute the viewbox\n  eventBus.on(['shape.added', 'connection.added', 'shape.removed', 'connection.removed', 'elements.changed', 'plane.set'], function () {\n    delete this._cachedViewbox;\n  }, this);\n  eventBus.on('diagram.destroy', 500, this._destroy, this);\n  eventBus.on('diagram.clear', 500, this._clear, this);\n};\nCanvas.prototype._destroy = function (emit) {\n  this._eventBus.fire('canvas.destroy', {\n    svg: this._svg,\n    viewport: this._viewport\n  });\n  var parent = this._container.parentNode;\n  if (parent) {\n    parent.removeChild(this._container);\n  }\n  delete this._svg;\n  delete this._container;\n  delete this._layers;\n  delete this._planes;\n  delete this._activePlane;\n  delete this._viewport;\n};\nCanvas.prototype._clear = function () {\n  var self = this;\n  var allElements = this._elementRegistry.getAll();\n\n  // remove all elements\n  allElements.forEach(function (element) {\n    var type = getType(element);\n    if (type === 'root') {\n      self.setRootElementForPlane(null, self.findPlane(element), true);\n    } else {\n      self._removeElement(element, type);\n    }\n  });\n\n  // remove all planes\n  this._activePlane = null;\n  this._planes = {};\n\n  // force recomputation of view box\n  delete this._cachedViewbox;\n};\n\n/**\n * Returns the default layer on which\n * all elements are drawn.\n *\n * @returns {SVGElement}\n */\nCanvas.prototype.getDefaultLayer = function () {\n  return this.getLayer(BASE_LAYER, PLANE_LAYER_INDEX);\n};\n\n/**\n * Returns a layer that is used to draw elements\n * or annotations on it.\n *\n * Non-existing layers retrieved through this method\n * will be created. During creation, the optional index\n * may be used to create layers below or above existing layers.\n * A layer with a certain index is always created above all\n * existing layers with the same index.\n *\n * @param {string} name\n * @param {number} index\n *\n * @returns {SVGElement}\n */\nCanvas.prototype.getLayer = function (name, index) {\n  if (!name) {\n    throw new Error('must specify a name');\n  }\n  var layer = this._layers[name];\n  if (!layer) {\n    layer = this._layers[name] = this._createLayer(name, index);\n  }\n\n  // throw an error if layer creation / retrival is\n  // requested on different index\n  if (typeof index !== 'undefined' && layer.index !== index) {\n    throw new Error('layer <' + name + '> already created at index <' + index + '>');\n  }\n  return layer.group;\n};\n\n/**\n * Creates a given layer and returns it.\n *\n * @param {string} name\n * @param {number} [index=0]\n *\n * @return {Object} layer descriptor with { index, group: SVGGroup }\n */\nCanvas.prototype._createLayer = function (name, index) {\n  if (typeof index === 'undefined') {\n    index = UTILITY_LAYER_INDEX;\n  }\n  var childIndex = reduce(this._layers, function (childIndex, layer) {\n    if (index >= layer.index) {\n      childIndex++;\n    }\n    return childIndex;\n  }, 0);\n  return {\n    group: createGroup(this._viewport, 'layer-' + name, childIndex),\n    index: index\n  };\n};\n\n/**\n * Returns a plane that is used to draw elements on it.\n *\n * @param {string} name\n *\n * @return {Object} plane descriptor with { layer, rootElement, name }\n */\nCanvas.prototype.getPlane = function (name) {\n  if (!name) {\n    throw new Error('must specify a name');\n  }\n  return this._planes[name];\n};\n\n/**\n * Creates a plane that is used to draw elements on it. If no\n * root element is provided, an implicit root will be used.\n *\n * @param {string} name\n * @param {Object|djs.model.Root} [rootElement] optional root element\n *\n * @return {Object} plane descriptor with { layer, rootElement, name }\n */\nCanvas.prototype.createPlane = function (name, rootElement) {\n  if (!name) {\n    throw new Error('must specify a name');\n  }\n  if (this._planes[name]) {\n    throw new Error('plane ' + name + ' already exists');\n  }\n  if (!rootElement) {\n    rootElement = {\n      id: '__implicitroot' + name,\n      children: [],\n      isImplicit: true\n    };\n  }\n  var svgLayer = this.getLayer(name, PLANE_LAYER_INDEX);\n  svgClasses(svgLayer).add(HIDDEN_MARKER);\n  var plane = this._planes[name] = {\n    layer: svgLayer,\n    name: name,\n    rootElement: null\n  };\n  this.setRootElementForPlane(rootElement, plane);\n  return plane;\n};\n\n/**\n * Sets the active plane and hides the previously active plane.\n *\n * @param {string|Object} plane\n *\n * @return {Object} plane descriptor with { layer, rootElement, name }\n */\nCanvas.prototype.setActivePlane = function (plane) {\n  if (!plane) {\n    throw new Error('must specify a plane');\n  }\n  if (typeof plane === 'string') {\n    plane = this.getPlane(plane);\n  }\n\n  // hide previous Plane\n  if (this._activePlane) {\n    svgClasses(this._activePlane.layer).add(HIDDEN_MARKER);\n  }\n  this._activePlane = plane;\n\n  // show current Plane\n  svgClasses(plane.layer).remove(HIDDEN_MARKER);\n  if (plane.rootElement) {\n    this._elementRegistry.updateGraphics(plane.rootElement, this._svg, true);\n  }\n  this._eventBus.fire('plane.set', {\n    plane: plane\n  });\n  return plane;\n};\n\n/**\n * Returns the currently active layer\n *\n * @returns {SVGElement}\n */\n\nCanvas.prototype.getActiveLayer = function () {\n  return this.getActivePlane().layer;\n};\n\n/**\n * Returns the currently active plane.\n *\n * @return {Object} plane descriptor with { layer, rootElement, name }\n */\nCanvas.prototype.getActivePlane = function () {\n  var plane = this._activePlane;\n  if (!plane) {\n    plane = this.createPlane(BASE_LAYER);\n    this.setActivePlane(BASE_LAYER);\n  }\n  return plane;\n};\n\n/**\n * Returns the plane which contains the given element.\n *\n * @param {string|djs.model.Base} element\n *\n * @return {Object} plane descriptor with { layer, rootElement, name }\n */\nCanvas.prototype.findPlane = function (element) {\n  if (typeof element === 'string') {\n    element = this._elementRegistry.get(element);\n  }\n  var root = findRoot(element);\n  return find(this._planes, function (plane) {\n    return plane.rootElement === root;\n  });\n};\n\n/**\n * Returns the html element that encloses the\n * drawing canvas.\n *\n * @return {DOMNode}\n */\nCanvas.prototype.getContainer = function () {\n  return this._container;\n};\n\n// markers //////////////////////\n\nCanvas.prototype._updateMarker = function (element, marker, add) {\n  var container;\n  if (!element.id) {\n    element = this._elementRegistry.get(element);\n  }\n\n  // we need to access all\n  container = this._elementRegistry._elements[element.id];\n  if (!container) {\n    return;\n  }\n  forEach([container.gfx, container.secondaryGfx], function (gfx) {\n    if (gfx) {\n      // invoke either addClass or removeClass based on mode\n      if (add) {\n        svgClasses(gfx).add(marker);\n      } else {\n        svgClasses(gfx).remove(marker);\n      }\n    }\n  });\n\n  /**\n   * An event indicating that a marker has been updated for an element\n   *\n   * @event element.marker.update\n   * @type {Object}\n   * @property {djs.model.Element} element the shape\n   * @property {Object} gfx the graphical representation of the shape\n   * @property {string} marker\n   * @property {boolean} add true if the marker was added, false if it got removed\n   */\n  this._eventBus.fire('element.marker.update', {\n    element: element,\n    gfx: container.gfx,\n    marker: marker,\n    add: !!add\n  });\n};\n\n/**\n * Adds a marker to an element (basically a css class).\n *\n * Fires the element.marker.update event, making it possible to\n * integrate extension into the marker life-cycle, too.\n *\n * @example\n * canvas.addMarker('foo', 'some-marker');\n *\n * var fooGfx = canvas.getGraphics('foo');\n *\n * fooGfx; // <g class=\"... some-marker\"> ... </g>\n *\n * @param {string|djs.model.Base} element\n * @param {string} marker\n */\nCanvas.prototype.addMarker = function (element, marker) {\n  this._updateMarker(element, marker, true);\n};\n\n/**\n * Remove a marker from an element.\n *\n * Fires the element.marker.update event, making it possible to\n * integrate extension into the marker life-cycle, too.\n *\n * @param  {string|djs.model.Base} element\n * @param  {string} marker\n */\nCanvas.prototype.removeMarker = function (element, marker) {\n  this._updateMarker(element, marker, false);\n};\n\n/**\n * Check the existence of a marker on element.\n *\n * @param  {string|djs.model.Base} element\n * @param  {string} marker\n */\nCanvas.prototype.hasMarker = function (element, marker) {\n  if (!element.id) {\n    element = this._elementRegistry.get(element);\n  }\n  var gfx = this.getGraphics(element);\n  return svgClasses(gfx).has(marker);\n};\n\n/**\n * Toggles a marker on an element.\n *\n * Fires the element.marker.update event, making it possible to\n * integrate extension into the marker life-cycle, too.\n *\n * @param  {string|djs.model.Base} element\n * @param  {string} marker\n */\nCanvas.prototype.toggleMarker = function (element, marker) {\n  if (this.hasMarker(element, marker)) {\n    this.removeMarker(element, marker);\n  } else {\n    this.addMarker(element, marker);\n  }\n};\nCanvas.prototype.getRootElement = function () {\n  var plane = this.getActivePlane();\n  return plane.rootElement;\n};\n\n// root element handling //////////////////////\n\n/**\n * Sets a given element as the new root element for the canvas\n * and returns the new root element.\n *\n * @param {Object|djs.model.Root} element\n * @param {boolean} [override] whether to override the current root element, if any\n *\n * @return {Object|djs.model.Root} new root element\n */\nCanvas.prototype.setRootElement = function (element, override) {\n  var activePlane = this._activePlane;\n  if (activePlane) {\n    return this.setRootElementForPlane(element, activePlane, override);\n  } else {\n    var basePlane = this.createPlane(BASE_LAYER, element);\n    this.setActivePlane(basePlane);\n    return basePlane.rootElement;\n  }\n};\n\n/**\n * Sets a given element as the new root element for the canvas\n * and returns the new root element.\n *\n * @param {Object|djs.model.Root} element\n * @param {Object|djs.model.Root} plane\n * @param {boolean} [override] whether to override the current root element, if any\n *\n * @return {Object|djs.model.Root} new root element\n */\nCanvas.prototype.setRootElementForPlane = function (element, plane, override) {\n  if (typeof plane === 'string') {\n    plane = this.getPlane(plane);\n  }\n  if (element) {\n    this._ensureValid('root', element);\n  }\n  var currentRoot = plane.rootElement,\n    elementRegistry = this._elementRegistry,\n    eventBus = this._eventBus;\n  if (currentRoot) {\n    if (!override) {\n      throw new Error('rootElement already set, need to specify override');\n    }\n\n    // simulate element remove event sequence\n    eventBus.fire('root.remove', {\n      element: currentRoot\n    });\n    eventBus.fire('root.removed', {\n      element: currentRoot\n    });\n    elementRegistry.remove(currentRoot);\n  }\n  if (element) {\n    var gfx = plane.layer;\n\n    // resemble element add event sequence\n    eventBus.fire('root.add', {\n      element: element\n    });\n    elementRegistry.add(element, gfx);\n    eventBus.fire('root.added', {\n      element: element,\n      gfx: gfx\n    });\n\n    // associate SVG with root element when active\n    if (plane === this._activePlane) {\n      this._elementRegistry.updateGraphics(element, this._svg, true);\n    }\n  }\n  plane.rootElement = element;\n  return element;\n};\n\n// add functionality //////////////////////\n\nCanvas.prototype._ensureValid = function (type, element) {\n  if (!element.id) {\n    throw new Error('element must have an id');\n  }\n  if (this._elementRegistry.get(element.id)) {\n    throw new Error('element with id ' + element.id + ' already exists');\n  }\n  var requiredAttrs = REQUIRED_MODEL_ATTRS[type];\n  var valid = every(requiredAttrs, function (attr) {\n    return typeof element[attr] !== 'undefined';\n  });\n  if (!valid) {\n    throw new Error('must supply { ' + requiredAttrs.join(', ') + ' } with ' + type);\n  }\n};\nCanvas.prototype._setParent = function (element, parent, parentIndex) {\n  collectionAdd(parent.children, element, parentIndex);\n  element.parent = parent;\n};\n\n/**\n * Adds an element to the canvas.\n *\n * This wires the parent <-> child relationship between the element and\n * a explicitly specified parent or an implicit root element.\n *\n * During add it emits the events\n *\n *  * <{type}.add> (element, parent)\n *  * <{type}.added> (element, gfx)\n *\n * Extensions may hook into these events to perform their magic.\n *\n * @param {string} type\n * @param {Object|djs.model.Base} element\n * @param {Object|djs.model.Base} [parent]\n * @param {number} [parentIndex]\n *\n * @return {Object|djs.model.Base} the added element\n */\nCanvas.prototype._addElement = function (type, element, parent, parentIndex) {\n  parent = parent || this.getRootElement();\n  var eventBus = this._eventBus,\n    graphicsFactory = this._graphicsFactory;\n  this._ensureValid(type, element);\n  eventBus.fire(type + '.add', {\n    element: element,\n    parent: parent\n  });\n  this._setParent(element, parent, parentIndex);\n\n  // create graphics\n  var gfx = graphicsFactory.create(type, element, parentIndex);\n  this._elementRegistry.add(element, gfx);\n\n  // update its visual\n  graphicsFactory.update(type, element, gfx);\n  eventBus.fire(type + '.added', {\n    element: element,\n    gfx: gfx\n  });\n  return element;\n};\n\n/**\n * Adds a shape to the canvas\n *\n * @param {Object|djs.model.Shape} shape to add to the diagram\n * @param {djs.model.Base} [parent]\n * @param {number} [parentIndex]\n *\n * @return {djs.model.Shape} the added shape\n */\nCanvas.prototype.addShape = function (shape, parent, parentIndex) {\n  return this._addElement('shape', shape, parent, parentIndex);\n};\n\n/**\n * Adds a connection to the canvas\n *\n * @param {Object|djs.model.Connection} connection to add to the diagram\n * @param {djs.model.Base} [parent]\n * @param {number} [parentIndex]\n *\n * @return {djs.model.Connection} the added connection\n */\nCanvas.prototype.addConnection = function (connection, parent, parentIndex) {\n  return this._addElement('connection', connection, parent, parentIndex);\n};\n\n/**\n * Internal remove element\n */\nCanvas.prototype._removeElement = function (element, type) {\n  var elementRegistry = this._elementRegistry,\n    graphicsFactory = this._graphicsFactory,\n    eventBus = this._eventBus;\n  element = elementRegistry.get(element.id || element);\n  if (!element) {\n    // element was removed already\n    return;\n  }\n  eventBus.fire(type + '.remove', {\n    element: element\n  });\n  graphicsFactory.remove(element);\n\n  // unset parent <-> child relationship\n  collectionRemove(element.parent && element.parent.children, element);\n  element.parent = null;\n  eventBus.fire(type + '.removed', {\n    element: element\n  });\n  elementRegistry.remove(element);\n  return element;\n};\n\n/**\n * Removes a shape from the canvas\n *\n * @param {string|djs.model.Shape} shape or shape id to be removed\n *\n * @return {djs.model.Shape} the removed shape\n */\nCanvas.prototype.removeShape = function (shape) {\n  /**\n   * An event indicating that a shape is about to be removed from the canvas.\n   *\n   * @memberOf Canvas\n   *\n   * @event shape.remove\n   * @type {Object}\n   * @property {djs.model.Shape} element the shape descriptor\n   * @property {Object} gfx the graphical representation of the shape\n   */\n\n  /**\n   * An event indicating that a shape has been removed from the canvas.\n   *\n   * @memberOf Canvas\n   *\n   * @event shape.removed\n   * @type {Object}\n   * @property {djs.model.Shape} element the shape descriptor\n   * @property {Object} gfx the graphical representation of the shape\n   */\n  return this._removeElement(shape, 'shape');\n};\n\n/**\n * Removes a connection from the canvas\n *\n * @param {string|djs.model.Connection} connection or connection id to be removed\n *\n * @return {djs.model.Connection} the removed connection\n */\nCanvas.prototype.removeConnection = function (connection) {\n  /**\n   * An event indicating that a connection is about to be removed from the canvas.\n   *\n   * @memberOf Canvas\n   *\n   * @event connection.remove\n   * @type {Object}\n   * @property {djs.model.Connection} element the connection descriptor\n   * @property {Object} gfx the graphical representation of the connection\n   */\n\n  /**\n   * An event indicating that a connection has been removed from the canvas.\n   *\n   * @memberOf Canvas\n   *\n   * @event connection.removed\n   * @type {Object}\n   * @property {djs.model.Connection} element the connection descriptor\n   * @property {Object} gfx the graphical representation of the connection\n   */\n  return this._removeElement(connection, 'connection');\n};\n\n/**\n * Return the graphical object underlaying a certain diagram element\n *\n * @param {string|djs.model.Base} element descriptor of the element\n * @param {boolean} [secondary=false] whether to return the secondary connected element\n *\n * @return {SVGElement}\n */\nCanvas.prototype.getGraphics = function (element, secondary) {\n  return this._elementRegistry.getGraphics(element, secondary);\n};\n\n/**\n * Perform a viewbox update via a given change function.\n *\n * @param {Function} changeFn\n */\nCanvas.prototype._changeViewbox = function (changeFn) {\n  // notify others of the upcoming viewbox change\n  this._eventBus.fire('canvas.viewbox.changing');\n\n  // perform actual change\n  changeFn.apply(this);\n\n  // reset the cached viewbox so that\n  // a new get operation on viewbox or zoom\n  // triggers a viewbox re-computation\n  this._cachedViewbox = null;\n\n  // notify others of the change; this step\n  // may or may not be debounced\n  this._viewboxChanged();\n};\nCanvas.prototype._viewboxChanged = function () {\n  this._eventBus.fire('canvas.viewbox.changed', {\n    viewbox: this.viewbox()\n  });\n};\n\n/**\n * Gets or sets the view box of the canvas, i.e. the\n * area that is currently displayed.\n *\n * The getter may return a cached viewbox (if it is currently\n * changing). To force a recomputation, pass `false` as the first argument.\n *\n * @example\n *\n * canvas.viewbox({ x: 100, y: 100, width: 500, height: 500 })\n *\n * // sets the visible area of the diagram to (100|100) -> (600|100)\n * // and and scales it according to the diagram width\n *\n * var viewbox = canvas.viewbox(); // pass `false` to force recomputing the box.\n *\n * console.log(viewbox);\n * // {\n * //   inner: Dimensions,\n * //   outer: Dimensions,\n * //   scale,\n * //   x, y,\n * //   width, height\n * // }\n *\n * // if the current diagram is zoomed and scrolled, you may reset it to the\n * // default zoom via this method, too:\n *\n * var zoomedAndScrolledViewbox = canvas.viewbox();\n *\n * canvas.viewbox({\n *   x: 0,\n *   y: 0,\n *   width: zoomedAndScrolledViewbox.outer.width,\n *   height: zoomedAndScrolledViewbox.outer.height\n * });\n *\n * @param  {Object} [box] the new view box to set\n * @param  {number} box.x the top left X coordinate of the canvas visible in view box\n * @param  {number} box.y the top left Y coordinate of the canvas visible in view box\n * @param  {number} box.width the visible width\n * @param  {number} box.height\n *\n * @return {Object} the current view box\n */\nCanvas.prototype.viewbox = function (box) {\n  if (box === undefined && this._cachedViewbox) {\n    return this._cachedViewbox;\n  }\n  var viewport = this._viewport,\n    innerBox,\n    outerBox = this.getSize(),\n    matrix,\n    transform,\n    scale,\n    x,\n    y;\n  if (!box) {\n    // compute the inner box based on the\n    // diagrams active plane. This allows us to exclude\n    // external components, such as overlays\n\n    innerBox = this._activePlane && this._activePlane.layer.getBBox() || {};\n    transform = svgTransform(viewport);\n    matrix = transform ? transform.matrix : createMatrix();\n    scale = round(matrix.a, 1000);\n    x = round(-matrix.e || 0, 1000);\n    y = round(-matrix.f || 0, 1000);\n    box = this._cachedViewbox = {\n      x: x ? x / scale : 0,\n      y: y ? y / scale : 0,\n      width: outerBox.width / scale,\n      height: outerBox.height / scale,\n      scale: scale,\n      inner: {\n        width: innerBox.width || 0,\n        height: innerBox.height || 0,\n        x: innerBox.x || 0,\n        y: innerBox.y || 0\n      },\n      outer: outerBox\n    };\n    return box;\n  } else {\n    this._changeViewbox(function () {\n      scale = Math.min(outerBox.width / box.width, outerBox.height / box.height);\n      var matrix = this._svg.createSVGMatrix().scale(scale).translate(-box.x, -box.y);\n      svgTransform(viewport, matrix);\n    });\n  }\n  return box;\n};\n\n/**\n * Gets or sets the scroll of the canvas.\n *\n * @param {Object} [delta] the new scroll to apply.\n *\n * @param {number} [delta.dx]\n * @param {number} [delta.dy]\n */\nCanvas.prototype.scroll = function (delta) {\n  var node = this._viewport;\n  var matrix = node.getCTM();\n  if (delta) {\n    this._changeViewbox(function () {\n      delta = assign({\n        dx: 0,\n        dy: 0\n      }, delta || {});\n      matrix = this._svg.createSVGMatrix().translate(delta.dx, delta.dy).multiply(matrix);\n      setCTM(node, matrix);\n    });\n  }\n  return {\n    x: matrix.e,\n    y: matrix.f\n  };\n};\n\n/**\n * Scrolls the viewbox to contain the given element.\n * Optionally specify a padding to be applied to the edges.\n *\n * @param {Object|String} [element] the element to scroll to.\n * @param {Object|Number} [padding=100] the padding to be applied. Can also specify top, bottom, left and right.\n *\n */\nCanvas.prototype.scrollToElement = function (element, padding) {\n  var defaultPadding = 100;\n  if (typeof element === 'string') {\n    element = this._elementRegistry.get(element);\n  }\n\n  // switch to correct Plane\n  var targetPlane = this.findPlane(element);\n  if (targetPlane !== this._activePlane) {\n    this.setActivePlane(targetPlane);\n  }\n  if (!padding) {\n    padding = {};\n  }\n  if (typeof padding === 'number') {\n    defaultPadding = padding;\n  }\n  padding = {\n    top: padding.top || defaultPadding,\n    right: padding.right || defaultPadding,\n    bottom: padding.bottom || defaultPadding,\n    left: padding.left || defaultPadding\n  };\n  var elementBounds = getBoundingBox(element),\n    elementTrbl = asTRBL(elementBounds),\n    viewboxBounds = this.viewbox(),\n    zoom = this.zoom(),\n    dx,\n    dy;\n\n  // shrink viewboxBounds with padding\n  viewboxBounds.y += padding.top / zoom;\n  viewboxBounds.x += padding.left / zoom;\n  viewboxBounds.width -= (padding.right + padding.left) / zoom;\n  viewboxBounds.height -= (padding.bottom + padding.top) / zoom;\n  var viewboxTrbl = asTRBL(viewboxBounds);\n  var canFit = elementBounds.width < viewboxBounds.width && elementBounds.height < viewboxBounds.height;\n  if (!canFit) {\n    // top-left when element can't fit\n    dx = elementBounds.x - viewboxBounds.x;\n    dy = elementBounds.y - viewboxBounds.y;\n  } else {\n    var dRight = Math.max(0, elementTrbl.right - viewboxTrbl.right),\n      dLeft = Math.min(0, elementTrbl.left - viewboxTrbl.left),\n      dBottom = Math.max(0, elementTrbl.bottom - viewboxTrbl.bottom),\n      dTop = Math.min(0, elementTrbl.top - viewboxTrbl.top);\n    dx = dRight || dLeft;\n    dy = dBottom || dTop;\n  }\n  this.scroll({\n    dx: -dx * zoom,\n    dy: -dy * zoom\n  });\n};\n\n/**\n * Gets or sets the current zoom of the canvas, optionally zooming\n * to the specified position.\n *\n * The getter may return a cached zoom level. Call it with `false` as\n * the first argument to force recomputation of the current level.\n *\n * @param {string|number} [newScale] the new zoom level, either a number, i.e. 0.9,\n *                                   or `fit-viewport` to adjust the size to fit the current viewport\n * @param {string|Point} [center] the reference point { x: .., y: ..} to zoom to, 'auto' to zoom into mid or null\n *\n * @return {number} the current scale\n */\nCanvas.prototype.zoom = function (newScale, center) {\n  if (!newScale) {\n    return this.viewbox(newScale).scale;\n  }\n  if (newScale === 'fit-viewport') {\n    return this._fitViewport(center);\n  }\n  var outer, matrix;\n  this._changeViewbox(function () {\n    if (typeof center !== 'object') {\n      outer = this.viewbox().outer;\n      center = {\n        x: outer.width / 2,\n        y: outer.height / 2\n      };\n    }\n    matrix = this._setZoom(newScale, center);\n  });\n  return round(matrix.a, 1000);\n};\nfunction setCTM(node, m) {\n  var mstr = 'matrix(' + m.a + ',' + m.b + ',' + m.c + ',' + m.d + ',' + m.e + ',' + m.f + ')';\n  node.setAttribute('transform', mstr);\n}\nCanvas.prototype._fitViewport = function (center) {\n  var vbox = this.viewbox(),\n    outer = vbox.outer,\n    inner = vbox.inner,\n    newScale,\n    newViewbox;\n\n  // display the complete diagram without zooming in.\n  // instead of relying on internal zoom, we perform a\n  // hard reset on the canvas viewbox to realize this\n  //\n  // if diagram does not need to be zoomed in, we focus it around\n  // the diagram origin instead\n\n  if (inner.x >= 0 && inner.y >= 0 && inner.x + inner.width <= outer.width && inner.y + inner.height <= outer.height && !center) {\n    newViewbox = {\n      x: 0,\n      y: 0,\n      width: Math.max(inner.width + inner.x, outer.width),\n      height: Math.max(inner.height + inner.y, outer.height)\n    };\n  } else {\n    newScale = Math.min(1, outer.width / inner.width, outer.height / inner.height);\n    newViewbox = {\n      x: inner.x + (center ? inner.width / 2 - outer.width / newScale / 2 : 0),\n      y: inner.y + (center ? inner.height / 2 - outer.height / newScale / 2 : 0),\n      width: outer.width / newScale,\n      height: outer.height / newScale\n    };\n  }\n  this.viewbox(newViewbox);\n  return this.viewbox(false).scale;\n};\nCanvas.prototype._setZoom = function (scale, center) {\n  var svg = this._svg,\n    viewport = this._viewport;\n  var matrix = svg.createSVGMatrix();\n  var point = svg.createSVGPoint();\n  var centerPoint, originalPoint, currentMatrix, scaleMatrix, newMatrix;\n  currentMatrix = viewport.getCTM();\n  var currentScale = currentMatrix.a;\n  if (center) {\n    centerPoint = assign(point, center);\n\n    // revert applied viewport transformations\n    originalPoint = centerPoint.matrixTransform(currentMatrix.inverse());\n\n    // create scale matrix\n    scaleMatrix = matrix.translate(originalPoint.x, originalPoint.y).scale(1 / currentScale * scale).translate(-originalPoint.x, -originalPoint.y);\n    newMatrix = currentMatrix.multiply(scaleMatrix);\n  } else {\n    newMatrix = matrix.scale(scale);\n  }\n  setCTM(this._viewport, newMatrix);\n  return newMatrix;\n};\n\n/**\n * Returns the size of the canvas\n *\n * @return {Dimensions}\n */\nCanvas.prototype.getSize = function () {\n  return {\n    width: this._container.clientWidth,\n    height: this._container.clientHeight\n  };\n};\n\n/**\n * Return the absolute bounding box for the given element\n *\n * The absolute bounding box may be used to display overlays in the\n * callers (browser) coordinate system rather than the zoomed in/out\n * canvas coordinates.\n *\n * @param  {ElementDescriptor} element\n * @return {Bounds} the absolute bounding box\n */\nCanvas.prototype.getAbsoluteBBox = function (element) {\n  var vbox = this.viewbox();\n  var bbox;\n\n  // connection\n  // use svg bbox\n  if (element.waypoints) {\n    var gfx = this.getGraphics(element);\n    bbox = gfx.getBBox();\n  }\n\n  // shapes\n  // use data\n  else {\n    bbox = element;\n  }\n  var x = bbox.x * vbox.scale - vbox.x * vbox.scale;\n  var y = bbox.y * vbox.scale - vbox.y * vbox.scale;\n  var width = bbox.width * vbox.scale;\n  var height = bbox.height * vbox.scale;\n  return {\n    x: x,\n    y: y,\n    width: width,\n    height: height\n  };\n};\n\n/**\n * Fires an event in order other modules can react to the\n * canvas resizing\n */\nCanvas.prototype.resized = function () {\n  // force recomputation of view box\n  delete this._cachedViewbox;\n  this._eventBus.fire('canvas.resized');\n};","map":{"version":3,"names":["isNumber","assign","forEach","every","debounce","bind","reduce","find","add","collectionAdd","remove","collectionRemove","getType","getBBox","getBoundingBox","asTRBL","append","svgAppend","attr","svgAttr","classes","svgClasses","create","svgCreate","transform","svgTransform","createMatrix","round","number","resolution","Math","ensurePx","findRoot","element","parent","createContainer","options","width","height","container","document","body","createElement","setAttribute","style","position","overflow","appendChild","createGroup","cls","childIndex","group","index","undefined","childNodes","length","insertBefore","BASE_LAYER","HIDDEN_MARKER","PLANE_LAYER_INDEX","UTILITY_LAYER_INDEX","REQUIRED_MODEL_ATTRS","shape","connection","Canvas","config","eventBus","graphicsFactory","elementRegistry","_eventBus","_elementRegistry","_graphicsFactory","_init","$inject","prototype","_container","svg","_svg","viewport","_viewport","_layers","_planes","deferUpdate","_viewboxChanged","on","fire","_cachedViewbox","_destroy","_clear","emit","parentNode","removeChild","_activePlane","self","allElements","getAll","type","setRootElementForPlane","findPlane","_removeElement","getDefaultLayer","getLayer","name","Error","layer","_createLayer","getPlane","createPlane","rootElement","id","children","isImplicit","svgLayer","plane","setActivePlane","updateGraphics","getActiveLayer","getActivePlane","get","root","getContainer","_updateMarker","marker","_elements","gfx","secondaryGfx","addMarker","removeMarker","hasMarker","getGraphics","has","toggleMarker","getRootElement","setRootElement","override","activePlane","basePlane","_ensureValid","currentRoot","requiredAttrs","valid","join","_setParent","parentIndex","_addElement","update","addShape","addConnection","removeShape","removeConnection","secondary","_changeViewbox","changeFn","apply","viewbox","box","innerBox","outerBox","getSize","matrix","scale","x","y","a","e","f","inner","outer","min","createSVGMatrix","translate","scroll","delta","node","getCTM","dx","dy","multiply","setCTM","scrollToElement","padding","defaultPadding","targetPlane","top","right","bottom","left","elementBounds","elementTrbl","viewboxBounds","zoom","viewboxTrbl","canFit","dRight","max","dLeft","dBottom","dTop","newScale","center","_fitViewport","_setZoom","m","mstr","b","c","d","vbox","newViewbox","point","createSVGPoint","centerPoint","originalPoint","currentMatrix","scaleMatrix","newMatrix","currentScale","matrixTransform","inverse","clientWidth","clientHeight","getAbsoluteBBox","bbox","waypoints","resized"],"sources":["C:/Users/KondalaRaoThota/Truviq_Camunda/camunda-react/node_modules/diagram-js/lib/core/Canvas.js"],"sourcesContent":["import {\n  isNumber,\n  assign,\n  forEach,\n  every,\n  debounce,\n  bind,\n  reduce,\n  find\n} from 'min-dash';\n\nimport {\n  add as collectionAdd,\n  remove as collectionRemove\n} from '../util/Collections';\n\nimport {\n  getType,\n  getBBox as getBoundingBox\n} from '../util/Elements';\n\nimport { asTRBL } from '../layout/LayoutUtil';\n\nimport {\n  append as svgAppend,\n  attr as svgAttr,\n  classes as svgClasses,\n  create as svgCreate,\n  transform as svgTransform\n} from 'tiny-svg';\n\nimport { createMatrix as createMatrix } from 'tiny-svg';\n\n\nfunction round(number, resolution) {\n  return Math.round(number * resolution) / resolution;\n}\n\nfunction ensurePx(number) {\n  return isNumber(number) ? number + 'px' : number;\n}\n\nfunction findRoot(element) {\n  while (element.parent) {\n    element = element.parent;\n  }\n\n  return element;\n}\n\n/**\n * Creates a HTML container element for a SVG element with\n * the given configuration\n *\n * @param  {Object} options\n * @return {HTMLElement} the container element\n */\nfunction createContainer(options) {\n\n  options = assign({}, { width: '100%', height: '100%' }, options);\n\n  var container = options.container || document.body;\n\n  // create a <div> around the svg element with the respective size\n  // this way we can always get the correct container size\n  // (this is impossible for <svg> elements at the moment)\n  var parent = document.createElement('div');\n  parent.setAttribute('class', 'djs-container');\n\n  assign(parent.style, {\n    position: 'relative',\n    overflow: 'hidden',\n    width: ensurePx(options.width),\n    height: ensurePx(options.height)\n  });\n\n  container.appendChild(parent);\n\n  return parent;\n}\n\nfunction createGroup(parent, cls, childIndex) {\n  var group = svgCreate('g');\n  svgClasses(group).add(cls);\n\n  var index = childIndex !== undefined ? childIndex : parent.childNodes.length - 1;\n\n  // must ensure second argument is node or _null_\n  // cf. https://developer.mozilla.org/en-US/docs/Web/API/Node/insertBefore\n  parent.insertBefore(group, parent.childNodes[index] || null);\n\n  return group;\n}\n\nvar BASE_LAYER = 'base';\nvar HIDDEN_MARKER = 'djs-element-hidden';\n\n// render plane contents behind utility layers\nvar PLANE_LAYER_INDEX = 0;\nvar UTILITY_LAYER_INDEX = 1;\n\n\nvar REQUIRED_MODEL_ATTRS = {\n  shape: [ 'x', 'y', 'width', 'height' ],\n  connection: [ 'waypoints' ]\n};\n\n/**\n * The main drawing canvas.\n *\n * @class\n * @constructor\n *\n * @emits Canvas#canvas.init\n *\n * @param {Object} config\n * @param {EventBus} eventBus\n * @param {GraphicsFactory} graphicsFactory\n * @param {ElementRegistry} elementRegistry\n */\nexport default function Canvas(config, eventBus, graphicsFactory, elementRegistry) {\n\n  this._eventBus = eventBus;\n  this._elementRegistry = elementRegistry;\n  this._graphicsFactory = graphicsFactory;\n\n  this._init(config || {});\n}\n\nCanvas.$inject = [\n  'config.canvas',\n  'eventBus',\n  'graphicsFactory',\n  'elementRegistry'\n];\n\n/**\n * Creates a <svg> element that is wrapped into a <div>.\n * This way we are always able to correctly figure out the size of the svg element\n * by querying the parent node.\n\n * (It is not possible to get the size of a svg element cross browser @ 2014-04-01)\n\n * <div class=\"djs-container\" style=\"width: {desired-width}, height: {desired-height}\">\n *   <svg width=\"100%\" height=\"100%\">\n *    ...\n *   </svg>\n * </div>\n */\nCanvas.prototype._init = function(config) {\n\n  var eventBus = this._eventBus;\n\n  // html container\n  var container = this._container = createContainer(config);\n\n  var svg = this._svg = svgCreate('svg');\n  svgAttr(svg, { width: '100%', height: '100%' });\n\n  svgAppend(container, svg);\n\n  var viewport = this._viewport = createGroup(svg, 'viewport');\n\n  this._layers = {};\n  this._planes = {};\n\n  // debounce canvas.viewbox.changed events\n  // for smoother diagram interaction\n  if (config.deferUpdate !== false) {\n    this._viewboxChanged = debounce(bind(this._viewboxChanged, this), 300);\n  }\n\n  eventBus.on('diagram.init', function() {\n\n    /**\n     * An event indicating that the canvas is ready to be drawn on.\n     *\n     * @memberOf Canvas\n     *\n     * @event canvas.init\n     *\n     * @type {Object}\n     * @property {SVGElement} svg the created svg element\n     * @property {SVGElement} viewport the direct parent of diagram elements and shapes\n     */\n    eventBus.fire('canvas.init', {\n      svg: svg,\n      viewport: viewport\n    });\n\n  }, this);\n\n  // reset viewbox on shape changes to\n  // recompute the viewbox\n  eventBus.on([\n    'shape.added',\n    'connection.added',\n    'shape.removed',\n    'connection.removed',\n    'elements.changed',\n    'plane.set'\n  ], function() {\n    delete this._cachedViewbox;\n  }, this);\n\n  eventBus.on('diagram.destroy', 500, this._destroy, this);\n  eventBus.on('diagram.clear', 500, this._clear, this);\n};\n\nCanvas.prototype._destroy = function(emit) {\n  this._eventBus.fire('canvas.destroy', {\n    svg: this._svg,\n    viewport: this._viewport\n  });\n\n  var parent = this._container.parentNode;\n\n  if (parent) {\n    parent.removeChild(this._container);\n  }\n\n  delete this._svg;\n  delete this._container;\n  delete this._layers;\n  delete this._planes;\n  delete this._activePlane;\n  delete this._viewport;\n};\n\nCanvas.prototype._clear = function() {\n\n  var self = this;\n\n  var allElements = this._elementRegistry.getAll();\n\n  // remove all elements\n  allElements.forEach(function(element) {\n    var type = getType(element);\n\n    if (type === 'root') {\n      self.setRootElementForPlane(null, self.findPlane(element), true);\n    } else {\n      self._removeElement(element, type);\n    }\n  });\n\n  // remove all planes\n  this._activePlane = null;\n  this._planes = {};\n\n  // force recomputation of view box\n  delete this._cachedViewbox;\n};\n\n/**\n * Returns the default layer on which\n * all elements are drawn.\n *\n * @returns {SVGElement}\n */\nCanvas.prototype.getDefaultLayer = function() {\n  return this.getLayer(BASE_LAYER, PLANE_LAYER_INDEX);\n};\n\n/**\n * Returns a layer that is used to draw elements\n * or annotations on it.\n *\n * Non-existing layers retrieved through this method\n * will be created. During creation, the optional index\n * may be used to create layers below or above existing layers.\n * A layer with a certain index is always created above all\n * existing layers with the same index.\n *\n * @param {string} name\n * @param {number} index\n *\n * @returns {SVGElement}\n */\nCanvas.prototype.getLayer = function(name, index) {\n\n  if (!name) {\n    throw new Error('must specify a name');\n  }\n\n  var layer = this._layers[name];\n\n  if (!layer) {\n    layer = this._layers[name] = this._createLayer(name, index);\n  }\n\n  // throw an error if layer creation / retrival is\n  // requested on different index\n  if (typeof index !== 'undefined' && layer.index !== index) {\n    throw new Error('layer <' + name + '> already created at index <' + index + '>');\n  }\n\n  return layer.group;\n};\n\n/**\n * Creates a given layer and returns it.\n *\n * @param {string} name\n * @param {number} [index=0]\n *\n * @return {Object} layer descriptor with { index, group: SVGGroup }\n */\nCanvas.prototype._createLayer = function(name, index) {\n\n  if (typeof index === 'undefined') {\n    index = UTILITY_LAYER_INDEX;\n  }\n\n  var childIndex = reduce(this._layers, function(childIndex, layer) {\n    if (index >= layer.index) {\n      childIndex++;\n    }\n\n    return childIndex;\n  }, 0);\n\n  return {\n    group: createGroup(this._viewport, 'layer-' + name, childIndex),\n    index: index\n  };\n\n};\n\n/**\n * Returns a plane that is used to draw elements on it.\n *\n * @param {string} name\n *\n * @return {Object} plane descriptor with { layer, rootElement, name }\n */\nCanvas.prototype.getPlane = function(name) {\n  if (!name) {\n    throw new Error('must specify a name');\n  }\n\n  return this._planes[name];\n};\n\n/**\n * Creates a plane that is used to draw elements on it. If no\n * root element is provided, an implicit root will be used.\n *\n * @param {string} name\n * @param {Object|djs.model.Root} [rootElement] optional root element\n *\n * @return {Object} plane descriptor with { layer, rootElement, name }\n */\nCanvas.prototype.createPlane = function(name, rootElement) {\n  if (!name) {\n    throw new Error('must specify a name');\n  }\n\n  if (this._planes[name]) {\n    throw new Error('plane ' + name + ' already exists');\n  }\n\n  if (!rootElement) {\n    rootElement = {\n      id: '__implicitroot' + name,\n      children: [],\n      isImplicit: true\n    };\n  }\n\n  var svgLayer = this.getLayer(name, PLANE_LAYER_INDEX);\n  svgClasses(svgLayer).add(HIDDEN_MARKER);\n\n  var plane = this._planes[name] = {\n    layer: svgLayer,\n    name: name,\n    rootElement: null\n  };\n\n  this.setRootElementForPlane(rootElement, plane);\n\n  return plane;\n};\n\n/**\n * Sets the active plane and hides the previously active plane.\n *\n * @param {string|Object} plane\n *\n * @return {Object} plane descriptor with { layer, rootElement, name }\n */\nCanvas.prototype.setActivePlane = function(plane) {\n  if (!plane) {\n    throw new Error('must specify a plane');\n  }\n\n  if (typeof plane === 'string') {\n    plane = this.getPlane(plane);\n  }\n\n  // hide previous Plane\n  if (this._activePlane) {\n    svgClasses(this._activePlane.layer).add(HIDDEN_MARKER);\n  }\n\n  this._activePlane = plane;\n\n  // show current Plane\n  svgClasses(plane.layer).remove(HIDDEN_MARKER);\n\n  if (plane.rootElement) {\n    this._elementRegistry.updateGraphics(plane.rootElement, this._svg, true);\n  }\n\n  this._eventBus.fire('plane.set', { plane: plane });\n\n  return plane;\n};\n\n/**\n * Returns the currently active layer\n *\n * @returns {SVGElement}\n */\n\nCanvas.prototype.getActiveLayer = function() {\n  return this.getActivePlane().layer;\n};\n\n/**\n * Returns the currently active plane.\n *\n * @return {Object} plane descriptor with { layer, rootElement, name }\n */\nCanvas.prototype.getActivePlane = function() {\n  var plane = this._activePlane;\n  if (!plane) {\n    plane = this.createPlane(BASE_LAYER);\n    this.setActivePlane(BASE_LAYER);\n  }\n\n  return plane;\n};\n\n/**\n * Returns the plane which contains the given element.\n *\n * @param {string|djs.model.Base} element\n *\n * @return {Object} plane descriptor with { layer, rootElement, name }\n */\nCanvas.prototype.findPlane = function(element) {\n  if (typeof element === 'string') {\n    element = this._elementRegistry.get(element);\n  }\n\n  var root = findRoot(element);\n\n  return find(this._planes, function(plane) {\n    return plane.rootElement === root;\n  });\n};\n\n/**\n * Returns the html element that encloses the\n * drawing canvas.\n *\n * @return {DOMNode}\n */\nCanvas.prototype.getContainer = function() {\n  return this._container;\n};\n\n\n// markers //////////////////////\n\nCanvas.prototype._updateMarker = function(element, marker, add) {\n  var container;\n\n  if (!element.id) {\n    element = this._elementRegistry.get(element);\n  }\n\n  // we need to access all\n  container = this._elementRegistry._elements[element.id];\n\n  if (!container) {\n    return;\n  }\n\n  forEach([ container.gfx, container.secondaryGfx ], function(gfx) {\n    if (gfx) {\n\n      // invoke either addClass or removeClass based on mode\n      if (add) {\n        svgClasses(gfx).add(marker);\n      } else {\n        svgClasses(gfx).remove(marker);\n      }\n    }\n  });\n\n  /**\n   * An event indicating that a marker has been updated for an element\n   *\n   * @event element.marker.update\n   * @type {Object}\n   * @property {djs.model.Element} element the shape\n   * @property {Object} gfx the graphical representation of the shape\n   * @property {string} marker\n   * @property {boolean} add true if the marker was added, false if it got removed\n   */\n  this._eventBus.fire('element.marker.update', { element: element, gfx: container.gfx, marker: marker, add: !!add });\n};\n\n\n/**\n * Adds a marker to an element (basically a css class).\n *\n * Fires the element.marker.update event, making it possible to\n * integrate extension into the marker life-cycle, too.\n *\n * @example\n * canvas.addMarker('foo', 'some-marker');\n *\n * var fooGfx = canvas.getGraphics('foo');\n *\n * fooGfx; // <g class=\"... some-marker\"> ... </g>\n *\n * @param {string|djs.model.Base} element\n * @param {string} marker\n */\nCanvas.prototype.addMarker = function(element, marker) {\n  this._updateMarker(element, marker, true);\n};\n\n\n/**\n * Remove a marker from an element.\n *\n * Fires the element.marker.update event, making it possible to\n * integrate extension into the marker life-cycle, too.\n *\n * @param  {string|djs.model.Base} element\n * @param  {string} marker\n */\nCanvas.prototype.removeMarker = function(element, marker) {\n  this._updateMarker(element, marker, false);\n};\n\n/**\n * Check the existence of a marker on element.\n *\n * @param  {string|djs.model.Base} element\n * @param  {string} marker\n */\nCanvas.prototype.hasMarker = function(element, marker) {\n  if (!element.id) {\n    element = this._elementRegistry.get(element);\n  }\n\n  var gfx = this.getGraphics(element);\n\n  return svgClasses(gfx).has(marker);\n};\n\n/**\n * Toggles a marker on an element.\n *\n * Fires the element.marker.update event, making it possible to\n * integrate extension into the marker life-cycle, too.\n *\n * @param  {string|djs.model.Base} element\n * @param  {string} marker\n */\nCanvas.prototype.toggleMarker = function(element, marker) {\n  if (this.hasMarker(element, marker)) {\n    this.removeMarker(element, marker);\n  } else {\n    this.addMarker(element, marker);\n  }\n};\n\nCanvas.prototype.getRootElement = function() {\n  var plane = this.getActivePlane();\n\n  return plane.rootElement;\n};\n\n\n\n// root element handling //////////////////////\n\n/**\n * Sets a given element as the new root element for the canvas\n * and returns the new root element.\n *\n * @param {Object|djs.model.Root} element\n * @param {boolean} [override] whether to override the current root element, if any\n *\n * @return {Object|djs.model.Root} new root element\n */\nCanvas.prototype.setRootElement = function(element, override) {\n  var activePlane = this._activePlane;\n\n  if (activePlane) {\n    return this.setRootElementForPlane(element, activePlane, override);\n  } else {\n    var basePlane = this.createPlane(BASE_LAYER, element);\n\n    this.setActivePlane(basePlane);\n\n    return basePlane.rootElement;\n  }\n};\n\n\n/**\n * Sets a given element as the new root element for the canvas\n * and returns the new root element.\n *\n * @param {Object|djs.model.Root} element\n * @param {Object|djs.model.Root} plane\n * @param {boolean} [override] whether to override the current root element, if any\n *\n * @return {Object|djs.model.Root} new root element\n */\nCanvas.prototype.setRootElementForPlane = function(element, plane, override) {\n\n  if (typeof plane === 'string') {\n    plane = this.getPlane(plane);\n  }\n\n  if (element) {\n    this._ensureValid('root', element);\n  }\n\n  var currentRoot = plane.rootElement,\n      elementRegistry = this._elementRegistry,\n      eventBus = this._eventBus;\n\n  if (currentRoot) {\n    if (!override) {\n      throw new Error('rootElement already set, need to specify override');\n    }\n\n    // simulate element remove event sequence\n    eventBus.fire('root.remove', { element: currentRoot });\n    eventBus.fire('root.removed', { element: currentRoot });\n\n    elementRegistry.remove(currentRoot);\n  }\n\n  if (element) {\n    var gfx = plane.layer;\n\n    // resemble element add event sequence\n    eventBus.fire('root.add', { element: element });\n\n    elementRegistry.add(element, gfx);\n\n    eventBus.fire('root.added', { element: element, gfx: gfx });\n\n    // associate SVG with root element when active\n    if (plane === this._activePlane) {\n      this._elementRegistry.updateGraphics(element, this._svg, true);\n    }\n  }\n\n  plane.rootElement = element;\n\n  return element;\n};\n\n// add functionality //////////////////////\n\nCanvas.prototype._ensureValid = function(type, element) {\n  if (!element.id) {\n    throw new Error('element must have an id');\n  }\n\n  if (this._elementRegistry.get(element.id)) {\n    throw new Error('element with id ' + element.id + ' already exists');\n  }\n\n  var requiredAttrs = REQUIRED_MODEL_ATTRS[type];\n\n  var valid = every(requiredAttrs, function(attr) {\n    return typeof element[attr] !== 'undefined';\n  });\n\n  if (!valid) {\n    throw new Error(\n      'must supply { ' + requiredAttrs.join(', ') + ' } with ' + type);\n  }\n};\n\nCanvas.prototype._setParent = function(element, parent, parentIndex) {\n  collectionAdd(parent.children, element, parentIndex);\n  element.parent = parent;\n};\n\n/**\n * Adds an element to the canvas.\n *\n * This wires the parent <-> child relationship between the element and\n * a explicitly specified parent or an implicit root element.\n *\n * During add it emits the events\n *\n *  * <{type}.add> (element, parent)\n *  * <{type}.added> (element, gfx)\n *\n * Extensions may hook into these events to perform their magic.\n *\n * @param {string} type\n * @param {Object|djs.model.Base} element\n * @param {Object|djs.model.Base} [parent]\n * @param {number} [parentIndex]\n *\n * @return {Object|djs.model.Base} the added element\n */\nCanvas.prototype._addElement = function(type, element, parent, parentIndex) {\n\n  parent = parent || this.getRootElement();\n\n  var eventBus = this._eventBus,\n      graphicsFactory = this._graphicsFactory;\n\n  this._ensureValid(type, element);\n\n  eventBus.fire(type + '.add', { element: element, parent: parent });\n\n  this._setParent(element, parent, parentIndex);\n\n  // create graphics\n  var gfx = graphicsFactory.create(type, element, parentIndex);\n\n  this._elementRegistry.add(element, gfx);\n\n  // update its visual\n  graphicsFactory.update(type, element, gfx);\n\n  eventBus.fire(type + '.added', { element: element, gfx: gfx });\n\n  return element;\n};\n\n/**\n * Adds a shape to the canvas\n *\n * @param {Object|djs.model.Shape} shape to add to the diagram\n * @param {djs.model.Base} [parent]\n * @param {number} [parentIndex]\n *\n * @return {djs.model.Shape} the added shape\n */\nCanvas.prototype.addShape = function(shape, parent, parentIndex) {\n  return this._addElement('shape', shape, parent, parentIndex);\n};\n\n/**\n * Adds a connection to the canvas\n *\n * @param {Object|djs.model.Connection} connection to add to the diagram\n * @param {djs.model.Base} [parent]\n * @param {number} [parentIndex]\n *\n * @return {djs.model.Connection} the added connection\n */\nCanvas.prototype.addConnection = function(connection, parent, parentIndex) {\n  return this._addElement('connection', connection, parent, parentIndex);\n};\n\n\n/**\n * Internal remove element\n */\nCanvas.prototype._removeElement = function(element, type) {\n\n  var elementRegistry = this._elementRegistry,\n      graphicsFactory = this._graphicsFactory,\n      eventBus = this._eventBus;\n\n  element = elementRegistry.get(element.id || element);\n\n  if (!element) {\n\n    // element was removed already\n    return;\n  }\n\n  eventBus.fire(type + '.remove', { element: element });\n\n  graphicsFactory.remove(element);\n\n  // unset parent <-> child relationship\n  collectionRemove(element.parent && element.parent.children, element);\n  element.parent = null;\n\n  eventBus.fire(type + '.removed', { element: element });\n\n  elementRegistry.remove(element);\n\n  return element;\n};\n\n\n/**\n * Removes a shape from the canvas\n *\n * @param {string|djs.model.Shape} shape or shape id to be removed\n *\n * @return {djs.model.Shape} the removed shape\n */\nCanvas.prototype.removeShape = function(shape) {\n\n  /**\n   * An event indicating that a shape is about to be removed from the canvas.\n   *\n   * @memberOf Canvas\n   *\n   * @event shape.remove\n   * @type {Object}\n   * @property {djs.model.Shape} element the shape descriptor\n   * @property {Object} gfx the graphical representation of the shape\n   */\n\n  /**\n   * An event indicating that a shape has been removed from the canvas.\n   *\n   * @memberOf Canvas\n   *\n   * @event shape.removed\n   * @type {Object}\n   * @property {djs.model.Shape} element the shape descriptor\n   * @property {Object} gfx the graphical representation of the shape\n   */\n  return this._removeElement(shape, 'shape');\n};\n\n\n/**\n * Removes a connection from the canvas\n *\n * @param {string|djs.model.Connection} connection or connection id to be removed\n *\n * @return {djs.model.Connection} the removed connection\n */\nCanvas.prototype.removeConnection = function(connection) {\n\n  /**\n   * An event indicating that a connection is about to be removed from the canvas.\n   *\n   * @memberOf Canvas\n   *\n   * @event connection.remove\n   * @type {Object}\n   * @property {djs.model.Connection} element the connection descriptor\n   * @property {Object} gfx the graphical representation of the connection\n   */\n\n  /**\n   * An event indicating that a connection has been removed from the canvas.\n   *\n   * @memberOf Canvas\n   *\n   * @event connection.removed\n   * @type {Object}\n   * @property {djs.model.Connection} element the connection descriptor\n   * @property {Object} gfx the graphical representation of the connection\n   */\n  return this._removeElement(connection, 'connection');\n};\n\n\n/**\n * Return the graphical object underlaying a certain diagram element\n *\n * @param {string|djs.model.Base} element descriptor of the element\n * @param {boolean} [secondary=false] whether to return the secondary connected element\n *\n * @return {SVGElement}\n */\nCanvas.prototype.getGraphics = function(element, secondary) {\n  return this._elementRegistry.getGraphics(element, secondary);\n};\n\n\n/**\n * Perform a viewbox update via a given change function.\n *\n * @param {Function} changeFn\n */\nCanvas.prototype._changeViewbox = function(changeFn) {\n\n  // notify others of the upcoming viewbox change\n  this._eventBus.fire('canvas.viewbox.changing');\n\n  // perform actual change\n  changeFn.apply(this);\n\n  // reset the cached viewbox so that\n  // a new get operation on viewbox or zoom\n  // triggers a viewbox re-computation\n  this._cachedViewbox = null;\n\n  // notify others of the change; this step\n  // may or may not be debounced\n  this._viewboxChanged();\n};\n\nCanvas.prototype._viewboxChanged = function() {\n  this._eventBus.fire('canvas.viewbox.changed', { viewbox: this.viewbox() });\n};\n\n\n/**\n * Gets or sets the view box of the canvas, i.e. the\n * area that is currently displayed.\n *\n * The getter may return a cached viewbox (if it is currently\n * changing). To force a recomputation, pass `false` as the first argument.\n *\n * @example\n *\n * canvas.viewbox({ x: 100, y: 100, width: 500, height: 500 })\n *\n * // sets the visible area of the diagram to (100|100) -> (600|100)\n * // and and scales it according to the diagram width\n *\n * var viewbox = canvas.viewbox(); // pass `false` to force recomputing the box.\n *\n * console.log(viewbox);\n * // {\n * //   inner: Dimensions,\n * //   outer: Dimensions,\n * //   scale,\n * //   x, y,\n * //   width, height\n * // }\n *\n * // if the current diagram is zoomed and scrolled, you may reset it to the\n * // default zoom via this method, too:\n *\n * var zoomedAndScrolledViewbox = canvas.viewbox();\n *\n * canvas.viewbox({\n *   x: 0,\n *   y: 0,\n *   width: zoomedAndScrolledViewbox.outer.width,\n *   height: zoomedAndScrolledViewbox.outer.height\n * });\n *\n * @param  {Object} [box] the new view box to set\n * @param  {number} box.x the top left X coordinate of the canvas visible in view box\n * @param  {number} box.y the top left Y coordinate of the canvas visible in view box\n * @param  {number} box.width the visible width\n * @param  {number} box.height\n *\n * @return {Object} the current view box\n */\nCanvas.prototype.viewbox = function(box) {\n\n  if (box === undefined && this._cachedViewbox) {\n    return this._cachedViewbox;\n  }\n\n  var viewport = this._viewport,\n      innerBox,\n      outerBox = this.getSize(),\n      matrix,\n      transform,\n      scale,\n      x, y;\n\n  if (!box) {\n\n    // compute the inner box based on the\n    // diagrams active plane. This allows us to exclude\n    // external components, such as overlays\n\n    innerBox = (this._activePlane && this._activePlane.layer.getBBox()) || {};\n\n    transform = svgTransform(viewport);\n    matrix = transform ? transform.matrix : createMatrix();\n    scale = round(matrix.a, 1000);\n\n    x = round(-matrix.e || 0, 1000);\n    y = round(-matrix.f || 0, 1000);\n\n    box = this._cachedViewbox = {\n      x: x ? x / scale : 0,\n      y: y ? y / scale : 0,\n      width: outerBox.width / scale,\n      height: outerBox.height / scale,\n      scale: scale,\n      inner: {\n        width: innerBox.width || 0,\n        height: innerBox.height || 0,\n        x: innerBox.x || 0,\n        y: innerBox.y || 0\n      },\n      outer: outerBox\n    };\n\n    return box;\n  } else {\n\n    this._changeViewbox(function() {\n      scale = Math.min(outerBox.width / box.width, outerBox.height / box.height);\n\n      var matrix = this._svg.createSVGMatrix()\n        .scale(scale)\n        .translate(-box.x, -box.y);\n\n      svgTransform(viewport, matrix);\n    });\n  }\n\n  return box;\n};\n\n\n/**\n * Gets or sets the scroll of the canvas.\n *\n * @param {Object} [delta] the new scroll to apply.\n *\n * @param {number} [delta.dx]\n * @param {number} [delta.dy]\n */\nCanvas.prototype.scroll = function(delta) {\n\n  var node = this._viewport;\n  var matrix = node.getCTM();\n\n  if (delta) {\n    this._changeViewbox(function() {\n      delta = assign({ dx: 0, dy: 0 }, delta || {});\n\n      matrix = this._svg.createSVGMatrix().translate(delta.dx, delta.dy).multiply(matrix);\n\n      setCTM(node, matrix);\n    });\n  }\n\n  return { x: matrix.e, y: matrix.f };\n};\n\n/**\n * Scrolls the viewbox to contain the given element.\n * Optionally specify a padding to be applied to the edges.\n *\n * @param {Object|String} [element] the element to scroll to.\n * @param {Object|Number} [padding=100] the padding to be applied. Can also specify top, bottom, left and right.\n *\n */\nCanvas.prototype.scrollToElement = function(element, padding) {\n  var defaultPadding = 100;\n\n  if (typeof element === 'string') {\n    element = this._elementRegistry.get(element);\n  }\n\n  // switch to correct Plane\n  var targetPlane = this.findPlane(element);\n  if (targetPlane !== this._activePlane) {\n    this.setActivePlane(targetPlane);\n  }\n\n  if (!padding) {\n    padding = {};\n  }\n  if (typeof padding === 'number') {\n    defaultPadding = padding;\n  }\n\n  padding = {\n    top: padding.top || defaultPadding,\n    right: padding.right || defaultPadding,\n    bottom: padding.bottom || defaultPadding,\n    left: padding.left || defaultPadding\n  };\n\n  var elementBounds = getBoundingBox(element),\n      elementTrbl = asTRBL(elementBounds),\n      viewboxBounds = this.viewbox(),\n      zoom = this.zoom(),\n      dx, dy;\n\n  // shrink viewboxBounds with padding\n  viewboxBounds.y += padding.top / zoom;\n  viewboxBounds.x += padding.left / zoom;\n  viewboxBounds.width -= (padding.right + padding.left) / zoom;\n  viewboxBounds.height -= (padding.bottom + padding.top) / zoom;\n\n  var viewboxTrbl = asTRBL(viewboxBounds);\n\n  var canFit = elementBounds.width < viewboxBounds.width && elementBounds.height < viewboxBounds.height;\n\n  if (!canFit) {\n\n    // top-left when element can't fit\n    dx = elementBounds.x - viewboxBounds.x;\n    dy = elementBounds.y - viewboxBounds.y;\n\n  } else {\n\n    var dRight = Math.max(0, elementTrbl.right - viewboxTrbl.right),\n        dLeft = Math.min(0, elementTrbl.left - viewboxTrbl.left),\n        dBottom = Math.max(0, elementTrbl.bottom - viewboxTrbl.bottom),\n        dTop = Math.min(0, elementTrbl.top - viewboxTrbl.top);\n\n    dx = dRight || dLeft;\n    dy = dBottom || dTop;\n\n  }\n\n  this.scroll({ dx: -dx * zoom, dy: -dy * zoom });\n};\n\n/**\n * Gets or sets the current zoom of the canvas, optionally zooming\n * to the specified position.\n *\n * The getter may return a cached zoom level. Call it with `false` as\n * the first argument to force recomputation of the current level.\n *\n * @param {string|number} [newScale] the new zoom level, either a number, i.e. 0.9,\n *                                   or `fit-viewport` to adjust the size to fit the current viewport\n * @param {string|Point} [center] the reference point { x: .., y: ..} to zoom to, 'auto' to zoom into mid or null\n *\n * @return {number} the current scale\n */\nCanvas.prototype.zoom = function(newScale, center) {\n\n  if (!newScale) {\n    return this.viewbox(newScale).scale;\n  }\n\n  if (newScale === 'fit-viewport') {\n    return this._fitViewport(center);\n  }\n\n  var outer,\n      matrix;\n\n  this._changeViewbox(function() {\n\n    if (typeof center !== 'object') {\n      outer = this.viewbox().outer;\n\n      center = {\n        x: outer.width / 2,\n        y: outer.height / 2\n      };\n    }\n\n    matrix = this._setZoom(newScale, center);\n  });\n\n  return round(matrix.a, 1000);\n};\n\nfunction setCTM(node, m) {\n  var mstr = 'matrix(' + m.a + ',' + m.b + ',' + m.c + ',' + m.d + ',' + m.e + ',' + m.f + ')';\n  node.setAttribute('transform', mstr);\n}\n\nCanvas.prototype._fitViewport = function(center) {\n\n  var vbox = this.viewbox(),\n      outer = vbox.outer,\n      inner = vbox.inner,\n      newScale,\n      newViewbox;\n\n  // display the complete diagram without zooming in.\n  // instead of relying on internal zoom, we perform a\n  // hard reset on the canvas viewbox to realize this\n  //\n  // if diagram does not need to be zoomed in, we focus it around\n  // the diagram origin instead\n\n  if (inner.x >= 0 &&\n      inner.y >= 0 &&\n      inner.x + inner.width <= outer.width &&\n      inner.y + inner.height <= outer.height &&\n      !center) {\n\n    newViewbox = {\n      x: 0,\n      y: 0,\n      width: Math.max(inner.width + inner.x, outer.width),\n      height: Math.max(inner.height + inner.y, outer.height)\n    };\n  } else {\n\n    newScale = Math.min(1, outer.width / inner.width, outer.height / inner.height);\n    newViewbox = {\n      x: inner.x + (center ? inner.width / 2 - outer.width / newScale / 2 : 0),\n      y: inner.y + (center ? inner.height / 2 - outer.height / newScale / 2 : 0),\n      width: outer.width / newScale,\n      height: outer.height / newScale\n    };\n  }\n\n  this.viewbox(newViewbox);\n\n  return this.viewbox(false).scale;\n};\n\n\nCanvas.prototype._setZoom = function(scale, center) {\n\n  var svg = this._svg,\n      viewport = this._viewport;\n\n  var matrix = svg.createSVGMatrix();\n  var point = svg.createSVGPoint();\n\n  var centerPoint,\n      originalPoint,\n      currentMatrix,\n      scaleMatrix,\n      newMatrix;\n\n  currentMatrix = viewport.getCTM();\n\n  var currentScale = currentMatrix.a;\n\n  if (center) {\n    centerPoint = assign(point, center);\n\n    // revert applied viewport transformations\n    originalPoint = centerPoint.matrixTransform(currentMatrix.inverse());\n\n    // create scale matrix\n    scaleMatrix = matrix\n      .translate(originalPoint.x, originalPoint.y)\n      .scale(1 / currentScale * scale)\n      .translate(-originalPoint.x, -originalPoint.y);\n\n    newMatrix = currentMatrix.multiply(scaleMatrix);\n  } else {\n    newMatrix = matrix.scale(scale);\n  }\n\n  setCTM(this._viewport, newMatrix);\n\n  return newMatrix;\n};\n\n\n/**\n * Returns the size of the canvas\n *\n * @return {Dimensions}\n */\nCanvas.prototype.getSize = function() {\n  return {\n    width: this._container.clientWidth,\n    height: this._container.clientHeight\n  };\n};\n\n\n/**\n * Return the absolute bounding box for the given element\n *\n * The absolute bounding box may be used to display overlays in the\n * callers (browser) coordinate system rather than the zoomed in/out\n * canvas coordinates.\n *\n * @param  {ElementDescriptor} element\n * @return {Bounds} the absolute bounding box\n */\nCanvas.prototype.getAbsoluteBBox = function(element) {\n  var vbox = this.viewbox();\n  var bbox;\n\n  // connection\n  // use svg bbox\n  if (element.waypoints) {\n    var gfx = this.getGraphics(element);\n\n    bbox = gfx.getBBox();\n  }\n\n  // shapes\n  // use data\n  else {\n    bbox = element;\n  }\n\n  var x = bbox.x * vbox.scale - vbox.x * vbox.scale;\n  var y = bbox.y * vbox.scale - vbox.y * vbox.scale;\n\n  var width = bbox.width * vbox.scale;\n  var height = bbox.height * vbox.scale;\n\n  return {\n    x: x,\n    y: y,\n    width: width,\n    height: height\n  };\n};\n\n/**\n * Fires an event in order other modules can react to the\n * canvas resizing\n */\nCanvas.prototype.resized = function() {\n\n  // force recomputation of view box\n  delete this._cachedViewbox;\n\n  this._eventBus.fire('canvas.resized');\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}