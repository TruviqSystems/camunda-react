{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport PropTypes from 'prop-types';\nimport { Component } from 'react';\nimport { customPropTypes, META } from '../../lib';\nimport getNodeFromProps from './lib/getNodeFromProps';\nimport handleClassNamesChange from './lib/handleClassNamesChange';\nimport NodeRegistry from './lib/NodeRegistry';\nvar nodeRegistry = new NodeRegistry();\n\n/**\n * A component that allows to manage classNames on a DOM node in declarative manner.\n */\n\nvar MountNode = function (_Component) {\n  _inherits(MountNode, _Component);\n  function MountNode() {\n    _classCallCheck(this, MountNode);\n    return _possibleConstructorReturn(this, (MountNode.__proto__ || Object.getPrototypeOf(MountNode)).apply(this, arguments));\n  }\n  _createClass(MountNode, [{\n    key: 'shouldComponentUpdate',\n    value: function shouldComponentUpdate(_ref) {\n      var nextClassName = _ref.className;\n      var currentClassName = this.props.className;\n      return nextClassName !== currentClassName;\n    }\n  }, {\n    key: 'componentWillMount',\n    value: function componentWillMount() {\n      var node = getNodeFromProps(this.props);\n      if (node) {\n        nodeRegistry.add(node, this);\n        nodeRegistry.emit(node, handleClassNamesChange);\n      }\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate() {\n      var node = getNodeFromProps(this.props);\n      if (node) nodeRegistry.emit(node, handleClassNamesChange);\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      var node = getNodeFromProps(this.props);\n      if (node) {\n        nodeRegistry.del(node, this);\n        nodeRegistry.emit(node, handleClassNamesChange);\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return null;\n    }\n  }]);\n  return MountNode;\n}(Component);\nMountNode._meta = {\n  name: 'MountNode',\n  type: META.TYPES.ADDON\n};\nMountNode.handledProps = ['className', 'node'];\nexport default MountNode;\nMountNode.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** Additional classes. */\n  className: PropTypes.string,\n  /** The DOM node where we will apply class names. Defaults to document.body. */\n  node: customPropTypes.domNode\n} : {};","map":{"version":3,"names":["_classCallCheck","_createClass","_possibleConstructorReturn","_inherits","PropTypes","Component","customPropTypes","META","getNodeFromProps","handleClassNamesChange","NodeRegistry","nodeRegistry","MountNode","_Component","__proto__","Object","getPrototypeOf","apply","arguments","key","value","shouldComponentUpdate","_ref","nextClassName","className","currentClassName","props","componentWillMount","node","add","emit","componentDidUpdate","componentWillUnmount","del","render","_meta","name","type","TYPES","ADDON","handledProps","propTypes","process","env","NODE_ENV","string","domNode"],"sources":["C:/Users/KondalaRaoThota/Truviq_Camunda/camunda-react/node_modules/react-semantic-redux-form/node_modules/semantic-ui-react/dist/es/addons/MountNode/MountNode.js"],"sourcesContent":["import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport PropTypes from 'prop-types';\nimport { Component } from 'react';\n\nimport { customPropTypes, META } from '../../lib';\nimport getNodeFromProps from './lib/getNodeFromProps';\nimport handleClassNamesChange from './lib/handleClassNamesChange';\nimport NodeRegistry from './lib/NodeRegistry';\n\nvar nodeRegistry = new NodeRegistry();\n\n/**\n * A component that allows to manage classNames on a DOM node in declarative manner.\n */\n\nvar MountNode = function (_Component) {\n  _inherits(MountNode, _Component);\n\n  function MountNode() {\n    _classCallCheck(this, MountNode);\n\n    return _possibleConstructorReturn(this, (MountNode.__proto__ || Object.getPrototypeOf(MountNode)).apply(this, arguments));\n  }\n\n  _createClass(MountNode, [{\n    key: 'shouldComponentUpdate',\n    value: function shouldComponentUpdate(_ref) {\n      var nextClassName = _ref.className;\n      var currentClassName = this.props.className;\n\n\n      return nextClassName !== currentClassName;\n    }\n  }, {\n    key: 'componentWillMount',\n    value: function componentWillMount() {\n      var node = getNodeFromProps(this.props);\n\n      if (node) {\n        nodeRegistry.add(node, this);\n        nodeRegistry.emit(node, handleClassNamesChange);\n      }\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate() {\n      var node = getNodeFromProps(this.props);\n\n      if (node) nodeRegistry.emit(node, handleClassNamesChange);\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      var node = getNodeFromProps(this.props);\n\n      if (node) {\n        nodeRegistry.del(node, this);\n        nodeRegistry.emit(node, handleClassNamesChange);\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return null;\n    }\n  }]);\n\n  return MountNode;\n}(Component);\n\nMountNode._meta = {\n  name: 'MountNode',\n  type: META.TYPES.ADDON\n};\nMountNode.handledProps = ['className', 'node'];\nexport default MountNode;\nMountNode.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** The DOM node where we will apply class names. Defaults to document.body. */\n  node: customPropTypes.domNode\n} : {};"],"mappings":"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"},"metadata":{},"sourceType":"module"}