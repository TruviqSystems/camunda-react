{"ast":null,"code":"var root = require('./_root'),\n  toInteger = require('./toInteger'),\n  toNumber = require('./toNumber'),\n  toString = require('./toString');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsFinite = root.isFinite,\n  nativeMin = Math.min;\n\n/**\r\n * Creates a function like `_.round`.\r\n *\r\n * @private\r\n * @param {string} methodName The name of the `Math` method to use when rounding.\r\n * @returns {Function} Returns the new round function.\r\n */\nfunction createRound(methodName) {\n  var func = Math[methodName];\n  return function (number, precision) {\n    number = toNumber(number);\n    precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);\n    if (precision && nativeIsFinite(number)) {\n      // Shift with exponential notation to avoid floating-point issues.\n      // See [MDN](https://mdn.io/round#Examples) for more details.\n      var pair = (toString(number) + 'e').split('e'),\n        value = func(pair[0] + 'e' + (+pair[1] + precision));\n      pair = (toString(value) + 'e').split('e');\n      return +(pair[0] + 'e' + (+pair[1] - precision));\n    }\n    return func(number);\n  };\n}\nmodule.exports = createRound;","map":{"version":3,"names":["root","require","toInteger","toNumber","toString","nativeIsFinite","isFinite","nativeMin","Math","min","createRound","methodName","func","number","precision","pair","split","value","module","exports"],"sources":["C:/Users/sam/final/camunda-react/node_modules/lodash/_createRound.js"],"sourcesContent":["var root = require('./_root'),\r\n    toInteger = require('./toInteger'),\r\n    toNumber = require('./toNumber'),\r\n    toString = require('./toString');\r\n\r\n/* Built-in method references for those with the same name as other `lodash` methods. */\r\nvar nativeIsFinite = root.isFinite,\r\n    nativeMin = Math.min;\r\n\r\n/**\r\n * Creates a function like `_.round`.\r\n *\r\n * @private\r\n * @param {string} methodName The name of the `Math` method to use when rounding.\r\n * @returns {Function} Returns the new round function.\r\n */\r\nfunction createRound(methodName) {\r\n  var func = Math[methodName];\r\n  return function(number, precision) {\r\n    number = toNumber(number);\r\n    precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);\r\n    if (precision && nativeIsFinite(number)) {\r\n      // Shift with exponential notation to avoid floating-point issues.\r\n      // See [MDN](https://mdn.io/round#Examples) for more details.\r\n      var pair = (toString(number) + 'e').split('e'),\r\n          value = func(pair[0] + 'e' + (+pair[1] + precision));\r\n\r\n      pair = (toString(value) + 'e').split('e');\r\n      return +(pair[0] + 'e' + (+pair[1] - precision));\r\n    }\r\n    return func(number);\r\n  };\r\n}\r\n\r\nmodule.exports = createRound;\r\n"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,SAAS,CAAC;EACzBC,SAAS,GAAGD,OAAO,CAAC,aAAa,CAAC;EAClCE,QAAQ,GAAGF,OAAO,CAAC,YAAY,CAAC;EAChCG,QAAQ,GAAGH,OAAO,CAAC,YAAY,CAAC;;AAEpC;AACA,IAAII,cAAc,GAAGL,IAAI,CAACM,QAAQ;EAC9BC,SAAS,GAAGC,IAAI,CAACC,GAAG;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,WAAWA,CAACC,UAAU,EAAE;EAC/B,IAAIC,IAAI,GAAGJ,IAAI,CAACG,UAAU,CAAC;EAC3B,OAAO,UAASE,MAAM,EAAEC,SAAS,EAAE;IACjCD,MAAM,GAAGV,QAAQ,CAACU,MAAM,CAAC;IACzBC,SAAS,GAAGA,SAAS,IAAI,IAAI,GAAG,CAAC,GAAGP,SAAS,CAACL,SAAS,CAACY,SAAS,CAAC,EAAE,GAAG,CAAC;IACxE,IAAIA,SAAS,IAAIT,cAAc,CAACQ,MAAM,CAAC,EAAE;MACvC;MACA;MACA,IAAIE,IAAI,GAAG,CAACX,QAAQ,CAACS,MAAM,CAAC,GAAG,GAAG,EAAEG,KAAK,CAAC,GAAG,CAAC;QAC1CC,KAAK,GAAGL,IAAI,CAACG,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,IAAI,CAACA,IAAI,CAAC,CAAC,CAAC,GAAGD,SAAS,CAAC,CAAC;MAExDC,IAAI,GAAG,CAACX,QAAQ,CAACa,KAAK,CAAC,GAAG,GAAG,EAAED,KAAK,CAAC,GAAG,CAAC;MACzC,OAAO,EAAED,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,IAAI,CAACA,IAAI,CAAC,CAAC,CAAC,GAAGD,SAAS,CAAC,CAAC;IAClD;IACA,OAAOF,IAAI,CAACC,MAAM,CAAC;EACrB,CAAC;AACH;AAEAK,MAAM,CAACC,OAAO,GAAGT,WAAW"},"metadata":{},"sourceType":"script"}