{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, META, useKeyOnly } from '../../lib';\n\n/**\r\n * A dropdown menu can contain a menu.\r\n */\nfunction DropdownMenu(props) {\n  var children = props.children,\n    className = props.className,\n    content = props.content,\n    direction = props.direction,\n    open = props.open,\n    scrolling = props.scrolling;\n  var classes = cx(direction, useKeyOnly(open, 'visible'), useKeyOnly(scrolling, 'scrolling'), 'menu transition', className);\n  var rest = getUnhandledProps(DropdownMenu, props);\n  var ElementType = getElementType(DropdownMenu, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\nDropdownMenu.handledProps = ['as', 'children', 'className', 'content', 'direction', 'open', 'scrolling'];\nDropdownMenu._meta = {\n  name: 'DropdownMenu',\n  parent: 'Dropdown',\n  type: META.TYPES.MODULE\n};\nDropdownMenu.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n  /** Primary content. */\n  children: PropTypes.node,\n  /** Additional classes. */\n  className: PropTypes.string,\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n  /** A dropdown menu can open to the left or to the right. */\n  direction: PropTypes.oneOf(['left', 'right']),\n  /** Whether or not the dropdown menu is displayed. */\n  open: PropTypes.bool,\n  /** A dropdown menu can scroll. */\n  scrolling: PropTypes.bool\n} : {};\nexport default DropdownMenu;","map":{"version":3,"names":["_extends","cx","PropTypes","React","childrenUtils","customPropTypes","getElementType","getUnhandledProps","META","useKeyOnly","DropdownMenu","props","children","className","content","direction","open","scrolling","classes","rest","ElementType","createElement","isNil","handledProps","_meta","name","parent","type","TYPES","MODULE","propTypes","process","env","NODE_ENV","as","node","string","contentShorthand","oneOf","bool"],"sources":["C:/Users/sam/final/camunda-react/node_modules/react-semantic-redux-form/node_modules/semantic-ui-react/dist/es/modules/Dropdown/DropdownMenu.js"],"sourcesContent":["import _extends from 'babel-runtime/helpers/extends';\r\nimport cx from 'classnames';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, META, useKeyOnly } from '../../lib';\r\n\r\n/**\r\n * A dropdown menu can contain a menu.\r\n */\r\nfunction DropdownMenu(props) {\r\n  var children = props.children,\r\n      className = props.className,\r\n      content = props.content,\r\n      direction = props.direction,\r\n      open = props.open,\r\n      scrolling = props.scrolling;\r\n\r\n  var classes = cx(direction, useKeyOnly(open, 'visible'), useKeyOnly(scrolling, 'scrolling'), 'menu transition', className);\r\n  var rest = getUnhandledProps(DropdownMenu, props);\r\n  var ElementType = getElementType(DropdownMenu, props);\r\n\r\n  return React.createElement(\r\n    ElementType,\r\n    _extends({}, rest, { className: classes }),\r\n    childrenUtils.isNil(children) ? content : children\r\n  );\r\n}\r\n\r\nDropdownMenu.handledProps = ['as', 'children', 'className', 'content', 'direction', 'open', 'scrolling'];\r\nDropdownMenu._meta = {\r\n  name: 'DropdownMenu',\r\n  parent: 'Dropdown',\r\n  type: META.TYPES.MODULE\r\n};\r\n\r\nDropdownMenu.propTypes = process.env.NODE_ENV !== \"production\" ? {\r\n  /** An element type to render as (string or function). */\r\n  as: customPropTypes.as,\r\n\r\n  /** Primary content. */\r\n  children: PropTypes.node,\r\n\r\n  /** Additional classes. */\r\n  className: PropTypes.string,\r\n\r\n  /** Shorthand for primary content. */\r\n  content: customPropTypes.contentShorthand,\r\n\r\n  /** A dropdown menu can open to the left or to the right. */\r\n  direction: PropTypes.oneOf(['left', 'right']),\r\n\r\n  /** Whether or not the dropdown menu is displayed. */\r\n  open: PropTypes.bool,\r\n\r\n  /** A dropdown menu can scroll. */\r\n  scrolling: PropTypes.bool\r\n} : {};\r\n\r\nexport default DropdownMenu;"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,+BAA+B;AACpD,OAAOC,EAAE,MAAM,YAAY;AAC3B,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,KAAK,MAAM,OAAO;AAEzB,SAASC,aAAa,EAAEC,eAAe,EAAEC,cAAc,EAAEC,iBAAiB,EAAEC,IAAI,EAAEC,UAAU,QAAQ,WAAW;;AAE/G;AACA;AACA;AACA,SAASC,YAAYA,CAACC,KAAK,EAAE;EAC3B,IAAIC,QAAQ,GAAGD,KAAK,CAACC,QAAQ;IACzBC,SAAS,GAAGF,KAAK,CAACE,SAAS;IAC3BC,OAAO,GAAGH,KAAK,CAACG,OAAO;IACvBC,SAAS,GAAGJ,KAAK,CAACI,SAAS;IAC3BC,IAAI,GAAGL,KAAK,CAACK,IAAI;IACjBC,SAAS,GAAGN,KAAK,CAACM,SAAS;EAE/B,IAAIC,OAAO,GAAGjB,EAAE,CAACc,SAAS,EAAEN,UAAU,CAACO,IAAI,EAAE,SAAS,CAAC,EAAEP,UAAU,CAACQ,SAAS,EAAE,WAAW,CAAC,EAAE,iBAAiB,EAAEJ,SAAS,CAAC;EAC1H,IAAIM,IAAI,GAAGZ,iBAAiB,CAACG,YAAY,EAAEC,KAAK,CAAC;EACjD,IAAIS,WAAW,GAAGd,cAAc,CAACI,YAAY,EAAEC,KAAK,CAAC;EAErD,OAAOR,KAAK,CAACkB,aAAa,CACxBD,WAAW,EACXpB,QAAQ,CAAC,CAAC,CAAC,EAAEmB,IAAI,EAAE;IAAEN,SAAS,EAAEK;EAAQ,CAAC,CAAC,EAC1Cd,aAAa,CAACkB,KAAK,CAACV,QAAQ,CAAC,GAAGE,OAAO,GAAGF,QAAQ,CACnD;AACH;AAEAF,YAAY,CAACa,YAAY,GAAG,CAAC,IAAI,EAAE,UAAU,EAAE,WAAW,EAAE,SAAS,EAAE,WAAW,EAAE,MAAM,EAAE,WAAW,CAAC;AACxGb,YAAY,CAACc,KAAK,GAAG;EACnBC,IAAI,EAAE,cAAc;EACpBC,MAAM,EAAE,UAAU;EAClBC,IAAI,EAAEnB,IAAI,CAACoB,KAAK,CAACC;AACnB,CAAC;AAEDnB,YAAY,CAACoB,SAAS,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAG;EAC/D;EACAC,EAAE,EAAE7B,eAAe,CAAC6B,EAAE;EAEtB;EACAtB,QAAQ,EAAEV,SAAS,CAACiC,IAAI;EAExB;EACAtB,SAAS,EAAEX,SAAS,CAACkC,MAAM;EAE3B;EACAtB,OAAO,EAAET,eAAe,CAACgC,gBAAgB;EAEzC;EACAtB,SAAS,EAAEb,SAAS,CAACoC,KAAK,CAAC,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;EAE7C;EACAtB,IAAI,EAAEd,SAAS,CAACqC,IAAI;EAEpB;EACAtB,SAAS,EAAEf,SAAS,CAACqC;AACvB,CAAC,GAAG,CAAC,CAAC;AAEN,eAAe7B,YAAY"},"metadata":{},"sourceType":"module"}