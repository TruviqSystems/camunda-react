{"ast":null,"code":"import inherits from 'inherits';\nimport CoreModule from './core';\nimport TranslateModule from 'diagram-js/lib/i18n/translate';\nimport SelectionModule from 'diagram-js/lib/features/selection';\nimport OverlaysModule from 'diagram-js/lib/features/overlays';\nimport BaseViewer from './BaseViewer';\n\n/**\r\n * A viewer for BPMN 2.0 diagrams.\r\n *\r\n * Have a look at {@link NavigatedViewer} or {@link Modeler} for bundles that include\r\n * additional features.\r\n *\r\n *\r\n * ## Extending the Viewer\r\n *\r\n * In order to extend the viewer pass extension modules to bootstrap via the\r\n * `additionalModules` option. An extension module is an object that exposes\r\n * named services.\r\n *\r\n * The following example depicts the integration of a simple\r\n * logging component that integrates with interaction events:\r\n *\r\n *\r\n * ```javascript\r\n *\r\n * // logging component\r\n * function InteractionLogger(eventBus) {\r\n *   eventBus.on('element.hover', function(event) {\r\n *     console.log()\r\n *   })\r\n * }\r\n *\r\n * InteractionLogger.$inject = [ 'eventBus' ]; // minification save\r\n *\r\n * // extension module\r\n * var extensionModule = {\r\n *   __init__: [ 'interactionLogger' ],\r\n *   interactionLogger: [ 'type', InteractionLogger ]\r\n * };\r\n *\r\n * // extend the viewer\r\n * var bpmnViewer = new Viewer({ additionalModules: [ extensionModule ] });\r\n * bpmnViewer.importXML(...);\r\n * ```\r\n *\r\n * @param {Object} [options] configuration options to pass to the viewer\r\n * @param {DOMElement} [options.container] the container to render the viewer in, defaults to body.\r\n * @param {string|number} [options.width] the width of the viewer\r\n * @param {string|number} [options.height] the height of the viewer\r\n * @param {Object} [options.moddleExtensions] extension packages to provide\r\n * @param {Array<didi.Module>} [options.modules] a list of modules to override the default modules\r\n * @param {Array<didi.Module>} [options.additionalModules] a list of modules to use with the default modules\r\n */\nexport default function Viewer(options) {\n  BaseViewer.call(this, options);\n}\ninherits(Viewer, BaseViewer);\n\n// modules the viewer is composed of\nViewer.prototype._modules = [CoreModule, TranslateModule, SelectionModule, OverlaysModule];\n\n// default moddle extensions the viewer is composed of\nViewer.prototype._moddleExtensions = {};","map":{"version":3,"names":["inherits","CoreModule","TranslateModule","SelectionModule","OverlaysModule","BaseViewer","Viewer","options","call","prototype","_modules","_moddleExtensions"],"sources":["C:/Users/sam/final/camunda-react/node_modules/bpmn-js/lib/Viewer.js"],"sourcesContent":["import inherits from 'inherits';\r\n\r\nimport CoreModule from './core';\r\nimport TranslateModule from 'diagram-js/lib/i18n/translate';\r\nimport SelectionModule from 'diagram-js/lib/features/selection';\r\nimport OverlaysModule from 'diagram-js/lib/features/overlays';\r\n\r\nimport BaseViewer from './BaseViewer';\r\n\r\n\r\n/**\r\n * A viewer for BPMN 2.0 diagrams.\r\n *\r\n * Have a look at {@link NavigatedViewer} or {@link Modeler} for bundles that include\r\n * additional features.\r\n *\r\n *\r\n * ## Extending the Viewer\r\n *\r\n * In order to extend the viewer pass extension modules to bootstrap via the\r\n * `additionalModules` option. An extension module is an object that exposes\r\n * named services.\r\n *\r\n * The following example depicts the integration of a simple\r\n * logging component that integrates with interaction events:\r\n *\r\n *\r\n * ```javascript\r\n *\r\n * // logging component\r\n * function InteractionLogger(eventBus) {\r\n *   eventBus.on('element.hover', function(event) {\r\n *     console.log()\r\n *   })\r\n * }\r\n *\r\n * InteractionLogger.$inject = [ 'eventBus' ]; // minification save\r\n *\r\n * // extension module\r\n * var extensionModule = {\r\n *   __init__: [ 'interactionLogger' ],\r\n *   interactionLogger: [ 'type', InteractionLogger ]\r\n * };\r\n *\r\n * // extend the viewer\r\n * var bpmnViewer = new Viewer({ additionalModules: [ extensionModule ] });\r\n * bpmnViewer.importXML(...);\r\n * ```\r\n *\r\n * @param {Object} [options] configuration options to pass to the viewer\r\n * @param {DOMElement} [options.container] the container to render the viewer in, defaults to body.\r\n * @param {string|number} [options.width] the width of the viewer\r\n * @param {string|number} [options.height] the height of the viewer\r\n * @param {Object} [options.moddleExtensions] extension packages to provide\r\n * @param {Array<didi.Module>} [options.modules] a list of modules to override the default modules\r\n * @param {Array<didi.Module>} [options.additionalModules] a list of modules to use with the default modules\r\n */\r\nexport default function Viewer(options) {\r\n  BaseViewer.call(this, options);\r\n}\r\n\r\ninherits(Viewer, BaseViewer);\r\n\r\n// modules the viewer is composed of\r\nViewer.prototype._modules = [\r\n  CoreModule,\r\n  TranslateModule,\r\n  SelectionModule,\r\n  OverlaysModule\r\n];\r\n\r\n// default moddle extensions the viewer is composed of\r\nViewer.prototype._moddleExtensions = {};"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,UAAU;AAE/B,OAAOC,UAAU,MAAM,QAAQ;AAC/B,OAAOC,eAAe,MAAM,+BAA+B;AAC3D,OAAOC,eAAe,MAAM,mCAAmC;AAC/D,OAAOC,cAAc,MAAM,kCAAkC;AAE7D,OAAOC,UAAU,MAAM,cAAc;;AAGrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,MAAMA,CAACC,OAAO,EAAE;EACtCF,UAAU,CAACG,IAAI,CAAC,IAAI,EAAED,OAAO,CAAC;AAChC;AAEAP,QAAQ,CAACM,MAAM,EAAED,UAAU,CAAC;;AAE5B;AACAC,MAAM,CAACG,SAAS,CAACC,QAAQ,GAAG,CAC1BT,UAAU,EACVC,eAAe,EACfC,eAAe,EACfC,cAAc,CACf;;AAED;AACAE,MAAM,CAACG,SAAS,CAACE,iBAAiB,GAAG,CAAC,CAAC"},"metadata":{},"sourceType":"module"}