{"ast":null,"code":"var baseEach = require('./_baseEach');\n\n/**\r\n * The base implementation of `_.filter` without support for iteratee shorthands.\r\n *\r\n * @private\r\n * @param {Array|Object} collection The collection to iterate over.\r\n * @param {Function} predicate The function invoked per iteration.\r\n * @returns {Array} Returns the new filtered array.\r\n */\nfunction baseFilter(collection, predicate) {\n  var result = [];\n  baseEach(collection, function (value, index, collection) {\n    if (predicate(value, index, collection)) {\n      result.push(value);\n    }\n  });\n  return result;\n}\nmodule.exports = baseFilter;","map":{"version":3,"names":["baseEach","require","baseFilter","collection","predicate","result","value","index","push","module","exports"],"sources":["C:/Users/sam/final/camunda-react/node_modules/lodash/_baseFilter.js"],"sourcesContent":["var baseEach = require('./_baseEach');\r\n\r\n/**\r\n * The base implementation of `_.filter` without support for iteratee shorthands.\r\n *\r\n * @private\r\n * @param {Array|Object} collection The collection to iterate over.\r\n * @param {Function} predicate The function invoked per iteration.\r\n * @returns {Array} Returns the new filtered array.\r\n */\r\nfunction baseFilter(collection, predicate) {\r\n  var result = [];\r\n  baseEach(collection, function(value, index, collection) {\r\n    if (predicate(value, index, collection)) {\r\n      result.push(value);\r\n    }\r\n  });\r\n  return result;\r\n}\r\n\r\nmodule.exports = baseFilter;\r\n"],"mappings":"AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,aAAa,CAAC;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,UAAUA,CAACC,UAAU,EAAEC,SAAS,EAAE;EACzC,IAAIC,MAAM,GAAG,EAAE;EACfL,QAAQ,CAACG,UAAU,EAAE,UAASG,KAAK,EAAEC,KAAK,EAAEJ,UAAU,EAAE;IACtD,IAAIC,SAAS,CAACE,KAAK,EAAEC,KAAK,EAAEJ,UAAU,CAAC,EAAE;MACvCE,MAAM,CAACG,IAAI,CAACF,KAAK,CAAC;IACpB;EACF,CAAC,CAAC;EACF,OAAOD,MAAM;AACf;AAEAI,MAAM,CAACC,OAAO,GAAGR,UAAU"},"metadata":{},"sourceType":"script"}