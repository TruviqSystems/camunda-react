{"ast":null,"code":"/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\nvar ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');\nvar ReactPropTypesSecret = require('./ReactPropTypesSecret');\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\nvar ReactComponentTreeHook;\nif (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {\n  // Temporary hack.\n  // Inline requires don't work well with Jest:\n  // https://github.com/facebook/react/issues/7240\n  // Remove the inline requires when we don't need them anymore:\n  // https://github.com/facebook/react/pull/7178\n  ReactComponentTreeHook = require('./ReactComponentTreeHook');\n}\nvar loggedTypeFailures = {};\n\n/**\r\n * Assert that the values match with the type specs.\r\n * Error messages are memorized and will only be shown once.\r\n *\r\n * @param {object} typeSpecs Map of name to a ReactPropType\r\n * @param {object} values Runtime values that need to be type-checked\r\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"\r\n * @param {string} componentName Name of the component for error messages.\r\n * @param {?object} element The React element that is being type-checked\r\n * @param {?number} debugID The React component instance that is being type-checked\r\n * @private\r\n */\nfunction checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {\n  for (var typeSpecName in typeSpecs) {\n    if (typeSpecs.hasOwnProperty(typeSpecName)) {\n      var error;\n      // Prop type validation may throw. In case they do, we don't want to\n      // fail the render phase where it didn't fail before. So we log it.\n      // After these have been cleaned up, we'll let them throw.\n      try {\n        // This is intentionally an invariant that gets caught. It's the same\n        // behavior as without this statement except with a better message.\n        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;\n        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);\n      } catch (ex) {\n        error = ex;\n      }\n      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;\n      if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n        // Only monitor this failure once because there tends to be a lot of the\n        // same error.\n        loggedTypeFailures[error.message] = true;\n        var componentStackInfo = '';\n        if (process.env.NODE_ENV !== 'production') {\n          if (!ReactComponentTreeHook) {\n            ReactComponentTreeHook = require('./ReactComponentTreeHook');\n          }\n          if (debugID !== null) {\n            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);\n          } else if (element !== null) {\n            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);\n          }\n        }\n        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;\n      }\n    }\n  }\n}\nmodule.exports = checkReactTypeSpec;","map":{"version":3,"names":["_prodInvariant","require","ReactPropTypeLocationNames","ReactPropTypesSecret","invariant","warning","ReactComponentTreeHook","process","env","NODE_ENV","loggedTypeFailures","checkReactTypeSpec","typeSpecs","values","location","componentName","element","debugID","typeSpecName","hasOwnProperty","error","ex","Error","message","componentStackInfo","getStackAddendumByID","getCurrentStackAddendum","module","exports"],"sources":["C:/Users/sam/final/camunda-react/node_modules/react-semantic-redux-form/node_modules/react/lib/checkReactTypeSpec.js"],"sourcesContent":["/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\n\r\n'use strict';\r\n\r\nvar _prodInvariant = require('./reactProdInvariant');\r\n\r\nvar ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');\r\nvar ReactPropTypesSecret = require('./ReactPropTypesSecret');\r\n\r\nvar invariant = require('fbjs/lib/invariant');\r\nvar warning = require('fbjs/lib/warning');\r\n\r\nvar ReactComponentTreeHook;\r\n\r\nif (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {\r\n  // Temporary hack.\r\n  // Inline requires don't work well with Jest:\r\n  // https://github.com/facebook/react/issues/7240\r\n  // Remove the inline requires when we don't need them anymore:\r\n  // https://github.com/facebook/react/pull/7178\r\n  ReactComponentTreeHook = require('./ReactComponentTreeHook');\r\n}\r\n\r\nvar loggedTypeFailures = {};\r\n\r\n/**\r\n * Assert that the values match with the type specs.\r\n * Error messages are memorized and will only be shown once.\r\n *\r\n * @param {object} typeSpecs Map of name to a ReactPropType\r\n * @param {object} values Runtime values that need to be type-checked\r\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"\r\n * @param {string} componentName Name of the component for error messages.\r\n * @param {?object} element The React element that is being type-checked\r\n * @param {?number} debugID The React component instance that is being type-checked\r\n * @private\r\n */\r\nfunction checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {\r\n  for (var typeSpecName in typeSpecs) {\r\n    if (typeSpecs.hasOwnProperty(typeSpecName)) {\r\n      var error;\r\n      // Prop type validation may throw. In case they do, we don't want to\r\n      // fail the render phase where it didn't fail before. So we log it.\r\n      // After these have been cleaned up, we'll let them throw.\r\n      try {\r\n        // This is intentionally an invariant that gets caught. It's the same\r\n        // behavior as without this statement except with a better message.\r\n        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;\r\n        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);\r\n      } catch (ex) {\r\n        error = ex;\r\n      }\r\n      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;\r\n      if (error instanceof Error && !(error.message in loggedTypeFailures)) {\r\n        // Only monitor this failure once because there tends to be a lot of the\r\n        // same error.\r\n        loggedTypeFailures[error.message] = true;\r\n\r\n        var componentStackInfo = '';\r\n\r\n        if (process.env.NODE_ENV !== 'production') {\r\n          if (!ReactComponentTreeHook) {\r\n            ReactComponentTreeHook = require('./ReactComponentTreeHook');\r\n          }\r\n          if (debugID !== null) {\r\n            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);\r\n          } else if (element !== null) {\r\n            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);\r\n          }\r\n        }\r\n\r\n        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = checkReactTypeSpec;"],"mappings":"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"},"metadata":{},"sourceType":"script"}