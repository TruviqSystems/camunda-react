{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps, useKeyOnly } from '../../lib';\nimport Segment from '../../elements/Segment/Segment';\n/**\r\n * A tab pane holds the content of a tab.\r\n */\n\nfunction TabPane(props) {\n  var active = props.active,\n    children = props.children,\n    className = props.className,\n    content = props.content,\n    loading = props.loading;\n  var classes = cx(useKeyOnly(active, 'active'), useKeyOnly(loading, 'loading'), 'tab', className);\n  var rest = getUnhandledProps(TabPane, props);\n  var ElementType = getElementType(TabPane, props);\n  var calculatedDefaultProps = {};\n  if (ElementType === Segment) {\n    calculatedDefaultProps.attached = 'bottom';\n  }\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, calculatedDefaultProps, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\nTabPane.handledProps = [\"active\", \"as\", \"children\", \"className\", \"content\", \"loading\"];\nTabPane.defaultProps = {\n  as: Segment,\n  active: true\n};\nTabPane.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n  /** A tab pane can be active. */\n  active: PropTypes.bool,\n  /** Primary content. */\n  children: PropTypes.node,\n  /** Additional classes. */\n  className: PropTypes.string,\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n  /** A Tab.Pane can display a loading indicator. */\n  loading: PropTypes.bool\n} : {};\nTabPane.create = createShorthandFactory(TabPane, function (content) {\n  return {\n    content: content\n  };\n});\nexport default TabPane;","map":{"version":3,"names":["_extends","cx","PropTypes","React","childrenUtils","createShorthandFactory","customPropTypes","getElementType","getUnhandledProps","useKeyOnly","Segment","TabPane","props","active","children","className","content","loading","classes","rest","ElementType","calculatedDefaultProps","attached","createElement","isNil","handledProps","defaultProps","as","propTypes","process","env","NODE_ENV","elementType","bool","node","string","contentShorthand","create"],"sources":["C:/Users/sam/final/camunda-react/node_modules/semantic-ui-react/dist/es/modules/Tab/TabPane.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport cx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps, useKeyOnly } from '../../lib';\r\nimport Segment from '../../elements/Segment/Segment';\r\n/**\r\n * A tab pane holds the content of a tab.\r\n */\r\n\r\nfunction TabPane(props) {\r\n  var active = props.active,\r\n      children = props.children,\r\n      className = props.className,\r\n      content = props.content,\r\n      loading = props.loading;\r\n  var classes = cx(useKeyOnly(active, 'active'), useKeyOnly(loading, 'loading'), 'tab', className);\r\n  var rest = getUnhandledProps(TabPane, props);\r\n  var ElementType = getElementType(TabPane, props);\r\n  var calculatedDefaultProps = {};\r\n\r\n  if (ElementType === Segment) {\r\n    calculatedDefaultProps.attached = 'bottom';\r\n  }\r\n\r\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, calculatedDefaultProps, rest, {\r\n    className: classes\r\n  }), childrenUtils.isNil(children) ? content : children);\r\n}\r\n\r\nTabPane.handledProps = [\"active\", \"as\", \"children\", \"className\", \"content\", \"loading\"];\r\nTabPane.defaultProps = {\r\n  as: Segment,\r\n  active: true\r\n};\r\nTabPane.propTypes = process.env.NODE_ENV !== \"production\" ? {\r\n  /** An element type to render as (string or function). */\r\n  as: PropTypes.elementType,\r\n\r\n  /** A tab pane can be active. */\r\n  active: PropTypes.bool,\r\n\r\n  /** Primary content. */\r\n  children: PropTypes.node,\r\n\r\n  /** Additional classes. */\r\n  className: PropTypes.string,\r\n\r\n  /** Shorthand for primary content. */\r\n  content: customPropTypes.contentShorthand,\r\n\r\n  /** A Tab.Pane can display a loading indicator. */\r\n  loading: PropTypes.bool\r\n} : {};\r\nTabPane.create = createShorthandFactory(TabPane, function (content) {\r\n  return {\r\n    content: content\r\n  };\r\n});\r\nexport default TabPane;"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,OAAOC,EAAE,MAAM,MAAM;AACrB,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,aAAa,EAAEC,sBAAsB,EAAEC,eAAe,EAAEC,cAAc,EAAEC,iBAAiB,EAAEC,UAAU,QAAQ,WAAW;AACjI,OAAOC,OAAO,MAAM,gCAAgC;AACpD;AACA;AACA;;AAEA,SAASC,OAAOA,CAACC,KAAK,EAAE;EACtB,IAAIC,MAAM,GAAGD,KAAK,CAACC,MAAM;IACrBC,QAAQ,GAAGF,KAAK,CAACE,QAAQ;IACzBC,SAAS,GAAGH,KAAK,CAACG,SAAS;IAC3BC,OAAO,GAAGJ,KAAK,CAACI,OAAO;IACvBC,OAAO,GAAGL,KAAK,CAACK,OAAO;EAC3B,IAAIC,OAAO,GAAGjB,EAAE,CAACQ,UAAU,CAACI,MAAM,EAAE,QAAQ,CAAC,EAAEJ,UAAU,CAACQ,OAAO,EAAE,SAAS,CAAC,EAAE,KAAK,EAAEF,SAAS,CAAC;EAChG,IAAII,IAAI,GAAGX,iBAAiB,CAACG,OAAO,EAAEC,KAAK,CAAC;EAC5C,IAAIQ,WAAW,GAAGb,cAAc,CAACI,OAAO,EAAEC,KAAK,CAAC;EAChD,IAAIS,sBAAsB,GAAG,CAAC,CAAC;EAE/B,IAAID,WAAW,KAAKV,OAAO,EAAE;IAC3BW,sBAAsB,CAACC,QAAQ,GAAG,QAAQ;EAC5C;EAEA,OAAO,aAAanB,KAAK,CAACoB,aAAa,CAACH,WAAW,EAAEpB,QAAQ,CAAC,CAAC,CAAC,EAAEqB,sBAAsB,EAAEF,IAAI,EAAE;IAC9FJ,SAAS,EAAEG;EACb,CAAC,CAAC,EAAEd,aAAa,CAACoB,KAAK,CAACV,QAAQ,CAAC,GAAGE,OAAO,GAAGF,QAAQ,CAAC;AACzD;AAEAH,OAAO,CAACc,YAAY,GAAG,CAAC,QAAQ,EAAE,IAAI,EAAE,UAAU,EAAE,WAAW,EAAE,SAAS,EAAE,SAAS,CAAC;AACtFd,OAAO,CAACe,YAAY,GAAG;EACrBC,EAAE,EAAEjB,OAAO;EACXG,MAAM,EAAE;AACV,CAAC;AACDF,OAAO,CAACiB,SAAS,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAG;EAC1D;EACAJ,EAAE,EAAEzB,SAAS,CAAC8B,WAAW;EAEzB;EACAnB,MAAM,EAAEX,SAAS,CAAC+B,IAAI;EAEtB;EACAnB,QAAQ,EAAEZ,SAAS,CAACgC,IAAI;EAExB;EACAnB,SAAS,EAAEb,SAAS,CAACiC,MAAM;EAE3B;EACAnB,OAAO,EAAEV,eAAe,CAAC8B,gBAAgB;EAEzC;EACAnB,OAAO,EAAEf,SAAS,CAAC+B;AACrB,CAAC,GAAG,CAAC,CAAC;AACNtB,OAAO,CAAC0B,MAAM,GAAGhC,sBAAsB,CAACM,OAAO,EAAE,UAAUK,OAAO,EAAE;EAClE,OAAO;IACLA,OAAO,EAAEA;EACX,CAAC;AACH,CAAC,CAAC;AACF,eAAeL,OAAO"},"metadata":{},"sourceType":"module"}