{"ast":null,"code":"import { Injector } from 'didi';\nimport CoreModule from './core';\n\n/**\r\n * Bootstrap an injector from a list of modules, instantiating a number of default components\r\n *\r\n * @ignore\r\n * @param {Array<didi.Module>} bootstrapModules\r\n *\r\n * @return {didi.Injector} a injector to use to access the components\r\n */\nfunction bootstrap(bootstrapModules) {\n  var modules = [],\n    components = [];\n  function hasModule(m) {\n    return modules.indexOf(m) >= 0;\n  }\n  function addModule(m) {\n    modules.push(m);\n  }\n  function visit(m) {\n    if (hasModule(m)) {\n      return;\n    }\n    (m.__depends__ || []).forEach(visit);\n    if (hasModule(m)) {\n      return;\n    }\n    addModule(m);\n    (m.__init__ || []).forEach(function (c) {\n      components.push(c);\n    });\n  }\n  bootstrapModules.forEach(visit);\n  var injector = new Injector(modules);\n  components.forEach(function (c) {\n    try {\n      // eagerly resolve component (fn or string)\n      injector[typeof c === 'string' ? 'get' : 'invoke'](c);\n    } catch (e) {\n      console.error('Failed to instantiate component');\n      console.error(e.stack);\n      throw e;\n    }\n  });\n  return injector;\n}\n\n/**\r\n * Creates an injector from passed options.\r\n *\r\n * @ignore\r\n * @param  {Object} options\r\n * @return {didi.Injector}\r\n */\nfunction createInjector(options) {\n  options = options || {};\n  var configModule = {\n    'config': ['value', options]\n  };\n  var modules = [configModule, CoreModule].concat(options.modules || []);\n  return bootstrap(modules);\n}\n\n/**\r\n * The main diagram-js entry point that bootstraps the diagram with the given\r\n * configuration.\r\n *\r\n * To register extensions with the diagram, pass them as Array<didi.Module> to the constructor.\r\n *\r\n * @class djs.Diagram\r\n * @memberOf djs\r\n * @constructor\r\n *\r\n * @example\r\n *\r\n * <caption>Creating a plug-in that logs whenever a shape is added to the canvas.</caption>\r\n *\r\n * // plug-in implemenentation\r\n * function MyLoggingPlugin(eventBus) {\r\n *   eventBus.on('shape.added', function(event) {\r\n *     console.log('shape ', event.shape, ' was added to the diagram');\r\n *   });\r\n * }\r\n *\r\n * // export as module\r\n * export default {\r\n *   __init__: [ 'myLoggingPlugin' ],\r\n *     myLoggingPlugin: [ 'type', MyLoggingPlugin ]\r\n * };\r\n *\r\n *\r\n * // instantiate the diagram with the new plug-in\r\n *\r\n * import MyLoggingModule from 'path-to-my-logging-plugin';\r\n *\r\n * var diagram = new Diagram({\r\n *   modules: [\r\n *     MyLoggingModule\r\n *   ]\r\n * });\r\n *\r\n * diagram.invoke([ 'canvas', function(canvas) {\r\n *   // add shape to drawing canvas\r\n *   canvas.addShape({ x: 10, y: 10 });\r\n * });\r\n *\r\n * // 'shape ... was added to the diagram' logged to console\r\n *\r\n * @param {Object} options\r\n * @param {Array<didi.Module>} [options.modules] external modules to instantiate with the diagram\r\n * @param {didi.Injector} [injector] an (optional) injector to bootstrap the diagram with\r\n */\nexport default function Diagram(options, injector) {\n  // create injector unless explicitly specified\n  this.injector = injector = injector || createInjector(options);\n\n  // API\n\n  /**\r\n   * Resolves a diagram service\r\n   *\r\n   * @method Diagram#get\r\n   *\r\n   * @param {string} name the name of the diagram service to be retrieved\r\n   * @param {boolean} [strict=true] if false, resolve missing services to null\r\n   */\n  this.get = injector.get;\n\n  /**\r\n   * Executes a function into which diagram services are injected\r\n   *\r\n   * @method Diagram#invoke\r\n   *\r\n   * @param {Function|Object[]} fn the function to resolve\r\n   * @param {Object} locals a number of locals to use to resolve certain dependencies\r\n   */\n  this.invoke = injector.invoke;\n\n  // init\n\n  // indicate via event\n\n  /**\r\n   * An event indicating that all plug-ins are loaded.\r\n   *\r\n   * Use this event to fire other events to interested plug-ins\r\n   *\r\n   * @memberOf Diagram\r\n   *\r\n   * @event diagram.init\r\n   *\r\n   * @example\r\n   *\r\n   * eventBus.on('diagram.init', function() {\r\n   *   eventBus.fire('my-custom-event', { foo: 'BAR' });\r\n   * });\r\n   *\r\n   * @type {Object}\r\n   */\n  this.get('eventBus').fire('diagram.init');\n}\n\n/**\r\n * Destroys the diagram\r\n *\r\n * @method  Diagram#destroy\r\n */\nDiagram.prototype.destroy = function () {\n  this.get('eventBus').fire('diagram.destroy');\n};\n\n/**\r\n * Clear the diagram, removing all contents.\r\n */\nDiagram.prototype.clear = function () {\n  this.get('eventBus').fire('diagram.clear');\n};","map":{"version":3,"names":["Injector","CoreModule","bootstrap","bootstrapModules","modules","components","hasModule","m","indexOf","addModule","push","visit","__depends__","forEach","__init__","c","injector","e","console","error","stack","createInjector","options","configModule","concat","Diagram","get","invoke","fire","prototype","destroy","clear"],"sources":["C:/Users/sam/final/camunda-react/node_modules/diagram-js/lib/Diagram.js"],"sourcesContent":["import { Injector } from 'didi';\r\n\r\nimport CoreModule from './core';\r\n\r\n\r\n/**\r\n * Bootstrap an injector from a list of modules, instantiating a number of default components\r\n *\r\n * @ignore\r\n * @param {Array<didi.Module>} bootstrapModules\r\n *\r\n * @return {didi.Injector} a injector to use to access the components\r\n */\r\nfunction bootstrap(bootstrapModules) {\r\n\r\n  var modules = [],\r\n      components = [];\r\n\r\n  function hasModule(m) {\r\n    return modules.indexOf(m) >= 0;\r\n  }\r\n\r\n  function addModule(m) {\r\n    modules.push(m);\r\n  }\r\n\r\n  function visit(m) {\r\n    if (hasModule(m)) {\r\n      return;\r\n    }\r\n\r\n    (m.__depends__ || []).forEach(visit);\r\n\r\n    if (hasModule(m)) {\r\n      return;\r\n    }\r\n\r\n    addModule(m);\r\n\r\n    (m.__init__ || []).forEach(function(c) {\r\n      components.push(c);\r\n    });\r\n  }\r\n\r\n  bootstrapModules.forEach(visit);\r\n\r\n  var injector = new Injector(modules);\r\n\r\n  components.forEach(function(c) {\r\n\r\n    try {\r\n\r\n      // eagerly resolve component (fn or string)\r\n      injector[typeof c === 'string' ? 'get' : 'invoke'](c);\r\n    } catch (e) {\r\n      console.error('Failed to instantiate component');\r\n      console.error(e.stack);\r\n\r\n      throw e;\r\n    }\r\n  });\r\n\r\n  return injector;\r\n}\r\n\r\n/**\r\n * Creates an injector from passed options.\r\n *\r\n * @ignore\r\n * @param  {Object} options\r\n * @return {didi.Injector}\r\n */\r\nfunction createInjector(options) {\r\n\r\n  options = options || {};\r\n\r\n  var configModule = {\r\n    'config': ['value', options]\r\n  };\r\n\r\n  var modules = [ configModule, CoreModule ].concat(options.modules || []);\r\n\r\n  return bootstrap(modules);\r\n}\r\n\r\n\r\n/**\r\n * The main diagram-js entry point that bootstraps the diagram with the given\r\n * configuration.\r\n *\r\n * To register extensions with the diagram, pass them as Array<didi.Module> to the constructor.\r\n *\r\n * @class djs.Diagram\r\n * @memberOf djs\r\n * @constructor\r\n *\r\n * @example\r\n *\r\n * <caption>Creating a plug-in that logs whenever a shape is added to the canvas.</caption>\r\n *\r\n * // plug-in implemenentation\r\n * function MyLoggingPlugin(eventBus) {\r\n *   eventBus.on('shape.added', function(event) {\r\n *     console.log('shape ', event.shape, ' was added to the diagram');\r\n *   });\r\n * }\r\n *\r\n * // export as module\r\n * export default {\r\n *   __init__: [ 'myLoggingPlugin' ],\r\n *     myLoggingPlugin: [ 'type', MyLoggingPlugin ]\r\n * };\r\n *\r\n *\r\n * // instantiate the diagram with the new plug-in\r\n *\r\n * import MyLoggingModule from 'path-to-my-logging-plugin';\r\n *\r\n * var diagram = new Diagram({\r\n *   modules: [\r\n *     MyLoggingModule\r\n *   ]\r\n * });\r\n *\r\n * diagram.invoke([ 'canvas', function(canvas) {\r\n *   // add shape to drawing canvas\r\n *   canvas.addShape({ x: 10, y: 10 });\r\n * });\r\n *\r\n * // 'shape ... was added to the diagram' logged to console\r\n *\r\n * @param {Object} options\r\n * @param {Array<didi.Module>} [options.modules] external modules to instantiate with the diagram\r\n * @param {didi.Injector} [injector] an (optional) injector to bootstrap the diagram with\r\n */\r\nexport default function Diagram(options, injector) {\r\n\r\n  // create injector unless explicitly specified\r\n  this.injector = injector = injector || createInjector(options);\r\n\r\n  // API\r\n\r\n  /**\r\n   * Resolves a diagram service\r\n   *\r\n   * @method Diagram#get\r\n   *\r\n   * @param {string} name the name of the diagram service to be retrieved\r\n   * @param {boolean} [strict=true] if false, resolve missing services to null\r\n   */\r\n  this.get = injector.get;\r\n\r\n  /**\r\n   * Executes a function into which diagram services are injected\r\n   *\r\n   * @method Diagram#invoke\r\n   *\r\n   * @param {Function|Object[]} fn the function to resolve\r\n   * @param {Object} locals a number of locals to use to resolve certain dependencies\r\n   */\r\n  this.invoke = injector.invoke;\r\n\r\n  // init\r\n\r\n  // indicate via event\r\n\r\n\r\n  /**\r\n   * An event indicating that all plug-ins are loaded.\r\n   *\r\n   * Use this event to fire other events to interested plug-ins\r\n   *\r\n   * @memberOf Diagram\r\n   *\r\n   * @event diagram.init\r\n   *\r\n   * @example\r\n   *\r\n   * eventBus.on('diagram.init', function() {\r\n   *   eventBus.fire('my-custom-event', { foo: 'BAR' });\r\n   * });\r\n   *\r\n   * @type {Object}\r\n   */\r\n  this.get('eventBus').fire('diagram.init');\r\n}\r\n\r\n\r\n/**\r\n * Destroys the diagram\r\n *\r\n * @method  Diagram#destroy\r\n */\r\nDiagram.prototype.destroy = function() {\r\n  this.get('eventBus').fire('diagram.destroy');\r\n};\r\n\r\n/**\r\n * Clear the diagram, removing all contents.\r\n */\r\nDiagram.prototype.clear = function() {\r\n  this.get('eventBus').fire('diagram.clear');\r\n};\r\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,MAAM;AAE/B,OAAOC,UAAU,MAAM,QAAQ;;AAG/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,SAASA,CAACC,gBAAgB,EAAE;EAEnC,IAAIC,OAAO,GAAG,EAAE;IACZC,UAAU,GAAG,EAAE;EAEnB,SAASC,SAASA,CAACC,CAAC,EAAE;IACpB,OAAOH,OAAO,CAACI,OAAO,CAACD,CAAC,CAAC,IAAI,CAAC;EAChC;EAEA,SAASE,SAASA,CAACF,CAAC,EAAE;IACpBH,OAAO,CAACM,IAAI,CAACH,CAAC,CAAC;EACjB;EAEA,SAASI,KAAKA,CAACJ,CAAC,EAAE;IAChB,IAAID,SAAS,CAACC,CAAC,CAAC,EAAE;MAChB;IACF;IAEA,CAACA,CAAC,CAACK,WAAW,IAAI,EAAE,EAAEC,OAAO,CAACF,KAAK,CAAC;IAEpC,IAAIL,SAAS,CAACC,CAAC,CAAC,EAAE;MAChB;IACF;IAEAE,SAAS,CAACF,CAAC,CAAC;IAEZ,CAACA,CAAC,CAACO,QAAQ,IAAI,EAAE,EAAED,OAAO,CAAC,UAASE,CAAC,EAAE;MACrCV,UAAU,CAACK,IAAI,CAACK,CAAC,CAAC;IACpB,CAAC,CAAC;EACJ;EAEAZ,gBAAgB,CAACU,OAAO,CAACF,KAAK,CAAC;EAE/B,IAAIK,QAAQ,GAAG,IAAIhB,QAAQ,CAACI,OAAO,CAAC;EAEpCC,UAAU,CAACQ,OAAO,CAAC,UAASE,CAAC,EAAE;IAE7B,IAAI;MAEF;MACAC,QAAQ,CAAC,OAAOD,CAAC,KAAK,QAAQ,GAAG,KAAK,GAAG,QAAQ,CAAC,CAACA,CAAC,CAAC;IACvD,CAAC,CAAC,OAAOE,CAAC,EAAE;MACVC,OAAO,CAACC,KAAK,CAAC,iCAAiC,CAAC;MAChDD,OAAO,CAACC,KAAK,CAACF,CAAC,CAACG,KAAK,CAAC;MAEtB,MAAMH,CAAC;IACT;EACF,CAAC,CAAC;EAEF,OAAOD,QAAQ;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASK,cAAcA,CAACC,OAAO,EAAE;EAE/BA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;EAEvB,IAAIC,YAAY,GAAG;IACjB,QAAQ,EAAE,CAAC,OAAO,EAAED,OAAO;EAC7B,CAAC;EAED,IAAIlB,OAAO,GAAG,CAAEmB,YAAY,EAAEtB,UAAU,CAAE,CAACuB,MAAM,CAACF,OAAO,CAAClB,OAAO,IAAI,EAAE,CAAC;EAExE,OAAOF,SAAS,CAACE,OAAO,CAAC;AAC3B;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASqB,OAAOA,CAACH,OAAO,EAAEN,QAAQ,EAAE;EAEjD;EACA,IAAI,CAACA,QAAQ,GAAGA,QAAQ,GAAGA,QAAQ,IAAIK,cAAc,CAACC,OAAO,CAAC;;EAE9D;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACI,GAAG,GAAGV,QAAQ,CAACU,GAAG;;EAEvB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACC,MAAM,GAAGX,QAAQ,CAACW,MAAM;;EAE7B;;EAEA;;EAGA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACD,GAAG,CAAC,UAAU,CAAC,CAACE,IAAI,CAAC,cAAc,CAAC;AAC3C;;AAGA;AACA;AACA;AACA;AACA;AACAH,OAAO,CAACI,SAAS,CAACC,OAAO,GAAG,YAAW;EACrC,IAAI,CAACJ,GAAG,CAAC,UAAU,CAAC,CAACE,IAAI,CAAC,iBAAiB,CAAC;AAC9C,CAAC;;AAED;AACA;AACA;AACAH,OAAO,CAACI,SAAS,CAACE,KAAK,GAAG,YAAW;EACnC,IAAI,CAACL,GAAG,CAAC,UAAU,CAAC,CAACE,IAAI,CAAC,eAAe,CAAC;AAC5C,CAAC"},"metadata":{},"sourceType":"module"}