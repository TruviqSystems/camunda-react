{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sam\\\\final\\\\camunda-react\\\\src\\\\containers\\\\StartProcessPage.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport GenericForm from '../components/GenericForm';\nimport { loadProcessDefinitions, loadFormKey } from '../actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet AppRef = \"A\";\nconst num = () => {\n  const randomnum = Math.floor(Math.random() * 1000) + 1;\n  return randomnum;\n};\nclass StartProcessPage extends Component {\n  componentDidMount() {\n    this.props.loadFormKey(this.props.process);\n    AppRef = AppRef + num();\n    const fetching = async processInstanceStarted => {\n      await fetch(`/process-instance/${processInstanceStarted}`, {\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => response.json()).then(data => {\n        const businessKey = data.businessKey;\n        console.log(`Business key: ${businessKey}`);\n        AppRef = AppRef + businessKey;\n      }).catch(error => console.error(error));\n    };\n  }\n  render() {\n    const {\n      process,\n      formKey,\n      processInstanceStarted\n    } = this.props;\n    if (!formKey && !processInstanceStarted) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading Process Start Form\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this);\n    } else if (processInstanceStarted) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Your Application Submitted.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 41\n        }, this), \"Application Id:\", AppRef]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this);\n    } else {\n      const key = formKey['undefined'].key;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(GenericForm, {\n          formKey: key,\n          processDefinitionKey: process,\n          values: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this);\n    }\n  }\n}\nconst mapStateToProps = (state, ownProps) => {\n  const params = ownProps.match.params;\n  return {\n    ...params,\n    ...state.entities\n  };\n};\nexport default withRouter(connect(mapStateToProps, {\n  loadProcessDefinitions,\n  loadFormKey\n})(StartProcessPage));","map":{"version":3,"names":["React","Component","connect","withRouter","GenericForm","loadProcessDefinitions","loadFormKey","jsxDEV","_jsxDEV","AppRef","num","randomnum","Math","floor","random","StartProcessPage","componentDidMount","props","process","fetching","processInstanceStarted","fetch","headers","Accept","then","response","json","data","businessKey","console","log","catch","error","render","formKey","children","fileName","_jsxFileName","lineNumber","columnNumber","key","processDefinitionKey","values","mapStateToProps","state","ownProps","params","match","entities"],"sources":["C:/Users/sam/final/camunda-react/src/containers/StartProcessPage.js"],"sourcesContent":["import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { withRouter } from 'react-router-dom'\r\nimport GenericForm from '../components/GenericForm'\r\nimport { loadProcessDefinitions, loadFormKey } from '../actions'\r\n\r\nlet AppRef=\"A\"\r\nconst num=()=>{\r\n  const randomnum=Math.floor(Math.random() * 1000) + 1;\r\n  return randomnum\r\n}\r\n\r\nclass StartProcessPage extends Component {\r\n  componentDidMount() {\r\n    this.props.loadFormKey(this.props.process);\r\n    AppRef=AppRef+num()\r\n    const fetching=async (processInstanceStarted)=>{\r\n      await fetch(`/process-instance/${processInstanceStarted}`, {\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      })\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          const businessKey = data.businessKey;\r\n          console.log(`Business key: ${businessKey}`);\r\n          AppRef=AppRef+businessKey\r\n        })\r\n        .catch((error) => console.error(error));\r\n      \r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { process, formKey, processInstanceStarted} = this.props\r\n\r\n\r\n    if (!formKey && !processInstanceStarted) {\r\n      return (\r\n        <div>Loading Process Start Form</div>\r\n      )\r\n    } else if (processInstanceStarted) {\r\n      return (\r\n        <div>Your Application Submitted.<br/>Application Id:{AppRef}</div>\r\n      )\r\n    } else {\r\n      const key = formKey['undefined'].key\r\n      return (\r\n        <div>\r\n          <GenericForm formKey={key} processDefinitionKey={process} values/>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n}\r\nconst mapStateToProps = (state, ownProps) => {\r\n  const params = ownProps.match.params\r\n  return {\r\n    ...params,\r\n    ...state.entities\r\n  }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, {\r\n  loadProcessDefinitions,\r\n  loadFormKey\r\n})(StartProcessPage))\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}