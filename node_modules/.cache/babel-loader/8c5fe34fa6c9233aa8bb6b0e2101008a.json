{"ast":null,"code":"var ELEMENT_ID = 'data-element-id';\nimport { attr as svgAttr } from 'tiny-svg';\n\n/**\r\n * @class\r\n *\r\n * A registry that keeps track of all shapes in the diagram.\r\n */\nexport default function ElementRegistry(eventBus) {\n  this._elements = {};\n  this._eventBus = eventBus;\n}\nElementRegistry.$inject = ['eventBus'];\n\n/**\r\n * Register a pair of (element, gfx, (secondaryGfx)).\r\n *\r\n * @param {djs.model.Base} element\r\n * @param {SVGElement} gfx\r\n * @param {SVGElement} [secondaryGfx] optional other element to register, too\r\n */\nElementRegistry.prototype.add = function (element, gfx, secondaryGfx) {\n  var id = element.id;\n  this._validateId(id);\n\n  // associate dom node with element\n  svgAttr(gfx, ELEMENT_ID, id);\n  if (secondaryGfx) {\n    svgAttr(secondaryGfx, ELEMENT_ID, id);\n  }\n  this._elements[id] = {\n    element: element,\n    gfx: gfx,\n    secondaryGfx: secondaryGfx\n  };\n};\n\n/**\r\n * Removes an element from the registry.\r\n *\r\n * @param {djs.model.Base} element\r\n */\nElementRegistry.prototype.remove = function (element) {\n  var elements = this._elements,\n    id = element.id || element,\n    container = id && elements[id];\n  if (container) {\n    // unset element id on gfx\n    svgAttr(container.gfx, ELEMENT_ID, '');\n    if (container.secondaryGfx) {\n      svgAttr(container.secondaryGfx, ELEMENT_ID, '');\n    }\n    delete elements[id];\n  }\n};\n\n/**\r\n * Update the id of an element\r\n *\r\n * @param {djs.model.Base} element\r\n * @param {string} newId\r\n */\nElementRegistry.prototype.updateId = function (element, newId) {\n  this._validateId(newId);\n  if (typeof element === 'string') {\n    element = this.get(element);\n  }\n  this._eventBus.fire('element.updateId', {\n    element: element,\n    newId: newId\n  });\n  var gfx = this.getGraphics(element),\n    secondaryGfx = this.getGraphics(element, true);\n  this.remove(element);\n  element.id = newId;\n  this.add(element, gfx, secondaryGfx);\n};\n\n/**\r\n * Update the graphics of an element\r\n *\r\n * @param {djs.model.Base} element\r\n * @param {SVGElement} gfx\r\n * @param {boolean} [secondary=false] whether to update the secondary connected element\r\n */\nElementRegistry.prototype.updateGraphics = function (filter, gfx, secondary) {\n  var id = filter.id || filter;\n  var container = this._elements[id];\n  if (secondary) {\n    container.secondaryGfx = gfx;\n  } else {\n    container.gfx = gfx;\n  }\n  svgAttr(gfx, ELEMENT_ID, id);\n  return gfx;\n};\n\n/**\r\n * Return the model element for a given id or graphics.\r\n *\r\n * @example\r\n *\r\n * elementRegistry.get('SomeElementId_1');\r\n * elementRegistry.get(gfx);\r\n *\r\n *\r\n * @param {string|SVGElement} filter for selecting the element\r\n *\r\n * @return {djs.model.Base}\r\n */\nElementRegistry.prototype.get = function (filter) {\n  var id;\n  if (typeof filter === 'string') {\n    id = filter;\n  } else {\n    id = filter && svgAttr(filter, ELEMENT_ID);\n  }\n  var container = this._elements[id];\n  return container && container.element;\n};\n\n/**\r\n * Return all elements that match a given filter function.\r\n *\r\n * @param {Function} fn\r\n *\r\n * @return {Array<djs.model.Base>}\r\n */\nElementRegistry.prototype.filter = function (fn) {\n  var filtered = [];\n  this.forEach(function (element, gfx) {\n    if (fn(element, gfx)) {\n      filtered.push(element);\n    }\n  });\n  return filtered;\n};\n\n/**\r\n * Return the first element that satisfies the provided testing function.\r\n *\r\n * @param {Function} fn\r\n *\r\n * @return {djs.model.Base}\r\n */\nElementRegistry.prototype.find = function (fn) {\n  var map = this._elements,\n    keys = Object.keys(map);\n  for (var i = 0; i < keys.length; i++) {\n    var id = keys[i],\n      container = map[id],\n      element = container.element,\n      gfx = container.gfx;\n    if (fn(element, gfx)) {\n      return element;\n    }\n  }\n};\n\n/**\r\n * Return all rendered model elements.\r\n *\r\n * @return {Array<djs.model.Base>}\r\n */\nElementRegistry.prototype.getAll = function () {\n  return this.filter(function (e) {\n    return e;\n  });\n};\n\n/**\r\n * Iterate over all diagram elements.\r\n *\r\n * @param {Function} fn\r\n */\nElementRegistry.prototype.forEach = function (fn) {\n  var map = this._elements;\n  Object.keys(map).forEach(function (id) {\n    var container = map[id],\n      element = container.element,\n      gfx = container.gfx;\n    return fn(element, gfx);\n  });\n};\n\n/**\r\n * Return the graphical representation of an element or its id.\r\n *\r\n * @example\r\n * elementRegistry.getGraphics('SomeElementId_1');\r\n * elementRegistry.getGraphics(rootElement); // <g ...>\r\n *\r\n * elementRegistry.getGraphics(rootElement, true); // <svg ...>\r\n *\r\n *\r\n * @param {string|djs.model.Base} filter\r\n * @param {boolean} [secondary=false] whether to return the secondary connected element\r\n *\r\n * @return {SVGElement}\r\n */\nElementRegistry.prototype.getGraphics = function (filter, secondary) {\n  var id = filter.id || filter;\n  var container = this._elements[id];\n  return container && (secondary ? container.secondaryGfx : container.gfx);\n};\n\n/**\r\n * Validate the suitability of the given id and signals a problem\r\n * with an exception.\r\n *\r\n * @param {string} id\r\n *\r\n * @throws {Error} if id is empty or already assigned\r\n */\nElementRegistry.prototype._validateId = function (id) {\n  if (!id) {\n    throw new Error('element must have an id');\n  }\n  if (this._elements[id]) {\n    throw new Error('element with id ' + id + ' already added');\n  }\n};","map":{"version":3,"names":["ELEMENT_ID","attr","svgAttr","ElementRegistry","eventBus","_elements","_eventBus","$inject","prototype","add","element","gfx","secondaryGfx","id","_validateId","remove","elements","container","updateId","newId","get","fire","getGraphics","updateGraphics","filter","secondary","fn","filtered","forEach","push","find","map","keys","Object","i","length","getAll","e","Error"],"sources":["C:/Users/sam/final/camunda-react/node_modules/diagram-js/lib/core/ElementRegistry.js"],"sourcesContent":["var ELEMENT_ID = 'data-element-id';\r\n\r\nimport { attr as svgAttr } from 'tiny-svg';\r\n\r\n\r\n/**\r\n * @class\r\n *\r\n * A registry that keeps track of all shapes in the diagram.\r\n */\r\nexport default function ElementRegistry(eventBus) {\r\n  this._elements = {};\r\n\r\n  this._eventBus = eventBus;\r\n}\r\n\r\nElementRegistry.$inject = [ 'eventBus' ];\r\n\r\n/**\r\n * Register a pair of (element, gfx, (secondaryGfx)).\r\n *\r\n * @param {djs.model.Base} element\r\n * @param {SVGElement} gfx\r\n * @param {SVGElement} [secondaryGfx] optional other element to register, too\r\n */\r\nElementRegistry.prototype.add = function(element, gfx, secondaryGfx) {\r\n\r\n  var id = element.id;\r\n\r\n  this._validateId(id);\r\n\r\n  // associate dom node with element\r\n  svgAttr(gfx, ELEMENT_ID, id);\r\n\r\n  if (secondaryGfx) {\r\n    svgAttr(secondaryGfx, ELEMENT_ID, id);\r\n  }\r\n\r\n  this._elements[id] = { element: element, gfx: gfx, secondaryGfx: secondaryGfx };\r\n};\r\n\r\n/**\r\n * Removes an element from the registry.\r\n *\r\n * @param {djs.model.Base} element\r\n */\r\nElementRegistry.prototype.remove = function(element) {\r\n  var elements = this._elements,\r\n      id = element.id || element,\r\n      container = id && elements[id];\r\n\r\n  if (container) {\r\n\r\n    // unset element id on gfx\r\n    svgAttr(container.gfx, ELEMENT_ID, '');\r\n\r\n    if (container.secondaryGfx) {\r\n      svgAttr(container.secondaryGfx, ELEMENT_ID, '');\r\n    }\r\n\r\n    delete elements[id];\r\n  }\r\n};\r\n\r\n/**\r\n * Update the id of an element\r\n *\r\n * @param {djs.model.Base} element\r\n * @param {string} newId\r\n */\r\nElementRegistry.prototype.updateId = function(element, newId) {\r\n\r\n  this._validateId(newId);\r\n\r\n  if (typeof element === 'string') {\r\n    element = this.get(element);\r\n  }\r\n\r\n  this._eventBus.fire('element.updateId', {\r\n    element: element,\r\n    newId: newId\r\n  });\r\n\r\n  var gfx = this.getGraphics(element),\r\n      secondaryGfx = this.getGraphics(element, true);\r\n\r\n  this.remove(element);\r\n\r\n  element.id = newId;\r\n\r\n  this.add(element, gfx, secondaryGfx);\r\n};\r\n\r\n/**\r\n * Update the graphics of an element\r\n *\r\n * @param {djs.model.Base} element\r\n * @param {SVGElement} gfx\r\n * @param {boolean} [secondary=false] whether to update the secondary connected element\r\n */\r\nElementRegistry.prototype.updateGraphics = function(filter, gfx, secondary) {\r\n  var id = filter.id || filter;\r\n\r\n  var container = this._elements[id];\r\n\r\n  if (secondary) {\r\n    container.secondaryGfx = gfx;\r\n  } else {\r\n    container.gfx = gfx;\r\n  }\r\n\r\n  svgAttr(gfx, ELEMENT_ID, id);\r\n\r\n  return gfx;\r\n};\r\n\r\n/**\r\n * Return the model element for a given id or graphics.\r\n *\r\n * @example\r\n *\r\n * elementRegistry.get('SomeElementId_1');\r\n * elementRegistry.get(gfx);\r\n *\r\n *\r\n * @param {string|SVGElement} filter for selecting the element\r\n *\r\n * @return {djs.model.Base}\r\n */\r\nElementRegistry.prototype.get = function(filter) {\r\n  var id;\r\n\r\n  if (typeof filter === 'string') {\r\n    id = filter;\r\n  } else {\r\n    id = filter && svgAttr(filter, ELEMENT_ID);\r\n  }\r\n\r\n  var container = this._elements[id];\r\n  return container && container.element;\r\n};\r\n\r\n/**\r\n * Return all elements that match a given filter function.\r\n *\r\n * @param {Function} fn\r\n *\r\n * @return {Array<djs.model.Base>}\r\n */\r\nElementRegistry.prototype.filter = function(fn) {\r\n\r\n  var filtered = [];\r\n\r\n  this.forEach(function(element, gfx) {\r\n    if (fn(element, gfx)) {\r\n      filtered.push(element);\r\n    }\r\n  });\r\n\r\n  return filtered;\r\n};\r\n\r\n/**\r\n * Return the first element that satisfies the provided testing function.\r\n *\r\n * @param {Function} fn\r\n *\r\n * @return {djs.model.Base}\r\n */\r\nElementRegistry.prototype.find = function(fn) {\r\n  var map = this._elements,\r\n      keys = Object.keys(map);\r\n\r\n  for (var i = 0; i < keys.length; i++) {\r\n    var id = keys[i],\r\n        container = map[id],\r\n        element = container.element,\r\n        gfx = container.gfx;\r\n\r\n    if (fn(element, gfx)) {\r\n      return element;\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Return all rendered model elements.\r\n *\r\n * @return {Array<djs.model.Base>}\r\n */\r\nElementRegistry.prototype.getAll = function() {\r\n  return this.filter(function(e) { return e; });\r\n};\r\n\r\n/**\r\n * Iterate over all diagram elements.\r\n *\r\n * @param {Function} fn\r\n */\r\nElementRegistry.prototype.forEach = function(fn) {\r\n\r\n  var map = this._elements;\r\n\r\n  Object.keys(map).forEach(function(id) {\r\n    var container = map[id],\r\n        element = container.element,\r\n        gfx = container.gfx;\r\n\r\n    return fn(element, gfx);\r\n  });\r\n};\r\n\r\n/**\r\n * Return the graphical representation of an element or its id.\r\n *\r\n * @example\r\n * elementRegistry.getGraphics('SomeElementId_1');\r\n * elementRegistry.getGraphics(rootElement); // <g ...>\r\n *\r\n * elementRegistry.getGraphics(rootElement, true); // <svg ...>\r\n *\r\n *\r\n * @param {string|djs.model.Base} filter\r\n * @param {boolean} [secondary=false] whether to return the secondary connected element\r\n *\r\n * @return {SVGElement}\r\n */\r\nElementRegistry.prototype.getGraphics = function(filter, secondary) {\r\n  var id = filter.id || filter;\r\n\r\n  var container = this._elements[id];\r\n  return container && (secondary ? container.secondaryGfx : container.gfx);\r\n};\r\n\r\n/**\r\n * Validate the suitability of the given id and signals a problem\r\n * with an exception.\r\n *\r\n * @param {string} id\r\n *\r\n * @throws {Error} if id is empty or already assigned\r\n */\r\nElementRegistry.prototype._validateId = function(id) {\r\n  if (!id) {\r\n    throw new Error('element must have an id');\r\n  }\r\n\r\n  if (this._elements[id]) {\r\n    throw new Error('element with id ' + id + ' already added');\r\n  }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}