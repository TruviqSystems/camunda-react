{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sam\\\\final\\\\camunda-react\\\\src\\\\containers\\\\StartProcessListPage.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter, Link } from 'react-router-dom';\nimport { Container, Header } from 'semantic-ui-react';\nimport BPMNDiagram from '../components/BPMNDiagram';\nimport List from '../components/List';\nimport { loadProcessDefinitionsWithXML } from '../actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass StartProcessListPage extends Component {\n  componentWillMount() {\n    this.props.loadProcessDefinitionsWithXML();\n  }\n  renderProcess(process) {\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        to: `/startProcess/key/${process.key}`,\n        children: [process.name, \" - Version \", process.version]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(BPMNDiagram, {\n        xml: process.xml\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 7\n      }, this)]\n    }, process.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 12\n    }, this);\n  }\n  render() {\n    console.log(this.props);\n    const {\n      processDefinition,\n      processDefinitionXML\n    } = this.props;\n    if (!processDefinition) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading process definitions...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 14\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this);\n    } else {\n      Object.keys(processDefinition).forEach(id => {\n        if (processDefinitionXML && processDefinitionXML[id]) {\n          processDefinition[id].xml = processDefinitionXML[id].bpmn20Xml;\n        }\n      });\n      return /*#__PURE__*/_jsxDEV(Container, {\n        text: true,\n        children: [/*#__PURE__*/_jsxDEV(Header, {\n          as: \"h2\",\n          children: \"Choose process to start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(List, {\n          renderItem: this.renderProcess,\n          items: processDefinition,\n          loadingLabel: `Loading process definitions...`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this);\n    }\n  }\n}\nconst mapStateToProps = (state, ownProps) => {\n  const params = ownProps.match.params;\n  return {\n    ...params,\n    ...state.entities\n  };\n};\nexport default withRouter(connect(mapStateToProps, {\n  loadProcessDefinitionsWithXML\n})(StartProcessListPage));","map":{"version":3,"names":["React","Component","connect","withRouter","Link","Container","Header","BPMNDiagram","List","loadProcessDefinitionsWithXML","jsxDEV","_jsxDEV","StartProcessListPage","componentWillMount","props","renderProcess","process","children","to","key","name","version","fileName","_jsxFileName","lineNumber","columnNumber","xml","id","render","console","log","processDefinition","processDefinitionXML","Object","keys","forEach","bpmn20Xml","text","as","renderItem","items","loadingLabel","mapStateToProps","state","ownProps","params","match","entities"],"sources":["C:/Users/sam/final/camunda-react/src/containers/StartProcessListPage.js"],"sourcesContent":["import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { withRouter, Link } from 'react-router-dom'\r\nimport { Container, Header } from 'semantic-ui-react'\r\nimport BPMNDiagram from '../components/BPMNDiagram'\r\nimport List from '../components/List'\r\nimport { loadProcessDefinitionsWithXML } from '../actions'\r\n\r\nclass StartProcessListPage extends Component {\r\n  componentWillMount() {\r\n    this.props.loadProcessDefinitionsWithXML();\r\n  }\r\n\r\n  renderProcess(process) {\r\n    return <li key={process.id}>\r\n      <Link to={`/startProcess/key/${process.key}`}>{process.name} - Version {process.version}</Link>\r\n      <BPMNDiagram xml={process.xml}></BPMNDiagram>\r\n    </li>\r\n  }\r\n\r\n  render() {\r\n    console.log(this.props)\r\n    const { processDefinition, processDefinitionXML } = this.props\r\n\r\n    if (!processDefinition) {\r\n      return (\r\n        <div><p>Loading process definitions...</p></div>\r\n      )\r\n    } else {\r\n      Object.keys(processDefinition).forEach((id) => {\r\n        if (processDefinitionXML && processDefinitionXML[id]) {\r\n          processDefinition[id].xml = processDefinitionXML[id].bpmn20Xml\r\n        }\r\n      })\r\n\r\n      return (\r\n        <Container text>\r\n          <Header as='h2'>Choose process to start</Header>\r\n          <List renderItem={this.renderProcess}\r\n            items={processDefinition}\r\n            loadingLabel={`Loading process definitions...`}\r\n            />\r\n        </Container>\r\n      )\r\n    }\r\n  }\r\n\r\n}\r\nconst mapStateToProps = (state, ownProps) => {\r\n  const params = ownProps.match.params\r\n  return {\r\n    ...params,\r\n    ...state.entities\r\n  }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, {\r\n  loadProcessDefinitionsWithXML\r\n})(StartProcessListPage))\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}