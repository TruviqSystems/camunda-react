{"ast":null,"code":"import { assign } from 'min-dash';\nimport inherits from 'inherits';\nimport Refs from 'object-refs';\nvar parentRefs = new Refs({\n    name: 'children',\n    enumerable: true,\n    collection: true\n  }, {\n    name: 'parent'\n  }),\n  labelRefs = new Refs({\n    name: 'labels',\n    enumerable: true,\n    collection: true\n  }, {\n    name: 'labelTarget'\n  }),\n  attacherRefs = new Refs({\n    name: 'attachers',\n    collection: true\n  }, {\n    name: 'host'\n  }),\n  outgoingRefs = new Refs({\n    name: 'outgoing',\n    collection: true\n  }, {\n    name: 'source'\n  }),\n  incomingRefs = new Refs({\n    name: 'incoming',\n    collection: true\n  }, {\n    name: 'target'\n  });\n\n/**\n * @namespace djs.model\n */\n\n/**\n * @memberOf djs.model\n */\n\n/**\n * The basic graphical representation\n *\n * @class\n *\n * @abstract\n */\nexport function Base() {\n  /**\n   * The object that backs up the shape\n   *\n   * @name Base#businessObject\n   * @type Object\n   */\n  Object.defineProperty(this, 'businessObject', {\n    writable: true\n  });\n\n  /**\n   * Single label support, will mapped to multi label array\n   *\n   * @name Base#label\n   * @type Object\n   */\n  Object.defineProperty(this, 'label', {\n    get: function () {\n      return this.labels[0];\n    },\n    set: function (newLabel) {\n      var label = this.label,\n        labels = this.labels;\n      if (!newLabel && label) {\n        labels.remove(label);\n      } else {\n        labels.add(newLabel, 0);\n      }\n    }\n  });\n\n  /**\n   * The parent shape\n   *\n   * @name Base#parent\n   * @type Shape\n   */\n  parentRefs.bind(this, 'parent');\n\n  /**\n   * The list of labels\n   *\n   * @name Base#labels\n   * @type Label\n   */\n  labelRefs.bind(this, 'labels');\n\n  /**\n   * The list of outgoing connections\n   *\n   * @name Base#outgoing\n   * @type Array<Connection>\n   */\n  outgoingRefs.bind(this, 'outgoing');\n\n  /**\n   * The list of incoming connections\n   *\n   * @name Base#incoming\n   * @type Array<Connection>\n   */\n  incomingRefs.bind(this, 'incoming');\n}\n\n/**\n * A graphical object\n *\n * @class\n * @constructor\n *\n * @extends Base\n */\nexport function Shape() {\n  Base.call(this);\n\n  /**\n   * Indicates frame shapes\n   *\n   * @name Shape#isFrame\n   * @type boolean\n   */\n\n  /**\n   * The list of children\n   *\n   * @name Shape#children\n   * @type Array<Base>\n   */\n  parentRefs.bind(this, 'children');\n\n  /**\n   * @name Shape#host\n   * @type Shape\n   */\n  attacherRefs.bind(this, 'host');\n\n  /**\n   * @name Shape#attachers\n   * @type Shape\n   */\n  attacherRefs.bind(this, 'attachers');\n}\ninherits(Shape, Base);\n\n/**\n * A root graphical object\n *\n * @class\n * @constructor\n *\n * @extends Shape\n */\nexport function Root() {\n  Shape.call(this);\n}\ninherits(Root, Shape);\n\n/**\n * A label for an element\n *\n * @class\n * @constructor\n *\n * @extends Shape\n */\nexport function Label() {\n  Shape.call(this);\n\n  /**\n   * The labeled element\n   *\n   * @name Label#labelTarget\n   * @type Base\n   */\n  labelRefs.bind(this, 'labelTarget');\n}\ninherits(Label, Shape);\n\n/**\n * A connection between two elements\n *\n * @class\n * @constructor\n *\n * @extends Base\n */\nexport function Connection() {\n  Base.call(this);\n\n  /**\n   * The element this connection originates from\n   *\n   * @name Connection#source\n   * @type Base\n   */\n  outgoingRefs.bind(this, 'source');\n\n  /**\n   * The element this connection points to\n   *\n   * @name Connection#target\n   * @type Base\n   */\n  incomingRefs.bind(this, 'target');\n}\ninherits(Connection, Base);\nvar types = {\n  connection: Connection,\n  shape: Shape,\n  label: Label,\n  root: Root\n};\n\n/**\n * Creates a new model element of the specified type\n *\n * @method create\n *\n * @example\n *\n * var shape1 = Model.create('shape', { x: 10, y: 10, width: 100, height: 100 });\n * var shape2 = Model.create('shape', { x: 210, y: 210, width: 100, height: 100 });\n *\n * var connection = Model.create('connection', { waypoints: [ { x: 110, y: 55 }, {x: 210, y: 55 } ] });\n *\n * @param  {string} type lower-cased model name\n * @param  {Object} attrs attributes to initialize the new model instance with\n *\n * @return {Base} the new model instance\n */\nexport function create(type, attrs) {\n  var Type = types[type];\n  if (!Type) {\n    throw new Error('unknown type: <' + type + '>');\n  }\n  return assign(new Type(), attrs);\n}","map":{"version":3,"names":["assign","inherits","Refs","parentRefs","name","enumerable","collection","labelRefs","attacherRefs","outgoingRefs","incomingRefs","Base","Object","defineProperty","writable","get","labels","set","newLabel","label","remove","add","bind","Shape","call","Root","Label","Connection","types","connection","shape","root","create","type","attrs","Type","Error"],"sources":["C:/Users/KondalaRaoThota/Truviq_Camunda/camunda-react/node_modules/diagram-js/lib/model/index.js"],"sourcesContent":["import { assign } from 'min-dash';\nimport inherits from 'inherits';\n\nimport Refs from 'object-refs';\n\nvar parentRefs = new Refs({ name: 'children', enumerable: true, collection: true }, { name: 'parent' }),\n    labelRefs = new Refs({ name: 'labels', enumerable: true, collection: true }, { name: 'labelTarget' }),\n    attacherRefs = new Refs({ name: 'attachers', collection: true }, { name: 'host' }),\n    outgoingRefs = new Refs({ name: 'outgoing', collection: true }, { name: 'source' }),\n    incomingRefs = new Refs({ name: 'incoming', collection: true }, { name: 'target' });\n\n/**\n * @namespace djs.model\n */\n\n/**\n * @memberOf djs.model\n */\n\n/**\n * The basic graphical representation\n *\n * @class\n *\n * @abstract\n */\nexport function Base() {\n\n  /**\n   * The object that backs up the shape\n   *\n   * @name Base#businessObject\n   * @type Object\n   */\n  Object.defineProperty(this, 'businessObject', {\n    writable: true\n  });\n\n\n  /**\n   * Single label support, will mapped to multi label array\n   *\n   * @name Base#label\n   * @type Object\n   */\n  Object.defineProperty(this, 'label', {\n    get: function() {\n      return this.labels[0];\n    },\n    set: function(newLabel) {\n\n      var label = this.label,\n          labels = this.labels;\n\n      if (!newLabel && label) {\n        labels.remove(label);\n      } else {\n        labels.add(newLabel, 0);\n      }\n    }\n  });\n\n  /**\n   * The parent shape\n   *\n   * @name Base#parent\n   * @type Shape\n   */\n  parentRefs.bind(this, 'parent');\n\n  /**\n   * The list of labels\n   *\n   * @name Base#labels\n   * @type Label\n   */\n  labelRefs.bind(this, 'labels');\n\n  /**\n   * The list of outgoing connections\n   *\n   * @name Base#outgoing\n   * @type Array<Connection>\n   */\n  outgoingRefs.bind(this, 'outgoing');\n\n  /**\n   * The list of incoming connections\n   *\n   * @name Base#incoming\n   * @type Array<Connection>\n   */\n  incomingRefs.bind(this, 'incoming');\n}\n\n\n/**\n * A graphical object\n *\n * @class\n * @constructor\n *\n * @extends Base\n */\nexport function Shape() {\n  Base.call(this);\n\n  /**\n   * Indicates frame shapes\n   *\n   * @name Shape#isFrame\n   * @type boolean\n   */\n\n  /**\n   * The list of children\n   *\n   * @name Shape#children\n   * @type Array<Base>\n   */\n  parentRefs.bind(this, 'children');\n\n  /**\n   * @name Shape#host\n   * @type Shape\n   */\n  attacherRefs.bind(this, 'host');\n\n  /**\n   * @name Shape#attachers\n   * @type Shape\n   */\n  attacherRefs.bind(this, 'attachers');\n}\n\ninherits(Shape, Base);\n\n\n/**\n * A root graphical object\n *\n * @class\n * @constructor\n *\n * @extends Shape\n */\nexport function Root() {\n  Shape.call(this);\n}\n\ninherits(Root, Shape);\n\n\n/**\n * A label for an element\n *\n * @class\n * @constructor\n *\n * @extends Shape\n */\nexport function Label() {\n  Shape.call(this);\n\n  /**\n   * The labeled element\n   *\n   * @name Label#labelTarget\n   * @type Base\n   */\n  labelRefs.bind(this, 'labelTarget');\n}\n\ninherits(Label, Shape);\n\n\n/**\n * A connection between two elements\n *\n * @class\n * @constructor\n *\n * @extends Base\n */\nexport function Connection() {\n  Base.call(this);\n\n  /**\n   * The element this connection originates from\n   *\n   * @name Connection#source\n   * @type Base\n   */\n  outgoingRefs.bind(this, 'source');\n\n  /**\n   * The element this connection points to\n   *\n   * @name Connection#target\n   * @type Base\n   */\n  incomingRefs.bind(this, 'target');\n}\n\ninherits(Connection, Base);\n\n\nvar types = {\n  connection: Connection,\n  shape: Shape,\n  label: Label,\n  root: Root\n};\n\n/**\n * Creates a new model element of the specified type\n *\n * @method create\n *\n * @example\n *\n * var shape1 = Model.create('shape', { x: 10, y: 10, width: 100, height: 100 });\n * var shape2 = Model.create('shape', { x: 210, y: 210, width: 100, height: 100 });\n *\n * var connection = Model.create('connection', { waypoints: [ { x: 110, y: 55 }, {x: 210, y: 55 } ] });\n *\n * @param  {string} type lower-cased model name\n * @param  {Object} attrs attributes to initialize the new model instance with\n *\n * @return {Base} the new model instance\n */\nexport function create(type, attrs) {\n  var Type = types[type];\n  if (!Type) {\n    throw new Error('unknown type: <' + type + '>');\n  }\n  return assign(new Type(), attrs);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}