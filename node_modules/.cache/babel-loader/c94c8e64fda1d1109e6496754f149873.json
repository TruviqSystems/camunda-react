{"ast":null,"code":"var asciiWords = require('./_asciiWords'),\n  hasUnicodeWord = require('./_hasUnicodeWord'),\n  toString = require('./toString'),\n  unicodeWords = require('./_unicodeWords');\n\n/**\r\n * Splits `string` into an array of its words.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 3.0.0\r\n * @category String\r\n * @param {string} [string=''] The string to inspect.\r\n * @param {RegExp|string} [pattern] The pattern to match words.\r\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\r\n * @returns {Array} Returns the words of `string`.\r\n * @example\r\n *\r\n * _.words('fred, barney, & pebbles');\r\n * // => ['fred', 'barney', 'pebbles']\r\n *\r\n * _.words('fred, barney, & pebbles', /[^, ]+/g);\r\n * // => ['fred', 'barney', '&', 'pebbles']\r\n */\nfunction words(string, pattern, guard) {\n  string = toString(string);\n  pattern = guard ? undefined : pattern;\n  if (pattern === undefined) {\n    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);\n  }\n  return string.match(pattern) || [];\n}\nmodule.exports = words;","map":{"version":3,"names":["asciiWords","require","hasUnicodeWord","toString","unicodeWords","words","string","pattern","guard","undefined","match","module","exports"],"sources":["C:/Users/sam/final/camunda-react/node_modules/lodash/words.js"],"sourcesContent":["var asciiWords = require('./_asciiWords'),\r\n    hasUnicodeWord = require('./_hasUnicodeWord'),\r\n    toString = require('./toString'),\r\n    unicodeWords = require('./_unicodeWords');\r\n\r\n/**\r\n * Splits `string` into an array of its words.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 3.0.0\r\n * @category String\r\n * @param {string} [string=''] The string to inspect.\r\n * @param {RegExp|string} [pattern] The pattern to match words.\r\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\r\n * @returns {Array} Returns the words of `string`.\r\n * @example\r\n *\r\n * _.words('fred, barney, & pebbles');\r\n * // => ['fred', 'barney', 'pebbles']\r\n *\r\n * _.words('fred, barney, & pebbles', /[^, ]+/g);\r\n * // => ['fred', 'barney', '&', 'pebbles']\r\n */\r\nfunction words(string, pattern, guard) {\r\n  string = toString(string);\r\n  pattern = guard ? undefined : pattern;\r\n\r\n  if (pattern === undefined) {\r\n    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);\r\n  }\r\n  return string.match(pattern) || [];\r\n}\r\n\r\nmodule.exports = words;\r\n"],"mappings":"AAAA,IAAIA,UAAU,GAAGC,OAAO,CAAC,eAAe,CAAC;EACrCC,cAAc,GAAGD,OAAO,CAAC,mBAAmB,CAAC;EAC7CE,QAAQ,GAAGF,OAAO,CAAC,YAAY,CAAC;EAChCG,YAAY,GAAGH,OAAO,CAAC,iBAAiB,CAAC;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASI,KAAKA,CAACC,MAAM,EAAEC,OAAO,EAAEC,KAAK,EAAE;EACrCF,MAAM,GAAGH,QAAQ,CAACG,MAAM,CAAC;EACzBC,OAAO,GAAGC,KAAK,GAAGC,SAAS,GAAGF,OAAO;EAErC,IAAIA,OAAO,KAAKE,SAAS,EAAE;IACzB,OAAOP,cAAc,CAACI,MAAM,CAAC,GAAGF,YAAY,CAACE,MAAM,CAAC,GAAGN,UAAU,CAACM,MAAM,CAAC;EAC3E;EACA,OAAOA,MAAM,CAACI,KAAK,CAACH,OAAO,CAAC,IAAI,EAAE;AACpC;AAEAI,MAAM,CAACC,OAAO,GAAGP,KAAK"},"metadata":{},"sourceType":"script"}