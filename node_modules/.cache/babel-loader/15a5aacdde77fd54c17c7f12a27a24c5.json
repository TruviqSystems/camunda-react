{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { customPropTypes, getElementType, getUnhandledProps, META } from '../../lib';\n\n/**\r\n * A dropdown menu can contain dividers to separate related content.\r\n */\nfunction DropdownDivider(props) {\n  var className = props.className;\n  var classes = cx('divider', className);\n  var rest = getUnhandledProps(DropdownDivider, props);\n  var ElementType = getElementType(DropdownDivider, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }));\n}\nDropdownDivider.handledProps = ['as', 'className'];\nDropdownDivider._meta = {\n  name: 'DropdownDivider',\n  parent: 'Dropdown',\n  type: META.TYPES.MODULE\n};\nDropdownDivider.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n  /** Additional classes. */\n  className: PropTypes.string\n} : {};\nexport default DropdownDivider;","map":{"version":3,"names":["_extends","cx","PropTypes","React","customPropTypes","getElementType","getUnhandledProps","META","DropdownDivider","props","className","classes","rest","ElementType","createElement","handledProps","_meta","name","parent","type","TYPES","MODULE","propTypes","process","env","NODE_ENV","as","string"],"sources":["C:/Users/sam/final/camunda-react/node_modules/react-semantic-redux-form/node_modules/semantic-ui-react/dist/es/modules/Dropdown/DropdownDivider.js"],"sourcesContent":["import _extends from 'babel-runtime/helpers/extends';\r\nimport cx from 'classnames';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\nimport { customPropTypes, getElementType, getUnhandledProps, META } from '../../lib';\r\n\r\n/**\r\n * A dropdown menu can contain dividers to separate related content.\r\n */\r\nfunction DropdownDivider(props) {\r\n  var className = props.className;\r\n\r\n  var classes = cx('divider', className);\r\n  var rest = getUnhandledProps(DropdownDivider, props);\r\n  var ElementType = getElementType(DropdownDivider, props);\r\n\r\n  return React.createElement(ElementType, _extends({}, rest, { className: classes }));\r\n}\r\n\r\nDropdownDivider.handledProps = ['as', 'className'];\r\nDropdownDivider._meta = {\r\n  name: 'DropdownDivider',\r\n  parent: 'Dropdown',\r\n  type: META.TYPES.MODULE\r\n};\r\n\r\nDropdownDivider.propTypes = process.env.NODE_ENV !== \"production\" ? {\r\n  /** An element type to render as (string or function). */\r\n  as: customPropTypes.as,\r\n\r\n  /** Additional classes. */\r\n  className: PropTypes.string\r\n} : {};\r\n\r\nexport default DropdownDivider;"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,+BAA+B;AACpD,OAAOC,EAAE,MAAM,YAAY;AAC3B,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,KAAK,MAAM,OAAO;AAEzB,SAASC,eAAe,EAAEC,cAAc,EAAEC,iBAAiB,EAAEC,IAAI,QAAQ,WAAW;;AAEpF;AACA;AACA;AACA,SAASC,eAAeA,CAACC,KAAK,EAAE;EAC9B,IAAIC,SAAS,GAAGD,KAAK,CAACC,SAAS;EAE/B,IAAIC,OAAO,GAAGV,EAAE,CAAC,SAAS,EAAES,SAAS,CAAC;EACtC,IAAIE,IAAI,GAAGN,iBAAiB,CAACE,eAAe,EAAEC,KAAK,CAAC;EACpD,IAAII,WAAW,GAAGR,cAAc,CAACG,eAAe,EAAEC,KAAK,CAAC;EAExD,OAAON,KAAK,CAACW,aAAa,CAACD,WAAW,EAAEb,QAAQ,CAAC,CAAC,CAAC,EAAEY,IAAI,EAAE;IAAEF,SAAS,EAAEC;EAAQ,CAAC,CAAC,CAAC;AACrF;AAEAH,eAAe,CAACO,YAAY,GAAG,CAAC,IAAI,EAAE,WAAW,CAAC;AAClDP,eAAe,CAACQ,KAAK,GAAG;EACtBC,IAAI,EAAE,iBAAiB;EACvBC,MAAM,EAAE,UAAU;EAClBC,IAAI,EAAEZ,IAAI,CAACa,KAAK,CAACC;AACnB,CAAC;AAEDb,eAAe,CAACc,SAAS,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAG;EAClE;EACAC,EAAE,EAAEtB,eAAe,CAACsB,EAAE;EAEtB;EACAhB,SAAS,EAAER,SAAS,CAACyB;AACvB,CAAC,GAAG,CAAC,CAAC;AAEN,eAAenB,eAAe"},"metadata":{},"sourceType":"module"}