{"ast":null,"code":"import { every, isArray } from 'min-dash';\n\n/**\n * Computes the distance between two points\n *\n * @param  {Point}  p\n * @param  {Point}  q\n *\n * @return {number}  distance\n */\nexport function pointDistance(a, b) {\n  if (!a || !b) {\n    return -1;\n  }\n  return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));\n}\n\n/**\n * Returns true if the point r is on the line between p and q\n *\n * @param  {Point}  p\n * @param  {Point}  q\n * @param  {Point}  r\n * @param  {number} [accuracy=5] accuracy for points on line check (lower is better)\n *\n * @return {boolean}\n */\nexport function pointsOnLine(p, q, r, accuracy) {\n  if (typeof accuracy === 'undefined') {\n    accuracy = 5;\n  }\n  if (!p || !q || !r) {\n    return false;\n  }\n  var val = (q.x - p.x) * (r.y - p.y) - (q.y - p.y) * (r.x - p.x),\n    dist = pointDistance(p, q);\n\n  // @see http://stackoverflow.com/a/907491/412190\n  return Math.abs(val / dist) <= accuracy;\n}\nvar ALIGNED_THRESHOLD = 2;\n\n/**\n * Check whether two points are horizontally or vertically aligned.\n *\n * @param {Array<Point>|Point}\n * @param {Point}\n *\n * @return {string|boolean}\n */\nexport function pointsAligned(a, b) {\n  var points;\n  if (isArray(a)) {\n    points = a;\n  } else {\n    points = [a, b];\n  }\n  if (pointsAlignedHorizontally(points)) {\n    return 'h';\n  }\n  if (pointsAlignedVertically(points)) {\n    return 'v';\n  }\n  return false;\n}\nexport function pointsAlignedHorizontally(a, b) {\n  var points;\n  if (isArray(a)) {\n    points = a;\n  } else {\n    points = [a, b];\n  }\n  var firstPoint = points.slice().shift();\n  return every(points, function (point) {\n    return Math.abs(firstPoint.y - point.y) <= ALIGNED_THRESHOLD;\n  });\n}\nexport function pointsAlignedVertically(a, b) {\n  var points;\n  if (isArray(a)) {\n    points = a;\n  } else {\n    points = [a, b];\n  }\n  var firstPoint = points.slice().shift();\n  return every(points, function (point) {\n    return Math.abs(firstPoint.x - point.x) <= ALIGNED_THRESHOLD;\n  });\n}\n\n/**\n * Returns true if the point p is inside the rectangle rect\n *\n * @param  {Point}  p\n * @param  {Rect} rect\n * @param  {number} tolerance\n *\n * @return {boolean}\n */\nexport function pointInRect(p, rect, tolerance) {\n  tolerance = tolerance || 0;\n  return p.x > rect.x - tolerance && p.y > rect.y - tolerance && p.x < rect.x + rect.width + tolerance && p.y < rect.y + rect.height + tolerance;\n}\n\n/**\n * Returns a point in the middle of points p and q\n *\n * @param  {Point}  p\n * @param  {Point}  q\n *\n * @return {Point} middle point\n */\nexport function getMidPoint(p, q) {\n  return {\n    x: Math.round(p.x + (q.x - p.x) / 2.0),\n    y: Math.round(p.y + (q.y - p.y) / 2.0)\n  };\n}","map":{"version":3,"names":["every","isArray","pointDistance","a","b","Math","sqrt","pow","x","y","pointsOnLine","p","q","r","accuracy","val","dist","abs","ALIGNED_THRESHOLD","pointsAligned","points","pointsAlignedHorizontally","pointsAlignedVertically","firstPoint","slice","shift","point","pointInRect","rect","tolerance","width","height","getMidPoint","round"],"sources":["C:/Users/KondalaRaoThota/Truviq_Camunda/camunda-react/node_modules/diagram-js/lib/util/Geometry.js"],"sourcesContent":["import {\n  every,\n  isArray\n} from 'min-dash';\n\n/**\n * Computes the distance between two points\n *\n * @param  {Point}  p\n * @param  {Point}  q\n *\n * @return {number}  distance\n */\nexport function pointDistance(a, b) {\n  if (!a || !b) {\n    return -1;\n  }\n\n  return Math.sqrt(\n    Math.pow(a.x - b.x, 2) +\n    Math.pow(a.y - b.y, 2)\n  );\n}\n\n\n/**\n * Returns true if the point r is on the line between p and q\n *\n * @param  {Point}  p\n * @param  {Point}  q\n * @param  {Point}  r\n * @param  {number} [accuracy=5] accuracy for points on line check (lower is better)\n *\n * @return {boolean}\n */\nexport function pointsOnLine(p, q, r, accuracy) {\n\n  if (typeof accuracy === 'undefined') {\n    accuracy = 5;\n  }\n\n  if (!p || !q || !r) {\n    return false;\n  }\n\n  var val = (q.x - p.x) * (r.y - p.y) - (q.y - p.y) * (r.x - p.x),\n      dist = pointDistance(p, q);\n\n  // @see http://stackoverflow.com/a/907491/412190\n  return Math.abs(val / dist) <= accuracy;\n}\n\n\nvar ALIGNED_THRESHOLD = 2;\n\n/**\n * Check whether two points are horizontally or vertically aligned.\n *\n * @param {Array<Point>|Point}\n * @param {Point}\n *\n * @return {string|boolean}\n */\nexport function pointsAligned(a, b) {\n  var points;\n\n  if (isArray(a)) {\n    points = a;\n  } else {\n    points = [ a, b ];\n  }\n\n  if (pointsAlignedHorizontally(points)) {\n    return 'h';\n  }\n\n  if (pointsAlignedVertically(points)) {\n    return 'v';\n  }\n\n  return false;\n}\n\nexport function pointsAlignedHorizontally(a, b) {\n  var points;\n\n  if (isArray(a)) {\n    points = a;\n  } else {\n    points = [ a, b ];\n  }\n\n  var firstPoint = points.slice().shift();\n\n  return every(points, function(point) {\n    return Math.abs(firstPoint.y - point.y) <= ALIGNED_THRESHOLD;\n  });\n}\n\nexport function pointsAlignedVertically(a, b) {\n  var points;\n\n  if (isArray(a)) {\n    points = a;\n  } else {\n    points = [ a, b ];\n  }\n\n  var firstPoint = points.slice().shift();\n\n  return every(points, function(point) {\n    return Math.abs(firstPoint.x - point.x) <= ALIGNED_THRESHOLD;\n  });\n}\n\n\n\n/**\n * Returns true if the point p is inside the rectangle rect\n *\n * @param  {Point}  p\n * @param  {Rect} rect\n * @param  {number} tolerance\n *\n * @return {boolean}\n */\nexport function pointInRect(p, rect, tolerance) {\n  tolerance = tolerance || 0;\n\n  return p.x > rect.x - tolerance &&\n         p.y > rect.y - tolerance &&\n         p.x < rect.x + rect.width + tolerance &&\n         p.y < rect.y + rect.height + tolerance;\n}\n\n/**\n * Returns a point in the middle of points p and q\n *\n * @param  {Point}  p\n * @param  {Point}  q\n *\n * @return {Point} middle point\n */\nexport function getMidPoint(p, q) {\n  return {\n    x: Math.round(p.x + ((q.x - p.x) / 2.0)),\n    y: Math.round(p.y + ((q.y - p.y) / 2.0))\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}