{"ast":null,"code":"/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\nvar ReactElement = require('./ReactElement');\nvar invariant = require('fbjs/lib/invariant');\n\n/**\r\n * Returns the first child in a collection of children and verifies that there\r\n * is only one child in the collection.\r\n *\r\n * See https://facebook.github.io/react/docs/top-level-api.html#react.children.only\r\n *\r\n * The current implementation of this function assumes that a single child gets\r\n * passed without a wrapper, but the purpose of this helper function is to\r\n * abstract away the particular structure of children.\r\n *\r\n * @param {?object} children Child collection structure.\r\n * @return {ReactElement} The first and only `ReactElement` contained in the\r\n * structure.\r\n */\nfunction onlyChild(children) {\n  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React.Children.only expected to receive a single React element child.') : _prodInvariant('143') : void 0;\n  return children;\n}\nmodule.exports = onlyChild;","map":{"version":3,"names":["_prodInvariant","require","ReactElement","invariant","onlyChild","children","isValidElement","process","env","NODE_ENV","module","exports"],"sources":["C:/Users/sam/final/camunda-react/node_modules/react-semantic-redux-form/node_modules/react/lib/onlyChild.js"],"sourcesContent":["/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar _prodInvariant = require('./reactProdInvariant');\r\n\r\nvar ReactElement = require('./ReactElement');\r\n\r\nvar invariant = require('fbjs/lib/invariant');\r\n\r\n/**\r\n * Returns the first child in a collection of children and verifies that there\r\n * is only one child in the collection.\r\n *\r\n * See https://facebook.github.io/react/docs/top-level-api.html#react.children.only\r\n *\r\n * The current implementation of this function assumes that a single child gets\r\n * passed without a wrapper, but the purpose of this helper function is to\r\n * abstract away the particular structure of children.\r\n *\r\n * @param {?object} children Child collection structure.\r\n * @return {ReactElement} The first and only `ReactElement` contained in the\r\n * structure.\r\n */\r\nfunction onlyChild(children) {\r\n  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React.Children.only expected to receive a single React element child.') : _prodInvariant('143') : void 0;\r\n  return children;\r\n}\r\n\r\nmodule.exports = onlyChild;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AAEZ,IAAIA,cAAc,GAAGC,OAAO,CAAC,sBAAsB,CAAC;AAEpD,IAAIC,YAAY,GAAGD,OAAO,CAAC,gBAAgB,CAAC;AAE5C,IAAIE,SAAS,GAAGF,OAAO,CAAC,oBAAoB,CAAC;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,SAASA,CAACC,QAAQ,EAAE;EAC3B,CAACH,YAAY,CAACI,cAAc,CAACD,QAAQ,CAAC,GAAGE,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGN,SAAS,CAAC,KAAK,EAAE,uEAAuE,CAAC,GAAGH,cAAc,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;EAC3M,OAAOK,QAAQ;AACjB;AAEAK,MAAM,CAACC,OAAO,GAAGP,SAAS"},"metadata":{},"sourceType":"script"}