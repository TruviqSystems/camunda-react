{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthand, customPropTypes, getElementType, getUnhandledProps, META } from '../../lib';\nimport FeedLike from './FeedLike';\n\n/**\r\n * A feed can contain a meta.\r\n */\nfunction FeedMeta(props) {\n  var children = props.children,\n    className = props.className,\n    content = props.content,\n    like = props.like;\n  var classes = cx('meta', className);\n  var rest = getUnhandledProps(FeedMeta, props);\n  var ElementType = getElementType(FeedMeta, props);\n  if (!childrenUtils.isNil(children)) {\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), createShorthand(FeedLike, function (val) {\n    return {\n      content: val\n    };\n  }, like), content);\n}\nFeedMeta.handledProps = ['as', 'children', 'className', 'content', 'like'];\nFeedMeta._meta = {\n  name: 'FeedMeta',\n  parent: 'Feed',\n  type: META.TYPES.VIEW\n};\nFeedMeta.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n  /** Primary content. */\n  children: PropTypes.node,\n  /** Additional classes. */\n  className: PropTypes.string,\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n  /** Shorthand for FeedLike. */\n  like: customPropTypes.itemShorthand\n} : {};\nexport default FeedMeta;","map":{"version":3,"names":["_extends","cx","PropTypes","React","childrenUtils","createShorthand","customPropTypes","getElementType","getUnhandledProps","META","FeedLike","FeedMeta","props","children","className","content","like","classes","rest","ElementType","isNil","createElement","val","handledProps","_meta","name","parent","type","TYPES","VIEW","propTypes","process","env","NODE_ENV","as","node","string","contentShorthand","itemShorthand"],"sources":["C:/Users/sam/final/camunda-react/node_modules/react-semantic-redux-form/node_modules/semantic-ui-react/dist/es/views/Feed/FeedMeta.js"],"sourcesContent":["import _extends from 'babel-runtime/helpers/extends';\r\nimport cx from 'classnames';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\nimport { childrenUtils, createShorthand, customPropTypes, getElementType, getUnhandledProps, META } from '../../lib';\r\nimport FeedLike from './FeedLike';\r\n\r\n/**\r\n * A feed can contain a meta.\r\n */\r\nfunction FeedMeta(props) {\r\n  var children = props.children,\r\n      className = props.className,\r\n      content = props.content,\r\n      like = props.like;\r\n\r\n\r\n  var classes = cx('meta', className);\r\n  var rest = getUnhandledProps(FeedMeta, props);\r\n  var ElementType = getElementType(FeedMeta, props);\r\n\r\n  if (!childrenUtils.isNil(children)) {\r\n    return React.createElement(\r\n      ElementType,\r\n      _extends({}, rest, { className: classes }),\r\n      children\r\n    );\r\n  }\r\n\r\n  return React.createElement(\r\n    ElementType,\r\n    _extends({}, rest, { className: classes }),\r\n    createShorthand(FeedLike, function (val) {\r\n      return { content: val };\r\n    }, like),\r\n    content\r\n  );\r\n}\r\n\r\nFeedMeta.handledProps = ['as', 'children', 'className', 'content', 'like'];\r\nFeedMeta._meta = {\r\n  name: 'FeedMeta',\r\n  parent: 'Feed',\r\n  type: META.TYPES.VIEW\r\n};\r\n\r\nFeedMeta.propTypes = process.env.NODE_ENV !== \"production\" ? {\r\n  /** An element type to render as (string or function). */\r\n  as: customPropTypes.as,\r\n\r\n  /** Primary content. */\r\n  children: PropTypes.node,\r\n\r\n  /** Additional classes. */\r\n  className: PropTypes.string,\r\n\r\n  /** Shorthand for primary content. */\r\n  content: customPropTypes.contentShorthand,\r\n\r\n  /** Shorthand for FeedLike. */\r\n  like: customPropTypes.itemShorthand\r\n} : {};\r\n\r\nexport default FeedMeta;"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,+BAA+B;AACpD,OAAOC,EAAE,MAAM,YAAY;AAC3B,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,KAAK,MAAM,OAAO;AAEzB,SAASC,aAAa,EAAEC,eAAe,EAAEC,eAAe,EAAEC,cAAc,EAAEC,iBAAiB,EAAEC,IAAI,QAAQ,WAAW;AACpH,OAAOC,QAAQ,MAAM,YAAY;;AAEjC;AACA;AACA;AACA,SAASC,QAAQA,CAACC,KAAK,EAAE;EACvB,IAAIC,QAAQ,GAAGD,KAAK,CAACC,QAAQ;IACzBC,SAAS,GAAGF,KAAK,CAACE,SAAS;IAC3BC,OAAO,GAAGH,KAAK,CAACG,OAAO;IACvBC,IAAI,GAAGJ,KAAK,CAACI,IAAI;EAGrB,IAAIC,OAAO,GAAGhB,EAAE,CAAC,MAAM,EAAEa,SAAS,CAAC;EACnC,IAAII,IAAI,GAAGV,iBAAiB,CAACG,QAAQ,EAAEC,KAAK,CAAC;EAC7C,IAAIO,WAAW,GAAGZ,cAAc,CAACI,QAAQ,EAAEC,KAAK,CAAC;EAEjD,IAAI,CAACR,aAAa,CAACgB,KAAK,CAACP,QAAQ,CAAC,EAAE;IAClC,OAAOV,KAAK,CAACkB,aAAa,CACxBF,WAAW,EACXnB,QAAQ,CAAC,CAAC,CAAC,EAAEkB,IAAI,EAAE;MAAEJ,SAAS,EAAEG;IAAQ,CAAC,CAAC,EAC1CJ,QAAQ,CACT;EACH;EAEA,OAAOV,KAAK,CAACkB,aAAa,CACxBF,WAAW,EACXnB,QAAQ,CAAC,CAAC,CAAC,EAAEkB,IAAI,EAAE;IAAEJ,SAAS,EAAEG;EAAQ,CAAC,CAAC,EAC1CZ,eAAe,CAACK,QAAQ,EAAE,UAAUY,GAAG,EAAE;IACvC,OAAO;MAAEP,OAAO,EAAEO;IAAI,CAAC;EACzB,CAAC,EAAEN,IAAI,CAAC,EACRD,OAAO,CACR;AACH;AAEAJ,QAAQ,CAACY,YAAY,GAAG,CAAC,IAAI,EAAE,UAAU,EAAE,WAAW,EAAE,SAAS,EAAE,MAAM,CAAC;AAC1EZ,QAAQ,CAACa,KAAK,GAAG;EACfC,IAAI,EAAE,UAAU;EAChBC,MAAM,EAAE,MAAM;EACdC,IAAI,EAAElB,IAAI,CAACmB,KAAK,CAACC;AACnB,CAAC;AAEDlB,QAAQ,CAACmB,SAAS,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAG;EAC3D;EACAC,EAAE,EAAE5B,eAAe,CAAC4B,EAAE;EAEtB;EACArB,QAAQ,EAAEX,SAAS,CAACiC,IAAI;EAExB;EACArB,SAAS,EAAEZ,SAAS,CAACkC,MAAM;EAE3B;EACArB,OAAO,EAAET,eAAe,CAAC+B,gBAAgB;EAEzC;EACArB,IAAI,EAAEV,eAAe,CAACgC;AACxB,CAAC,GAAG,CAAC,CAAC;AAEN,eAAe3B,QAAQ"},"metadata":{},"sourceType":"module"}