{"ast":null,"code":"import * as AT from '../../constants/ActionTypes';\nimport { CALL_API, Schemas } from '../../middleware/api';\nexport const fetchProcessDefinitions = processDefinitionId => {\n  if (processDefinitionId) {\n    return {\n      [CALL_API]: {\n        types: [AT.PROCESS_DEFINITION_REQUEST, AT.PROCESS_DEFINITION_SUCCESS, AT.PROCESS_DEFINITION_FAILURE],\n        endpoint: `process-definition?processDefinitionId=${processDefinitionId}`,\n        schema: Schemas.PROCESS_DEFINITION_ARRAY\n      }\n    };\n  } else {\n    return {\n      [CALL_API]: {\n        types: [AT.PROCESS_DEFINITION_REQUEST, AT.PROCESS_DEFINITION_SUCCESS, AT.PROCESS_DEFINITION_FAILURE],\n        endpoint: 'process-definition?latestVersion=true',\n        schema: Schemas.PROCESS_DEFINITION_ARRAY\n      }\n    };\n  }\n};\nexport const fetchFormKey = (processDefinitionKey, values) => ({\n  [CALL_API]: {\n    types: [AT.FORM_KEY_REQUEST, AT.FORM_KEY_SUCCESS, AT.FORM_KEY_FAILURE],\n    endpoint: `process-definition/key/${processDefinitionKey}/startForm`,\n    schema: Schemas.FORM_KEY\n  }\n});\nexport const fetchProcessDefinitionXML = processDefinitionId => ({\n  [CALL_API]: {\n    types: [AT.PROCESS_DEFINITION_XML_REQUEST, AT.PROCESS_DEFINITION_XML_SUCCESS, AT.PROCESS_DEFINITION_XML_FAILURE],\n    endpoint: `/process-definition/${processDefinitionId}/xml`,\n    schema: Schemas.PROCESS_DEFINITION_XML\n  }\n});\nexport const postProcessInstance = (processDefinitionKey, values) => ({\n  [CALL_API]: {\n    types: [AT.NEW_PROCESS_INSTANCE_REQUEST, AT.NEW_PROCESS_INSTANCE_SUCCESS, AT.NEW_PROCESS_INSTANCE_FAILURE],\n    endpoint: `process-definition/key/${processDefinitionKey}/start`,\n    schema: Schemas.PROCESS_INSTANCE_STARTED,\n    settings: {\n      method: 'post',\n      body: JSON.stringify(values),\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    }\n  }\n});","map":{"version":3,"names":["AT","CALL_API","Schemas","fetchProcessDefinitions","processDefinitionId","types","PROCESS_DEFINITION_REQUEST","PROCESS_DEFINITION_SUCCESS","PROCESS_DEFINITION_FAILURE","endpoint","schema","PROCESS_DEFINITION_ARRAY","fetchFormKey","processDefinitionKey","values","FORM_KEY_REQUEST","FORM_KEY_SUCCESS","FORM_KEY_FAILURE","FORM_KEY","fetchProcessDefinitionXML","PROCESS_DEFINITION_XML_REQUEST","PROCESS_DEFINITION_XML_SUCCESS","PROCESS_DEFINITION_XML_FAILURE","PROCESS_DEFINITION_XML","postProcessInstance","NEW_PROCESS_INSTANCE_REQUEST","NEW_PROCESS_INSTANCE_SUCCESS","NEW_PROCESS_INSTANCE_FAILURE","PROCESS_INSTANCE_STARTED","settings","method","body","JSON","stringify","headers"],"sources":["C:/Users/sam/final/camunda-react/src/actions/camunda-rest/process-definition.js"],"sourcesContent":["import * as AT from '../../constants/ActionTypes'\r\nimport { CALL_API, Schemas } from '../../middleware/api'\r\n\r\nexport const fetchProcessDefinitions = (processDefinitionId) => {\r\n  if (processDefinitionId) {\r\n    return {\r\n      [CALL_API]: {\r\n        types: [ AT.PROCESS_DEFINITION_REQUEST, AT.PROCESS_DEFINITION_SUCCESS, AT.PROCESS_DEFINITION_FAILURE ],\r\n        endpoint: `process-definition?processDefinitionId=${processDefinitionId}`,\r\n        schema: Schemas.PROCESS_DEFINITION_ARRAY\r\n      }\r\n    }\r\n  } else {\r\n    return {\r\n      [CALL_API]: {\r\n        types: [ AT.PROCESS_DEFINITION_REQUEST, AT.PROCESS_DEFINITION_SUCCESS, AT.PROCESS_DEFINITION_FAILURE ],\r\n        endpoint: 'process-definition?latestVersion=true',\r\n        schema: Schemas.PROCESS_DEFINITION_ARRAY\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport const fetchFormKey = (processDefinitionKey,values) => ({\r\n  [CALL_API]: {\r\n    types: [ AT.FORM_KEY_REQUEST, AT.FORM_KEY_SUCCESS, AT.FORM_KEY_FAILURE ],\r\n    endpoint: `process-definition/key/${processDefinitionKey}/startForm`,\r\n    schema: Schemas.FORM_KEY\r\n  }\r\n})\r\n\r\nexport const fetchProcessDefinitionXML = (processDefinitionId) => ({\r\n  [CALL_API]: {\r\n    types: [ AT.PROCESS_DEFINITION_XML_REQUEST, AT.PROCESS_DEFINITION_XML_SUCCESS, AT.PROCESS_DEFINITION_XML_FAILURE ],\r\n    endpoint: `/process-definition/${processDefinitionId}/xml`,\r\n    schema: Schemas.PROCESS_DEFINITION_XML\r\n  }\r\n})\r\n\r\nexport const postProcessInstance = (processDefinitionKey, values) => ({\r\n  [CALL_API]: {\r\n    types: [ AT.NEW_PROCESS_INSTANCE_REQUEST, AT.NEW_PROCESS_INSTANCE_SUCCESS, AT.NEW_PROCESS_INSTANCE_FAILURE ],\r\n    endpoint: `process-definition/key/${processDefinitionKey}/start`,\r\n    schema: Schemas.PROCESS_INSTANCE_STARTED,\r\n    settings: {\r\n      method: 'post',\r\n      body: JSON.stringify(values),\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json'\r\n      }\r\n    }\r\n  }\r\n})\r\n\r\n"],"mappings":"AAAA,OAAO,KAAKA,EAAE,MAAM,6BAA6B;AACjD,SAASC,QAAQ,EAAEC,OAAO,QAAQ,sBAAsB;AAExD,OAAO,MAAMC,uBAAuB,GAAIC,mBAAmB,IAAK;EAC9D,IAAIA,mBAAmB,EAAE;IACvB,OAAO;MACL,CAACH,QAAQ,GAAG;QACVI,KAAK,EAAE,CAAEL,EAAE,CAACM,0BAA0B,EAAEN,EAAE,CAACO,0BAA0B,EAAEP,EAAE,CAACQ,0BAA0B,CAAE;QACtGC,QAAQ,EAAG,0CAAyCL,mBAAoB,EAAC;QACzEM,MAAM,EAAER,OAAO,CAACS;MAClB;IACF,CAAC;EACH,CAAC,MAAM;IACL,OAAO;MACL,CAACV,QAAQ,GAAG;QACVI,KAAK,EAAE,CAAEL,EAAE,CAACM,0BAA0B,EAAEN,EAAE,CAACO,0BAA0B,EAAEP,EAAE,CAACQ,0BAA0B,CAAE;QACtGC,QAAQ,EAAE,uCAAuC;QACjDC,MAAM,EAAER,OAAO,CAACS;MAClB;IACF,CAAC;EACH;AACF,CAAC;AAED,OAAO,MAAMC,YAAY,GAAGA,CAACC,oBAAoB,EAACC,MAAM,MAAM;EAC5D,CAACb,QAAQ,GAAG;IACVI,KAAK,EAAE,CAAEL,EAAE,CAACe,gBAAgB,EAAEf,EAAE,CAACgB,gBAAgB,EAAEhB,EAAE,CAACiB,gBAAgB,CAAE;IACxER,QAAQ,EAAG,0BAAyBI,oBAAqB,YAAW;IACpEH,MAAM,EAAER,OAAO,CAACgB;EAClB;AACF,CAAC,CAAC;AAEF,OAAO,MAAMC,yBAAyB,GAAIf,mBAAmB,KAAM;EACjE,CAACH,QAAQ,GAAG;IACVI,KAAK,EAAE,CAAEL,EAAE,CAACoB,8BAA8B,EAAEpB,EAAE,CAACqB,8BAA8B,EAAErB,EAAE,CAACsB,8BAA8B,CAAE;IAClHb,QAAQ,EAAG,uBAAsBL,mBAAoB,MAAK;IAC1DM,MAAM,EAAER,OAAO,CAACqB;EAClB;AACF,CAAC,CAAC;AAEF,OAAO,MAAMC,mBAAmB,GAAGA,CAACX,oBAAoB,EAAEC,MAAM,MAAM;EACpE,CAACb,QAAQ,GAAG;IACVI,KAAK,EAAE,CAAEL,EAAE,CAACyB,4BAA4B,EAAEzB,EAAE,CAAC0B,4BAA4B,EAAE1B,EAAE,CAAC2B,4BAA4B,CAAE;IAC5GlB,QAAQ,EAAG,0BAAyBI,oBAAqB,QAAO;IAChEH,MAAM,EAAER,OAAO,CAAC0B,wBAAwB;IACxCC,QAAQ,EAAE;MACRC,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACnB,MAAM,CAAC;MAC5BoB,OAAO,EAAE;QACP,QAAQ,EAAE,kBAAkB;QAC5B,cAAc,EAAE;MAClB;IACF;EACF;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module"}