{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps, META, useKeyOnly } from '../../lib';\n\n/**\r\n * A statistic can contain a numeric, icon, image, or text value.\r\n */\nfunction StatisticValue(props) {\n  var children = props.children,\n    className = props.className,\n    content = props.content,\n    text = props.text;\n  var classes = cx(useKeyOnly(text, 'text'), 'value', className);\n  var rest = getUnhandledProps(StatisticValue, props);\n  var ElementType = getElementType(StatisticValue, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\nStatisticValue.handledProps = ['as', 'children', 'className', 'content', 'text'];\nStatisticValue._meta = {\n  name: 'StatisticValue',\n  parent: 'Statistic',\n  type: META.TYPES.VIEW\n};\nStatisticValue.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n  /** Primary content. */\n  children: PropTypes.node,\n  /** Additional classes. */\n  className: PropTypes.string,\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n  /** Format the value with smaller font size to fit nicely beside number values. */\n  text: PropTypes.bool\n} : {};\nStatisticValue.create = createShorthandFactory(StatisticValue, function (content) {\n  return {\n    content: content\n  };\n});\nexport default StatisticValue;","map":{"version":3,"names":["_extends","cx","PropTypes","React","childrenUtils","createShorthandFactory","customPropTypes","getElementType","getUnhandledProps","META","useKeyOnly","StatisticValue","props","children","className","content","text","classes","rest","ElementType","createElement","isNil","handledProps","_meta","name","parent","type","TYPES","VIEW","propTypes","process","env","NODE_ENV","as","node","string","contentShorthand","bool","create"],"sources":["C:/Users/sam/final/camunda-react/node_modules/react-semantic-redux-form/node_modules/semantic-ui-react/dist/es/views/Statistic/StatisticValue.js"],"sourcesContent":["import _extends from 'babel-runtime/helpers/extends';\r\nimport cx from 'classnames';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps, META, useKeyOnly } from '../../lib';\r\n\r\n/**\r\n * A statistic can contain a numeric, icon, image, or text value.\r\n */\r\nfunction StatisticValue(props) {\r\n  var children = props.children,\r\n      className = props.className,\r\n      content = props.content,\r\n      text = props.text;\r\n\r\n\r\n  var classes = cx(useKeyOnly(text, 'text'), 'value', className);\r\n  var rest = getUnhandledProps(StatisticValue, props);\r\n  var ElementType = getElementType(StatisticValue, props);\r\n\r\n  return React.createElement(\r\n    ElementType,\r\n    _extends({}, rest, { className: classes }),\r\n    childrenUtils.isNil(children) ? content : children\r\n  );\r\n}\r\n\r\nStatisticValue.handledProps = ['as', 'children', 'className', 'content', 'text'];\r\nStatisticValue._meta = {\r\n  name: 'StatisticValue',\r\n  parent: 'Statistic',\r\n  type: META.TYPES.VIEW\r\n};\r\n\r\nStatisticValue.propTypes = process.env.NODE_ENV !== \"production\" ? {\r\n  /** An element type to render as (string or function). */\r\n  as: customPropTypes.as,\r\n\r\n  /** Primary content. */\r\n  children: PropTypes.node,\r\n\r\n  /** Additional classes. */\r\n  className: PropTypes.string,\r\n\r\n  /** Shorthand for primary content. */\r\n  content: customPropTypes.contentShorthand,\r\n\r\n  /** Format the value with smaller font size to fit nicely beside number values. */\r\n  text: PropTypes.bool\r\n} : {};\r\n\r\nStatisticValue.create = createShorthandFactory(StatisticValue, function (content) {\r\n  return { content: content };\r\n});\r\n\r\nexport default StatisticValue;"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,+BAA+B;AACpD,OAAOC,EAAE,MAAM,YAAY;AAC3B,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,KAAK,MAAM,OAAO;AAEzB,SAASC,aAAa,EAAEC,sBAAsB,EAAEC,eAAe,EAAEC,cAAc,EAAEC,iBAAiB,EAAEC,IAAI,EAAEC,UAAU,QAAQ,WAAW;;AAEvI;AACA;AACA;AACA,SAASC,cAAcA,CAACC,KAAK,EAAE;EAC7B,IAAIC,QAAQ,GAAGD,KAAK,CAACC,QAAQ;IACzBC,SAAS,GAAGF,KAAK,CAACE,SAAS;IAC3BC,OAAO,GAAGH,KAAK,CAACG,OAAO;IACvBC,IAAI,GAAGJ,KAAK,CAACI,IAAI;EAGrB,IAAIC,OAAO,GAAGhB,EAAE,CAACS,UAAU,CAACM,IAAI,EAAE,MAAM,CAAC,EAAE,OAAO,EAAEF,SAAS,CAAC;EAC9D,IAAII,IAAI,GAAGV,iBAAiB,CAACG,cAAc,EAAEC,KAAK,CAAC;EACnD,IAAIO,WAAW,GAAGZ,cAAc,CAACI,cAAc,EAAEC,KAAK,CAAC;EAEvD,OAAOT,KAAK,CAACiB,aAAa,CACxBD,WAAW,EACXnB,QAAQ,CAAC,CAAC,CAAC,EAAEkB,IAAI,EAAE;IAAEJ,SAAS,EAAEG;EAAQ,CAAC,CAAC,EAC1Cb,aAAa,CAACiB,KAAK,CAACR,QAAQ,CAAC,GAAGE,OAAO,GAAGF,QAAQ,CACnD;AACH;AAEAF,cAAc,CAACW,YAAY,GAAG,CAAC,IAAI,EAAE,UAAU,EAAE,WAAW,EAAE,SAAS,EAAE,MAAM,CAAC;AAChFX,cAAc,CAACY,KAAK,GAAG;EACrBC,IAAI,EAAE,gBAAgB;EACtBC,MAAM,EAAE,WAAW;EACnBC,IAAI,EAAEjB,IAAI,CAACkB,KAAK,CAACC;AACnB,CAAC;AAEDjB,cAAc,CAACkB,SAAS,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAG;EACjE;EACAC,EAAE,EAAE3B,eAAe,CAAC2B,EAAE;EAEtB;EACApB,QAAQ,EAAEX,SAAS,CAACgC,IAAI;EAExB;EACApB,SAAS,EAAEZ,SAAS,CAACiC,MAAM;EAE3B;EACApB,OAAO,EAAET,eAAe,CAAC8B,gBAAgB;EAEzC;EACApB,IAAI,EAAEd,SAAS,CAACmC;AAClB,CAAC,GAAG,CAAC,CAAC;AAEN1B,cAAc,CAAC2B,MAAM,GAAGjC,sBAAsB,CAACM,cAAc,EAAE,UAAUI,OAAO,EAAE;EAChF,OAAO;IAAEA,OAAO,EAAEA;EAAQ,CAAC;AAC7B,CAAC,CAAC;AAEF,eAAeJ,cAAc"},"metadata":{},"sourceType":"module"}