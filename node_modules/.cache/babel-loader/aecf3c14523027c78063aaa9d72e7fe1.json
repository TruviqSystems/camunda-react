{"ast":null,"code":"import _slicedToArray from 'babel-runtime/helpers/slicedToArray';\nimport _has from 'lodash/has';\nimport _keys from 'lodash/keys';\nimport _forEach from 'lodash/forEach';\nimport _filter from 'lodash/filter';\nimport _keyBy from 'lodash/keyBy';\nimport { Children, isValidElement } from 'react';\n\n/**\n * Given `this.props.children`, return an object mapping key to child.\n *\n * @param {object} children Element's children\n * @return {object} Mapping of key to child\n */\nexport var getChildMapping = function getChildMapping(children) {\n  return _keyBy(_filter(Children.toArray(children), isValidElement), 'key');\n};\nvar getPendingKeys = function getPendingKeys(prev, next) {\n  var nextKeysPending = {};\n  var pendingKeys = [];\n  _forEach(_keys(prev), function (prevKey) {\n    if (!_has(next, prevKey)) {\n      pendingKeys.push(prevKey);\n      return;\n    }\n    if (pendingKeys.length) {\n      nextKeysPending[prevKey] = pendingKeys;\n      pendingKeys = [];\n    }\n  });\n  return [nextKeysPending, pendingKeys];\n};\nvar getValue = function getValue(key, prev, next) {\n  return _has(next, key) ? next[key] : prev[key];\n};\n\n/**\n * When you're adding or removing children some may be added or removed in the same render pass. We want to show *both*\n * since we want to simultaneously animate elements in and out. This function takes a previous set of keys and a new set\n * of keys and merges them with its best guess of the correct ordering.\n *\n * @param {object} prev Prev children as returned from `getChildMapping()`\n * @param {object} next Next children as returned from `getChildMapping()`\n * @return {object} A key set that contains all keys in `prev` and all keys in `next` in a reasonable order\n */\nexport var mergeChildMappings = function mergeChildMappings() {\n  var prev = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var next = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var childMapping = {};\n  var _getPendingKeys = getPendingKeys(prev, next),\n    _getPendingKeys2 = _slicedToArray(_getPendingKeys, 2),\n    nextKeysPending = _getPendingKeys2[0],\n    pendingKeys = _getPendingKeys2[1];\n  _forEach(_keys(next), function (nextKey) {\n    if (_has(nextKeysPending, nextKey)) {\n      _forEach(nextKeysPending[nextKey], function (pendingKey) {\n        childMapping[pendingKey] = getValue(pendingKey, prev, next);\n      });\n    }\n    childMapping[nextKey] = getValue(nextKey, prev, next);\n  });\n  _forEach(pendingKeys, function (pendingKey) {\n    childMapping[pendingKey] = getValue(pendingKey, prev, next);\n  });\n  return childMapping;\n};","map":{"version":3,"names":["_slicedToArray","_has","_keys","_forEach","_filter","_keyBy","Children","isValidElement","getChildMapping","children","toArray","getPendingKeys","prev","next","nextKeysPending","pendingKeys","prevKey","push","length","getValue","key","mergeChildMappings","arguments","undefined","childMapping","_getPendingKeys","_getPendingKeys2","nextKey","pendingKey"],"sources":["C:/Users/KondalaRaoThota/Truviq_Camunda/camunda-react/node_modules/react-semantic-redux-form/node_modules/semantic-ui-react/dist/es/lib/childMapping.js"],"sourcesContent":["import _slicedToArray from 'babel-runtime/helpers/slicedToArray';\nimport _has from 'lodash/has';\nimport _keys from 'lodash/keys';\nimport _forEach from 'lodash/forEach';\nimport _filter from 'lodash/filter';\nimport _keyBy from 'lodash/keyBy';\n\nimport { Children, isValidElement } from 'react';\n\n/**\n * Given `this.props.children`, return an object mapping key to child.\n *\n * @param {object} children Element's children\n * @return {object} Mapping of key to child\n */\nexport var getChildMapping = function getChildMapping(children) {\n  return _keyBy(_filter(Children.toArray(children), isValidElement), 'key');\n};\n\nvar getPendingKeys = function getPendingKeys(prev, next) {\n  var nextKeysPending = {};\n  var pendingKeys = [];\n\n  _forEach(_keys(prev), function (prevKey) {\n    if (!_has(next, prevKey)) {\n      pendingKeys.push(prevKey);\n      return;\n    }\n\n    if (pendingKeys.length) {\n      nextKeysPending[prevKey] = pendingKeys;\n      pendingKeys = [];\n    }\n  });\n\n  return [nextKeysPending, pendingKeys];\n};\n\nvar getValue = function getValue(key, prev, next) {\n  return _has(next, key) ? next[key] : prev[key];\n};\n\n/**\n * When you're adding or removing children some may be added or removed in the same render pass. We want to show *both*\n * since we want to simultaneously animate elements in and out. This function takes a previous set of keys and a new set\n * of keys and merges them with its best guess of the correct ordering.\n *\n * @param {object} prev Prev children as returned from `getChildMapping()`\n * @param {object} next Next children as returned from `getChildMapping()`\n * @return {object} A key set that contains all keys in `prev` and all keys in `next` in a reasonable order\n */\nexport var mergeChildMappings = function mergeChildMappings() {\n  var prev = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var next = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var childMapping = {};\n\n  var _getPendingKeys = getPendingKeys(prev, next),\n      _getPendingKeys2 = _slicedToArray(_getPendingKeys, 2),\n      nextKeysPending = _getPendingKeys2[0],\n      pendingKeys = _getPendingKeys2[1];\n\n  _forEach(_keys(next), function (nextKey) {\n    if (_has(nextKeysPending, nextKey)) {\n      _forEach(nextKeysPending[nextKey], function (pendingKey) {\n        childMapping[pendingKey] = getValue(pendingKey, prev, next);\n      });\n    }\n\n    childMapping[nextKey] = getValue(nextKey, prev, next);\n  });\n\n  _forEach(pendingKeys, function (pendingKey) {\n    childMapping[pendingKey] = getValue(pendingKey, prev, next);\n  });\n\n  return childMapping;\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}