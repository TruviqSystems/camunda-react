{"ast":null,"code":"import { isObject, assign, forEach, reduce } from 'min-dash';\nimport { append as svgAppend, attr as svgAttr, create as svgCreate, remove as svgRemove } from 'tiny-svg';\nvar DEFAULT_BOX_PADDING = 0;\nvar DEFAULT_LABEL_SIZE = {\n  width: 150,\n  height: 50\n};\nfunction parseAlign(align) {\n  var parts = align.split('-');\n  return {\n    horizontal: parts[0] || 'center',\n    vertical: parts[1] || 'top'\n  };\n}\nfunction parsePadding(padding) {\n  if (isObject(padding)) {\n    return assign({\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0\n    }, padding);\n  } else {\n    return {\n      top: padding,\n      left: padding,\n      right: padding,\n      bottom: padding\n    };\n  }\n}\nfunction getTextBBox(text, fakeText) {\n  fakeText.textContent = text;\n  var textBBox;\n  try {\n    var bbox,\n      emptyLine = text === '';\n\n    // add dummy text, when line is empty to\n    // determine correct height\n    fakeText.textContent = emptyLine ? 'dummy' : text;\n    textBBox = fakeText.getBBox();\n\n    // take text rendering related horizontal\n    // padding into account\n    bbox = {\n      width: textBBox.width + textBBox.x * 2,\n      height: textBBox.height\n    };\n    if (emptyLine) {\n      // correct width\n      bbox.width = 0;\n    }\n    return bbox;\n  } catch (e) {\n    return {\n      width: 0,\n      height: 0\n    };\n  }\n}\n\n/**\r\n * Layout the next line and return the layouted element.\r\n *\r\n * Alters the lines passed.\r\n *\r\n * @param  {Array<string>} lines\r\n * @return {Object} the line descriptor, an object { width, height, text }\r\n */\nfunction layoutNext(lines, maxWidth, fakeText) {\n  var originalLine = lines.shift(),\n    fitLine = originalLine;\n  var textBBox;\n  for (;;) {\n    textBBox = getTextBBox(fitLine, fakeText);\n    textBBox.width = fitLine ? textBBox.width : 0;\n\n    // try to fit\n    if (fitLine === ' ' || fitLine === '' || textBBox.width < Math.round(maxWidth) || fitLine.length < 2) {\n      return fit(lines, fitLine, originalLine, textBBox);\n    }\n    fitLine = shortenLine(fitLine, textBBox.width, maxWidth);\n  }\n}\nfunction fit(lines, fitLine, originalLine, textBBox) {\n  if (fitLine.length < originalLine.length) {\n    var remainder = originalLine.slice(fitLine.length).trim();\n    lines.unshift(remainder);\n  }\n  return {\n    width: textBBox.width,\n    height: textBBox.height,\n    text: fitLine\n  };\n}\nvar SOFT_BREAK = '\\u00AD';\n\n/**\r\n * Shortens a line based on spacing and hyphens.\r\n * Returns the shortened result on success.\r\n *\r\n * @param  {string} line\r\n * @param  {number} maxLength the maximum characters of the string\r\n * @return {string} the shortened string\r\n */\nfunction semanticShorten(line, maxLength) {\n  var parts = line.split(/(\\s|-|\\u00AD)/g),\n    part,\n    shortenedParts = [],\n    length = 0;\n\n  // try to shorten via break chars\n  if (parts.length > 1) {\n    while (part = parts.shift()) {\n      if (part.length + length < maxLength) {\n        shortenedParts.push(part);\n        length += part.length;\n      } else {\n        // remove previous part, too if hyphen does not fit anymore\n        if (part === '-' || part === SOFT_BREAK) {\n          shortenedParts.pop();\n        }\n        break;\n      }\n    }\n  }\n  var last = shortenedParts[shortenedParts.length - 1];\n\n  // translate trailing soft break to actual hyphen\n  if (last && last === SOFT_BREAK) {\n    shortenedParts[shortenedParts.length - 1] = '-';\n  }\n  return shortenedParts.join('');\n}\nfunction shortenLine(line, width, maxWidth) {\n  var length = Math.max(line.length * (maxWidth / width), 1);\n\n  // try to shorten semantically (i.e. based on spaces and hyphens)\n  var shortenedLine = semanticShorten(line, length);\n  if (!shortenedLine) {\n    // force shorten by cutting the long word\n    shortenedLine = line.slice(0, Math.max(Math.round(length - 1), 1));\n  }\n  return shortenedLine;\n}\nfunction getHelperSvg() {\n  var helperSvg = document.getElementById('helper-svg');\n  if (!helperSvg) {\n    helperSvg = svgCreate('svg');\n    svgAttr(helperSvg, {\n      id: 'helper-svg',\n      width: 0,\n      height: 0,\n      style: 'visibility: hidden; position: fixed'\n    });\n    document.body.appendChild(helperSvg);\n  }\n  return helperSvg;\n}\n\n/**\r\n * Creates a new label utility\r\n *\r\n * @param {Object} config\r\n * @param {Dimensions} config.size\r\n * @param {number} config.padding\r\n * @param {Object} config.style\r\n * @param {string} config.align\r\n */\nexport default function Text(config) {\n  this._config = assign({}, {\n    size: DEFAULT_LABEL_SIZE,\n    padding: DEFAULT_BOX_PADDING,\n    style: {},\n    align: 'center-top'\n  }, config || {});\n}\n\n/**\r\n * Returns the layouted text as an SVG element.\r\n *\r\n * @param {string} text\r\n * @param {Object} options\r\n *\r\n * @return {SVGElement}\r\n */\nText.prototype.createText = function (text, options) {\n  return this.layoutText(text, options).element;\n};\n\n/**\r\n * Returns a labels layouted dimensions.\r\n *\r\n * @param {string} text to layout\r\n * @param {Object} options\r\n *\r\n * @return {Dimensions}\r\n */\nText.prototype.getDimensions = function (text, options) {\n  return this.layoutText(text, options).dimensions;\n};\n\n/**\r\n * Creates and returns a label and its bounding box.\r\n *\r\n * @method Text#createText\r\n *\r\n * @param {string} text the text to render on the label\r\n * @param {Object} options\r\n * @param {string} options.align how to align in the bounding box.\r\n *                               Any of { 'center-middle', 'center-top' },\r\n *                               defaults to 'center-top'.\r\n * @param {string} options.style style to be applied to the text\r\n * @param {boolean} options.fitBox indicates if box will be recalculated to\r\n *                                 fit text\r\n *\r\n * @return {Object} { element, dimensions }\r\n */\nText.prototype.layoutText = function (text, options) {\n  var box = assign({}, this._config.size, options.box),\n    style = assign({}, this._config.style, options.style),\n    align = parseAlign(options.align || this._config.align),\n    padding = parsePadding(options.padding !== undefined ? options.padding : this._config.padding),\n    fitBox = options.fitBox || false;\n  var lineHeight = getLineHeight(style);\n\n  // we split text by lines and normalize\n  // {soft break} + {line break} => { line break }\n  var lines = text.split(/\\u00AD?\\r?\\n/),\n    layouted = [];\n  var maxWidth = box.width - padding.left - padding.right;\n\n  // ensure correct rendering by attaching helper text node to invisible SVG\n  var helperText = svgCreate('text');\n  svgAttr(helperText, {\n    x: 0,\n    y: 0\n  });\n  svgAttr(helperText, style);\n  var helperSvg = getHelperSvg();\n  svgAppend(helperSvg, helperText);\n  while (lines.length) {\n    layouted.push(layoutNext(lines, maxWidth, helperText));\n  }\n  if (align.vertical === 'middle') {\n    padding.top = padding.bottom = 0;\n  }\n  var totalHeight = reduce(layouted, function (sum, line, idx) {\n    return sum + (lineHeight || line.height);\n  }, 0) + padding.top + padding.bottom;\n  var maxLineWidth = reduce(layouted, function (sum, line, idx) {\n    return line.width > sum ? line.width : sum;\n  }, 0);\n\n  // the y position of the next line\n  var y = padding.top;\n  if (align.vertical === 'middle') {\n    y += (box.height - totalHeight) / 2;\n  }\n\n  // magic number initial offset\n  y -= (lineHeight || layouted[0].height) / 4;\n  var textElement = svgCreate('text');\n  svgAttr(textElement, style);\n\n  // layout each line taking into account that parent\n  // shape might resize to fit text size\n  forEach(layouted, function (line) {\n    var x;\n    y += lineHeight || line.height;\n    switch (align.horizontal) {\n      case 'left':\n        x = padding.left;\n        break;\n      case 'right':\n        x = (fitBox ? maxLineWidth : maxWidth) - padding.right - line.width;\n        break;\n      default:\n        // aka center\n        x = Math.max(((fitBox ? maxLineWidth : maxWidth) - line.width) / 2 + padding.left, 0);\n    }\n    var tspan = svgCreate('tspan');\n    svgAttr(tspan, {\n      x: x,\n      y: y\n    });\n    tspan.textContent = line.text;\n    svgAppend(textElement, tspan);\n  });\n  svgRemove(helperText);\n  var dimensions = {\n    width: maxLineWidth,\n    height: totalHeight\n  };\n  return {\n    dimensions: dimensions,\n    element: textElement\n  };\n};\nfunction getLineHeight(style) {\n  if ('fontSize' in style && 'lineHeight' in style) {\n    return style.lineHeight * parseInt(style.fontSize, 10);\n  }\n}","map":{"version":3,"names":["isObject","assign","forEach","reduce","append","svgAppend","attr","svgAttr","create","svgCreate","remove","svgRemove","DEFAULT_BOX_PADDING","DEFAULT_LABEL_SIZE","width","height","parseAlign","align","parts","split","horizontal","vertical","parsePadding","padding","top","left","right","bottom","getTextBBox","text","fakeText","textContent","textBBox","bbox","emptyLine","getBBox","x","e","layoutNext","lines","maxWidth","originalLine","shift","fitLine","Math","round","length","fit","shortenLine","remainder","slice","trim","unshift","SOFT_BREAK","semanticShorten","line","maxLength","part","shortenedParts","push","pop","last","join","max","shortenedLine","getHelperSvg","helperSvg","document","getElementById","id","style","body","appendChild","Text","config","_config","size","prototype","createText","options","layoutText","element","getDimensions","dimensions","box","undefined","fitBox","lineHeight","getLineHeight","layouted","helperText","y","totalHeight","sum","idx","maxLineWidth","textElement","tspan","parseInt","fontSize"],"sources":["C:/Users/sam/final/camunda-react/node_modules/diagram-js/lib/util/Text.js"],"sourcesContent":["import {\r\n  isObject,\r\n  assign,\r\n  forEach,\r\n  reduce\r\n} from 'min-dash';\r\n\r\nimport {\r\n  append as svgAppend,\r\n  attr as svgAttr,\r\n  create as svgCreate,\r\n  remove as svgRemove\r\n} from 'tiny-svg';\r\n\r\nvar DEFAULT_BOX_PADDING = 0;\r\n\r\nvar DEFAULT_LABEL_SIZE = {\r\n  width: 150,\r\n  height: 50\r\n};\r\n\r\n\r\nfunction parseAlign(align) {\r\n\r\n  var parts = align.split('-');\r\n\r\n  return {\r\n    horizontal: parts[0] || 'center',\r\n    vertical: parts[1] || 'top'\r\n  };\r\n}\r\n\r\nfunction parsePadding(padding) {\r\n\r\n  if (isObject(padding)) {\r\n    return assign({ top: 0, left: 0, right: 0, bottom: 0 }, padding);\r\n  } else {\r\n    return {\r\n      top: padding,\r\n      left: padding,\r\n      right: padding,\r\n      bottom: padding\r\n    };\r\n  }\r\n}\r\n\r\nfunction getTextBBox(text, fakeText) {\r\n\r\n  fakeText.textContent = text;\r\n\r\n  var textBBox;\r\n\r\n  try {\r\n    var bbox,\r\n        emptyLine = text === '';\r\n\r\n    // add dummy text, when line is empty to\r\n    // determine correct height\r\n    fakeText.textContent = emptyLine ? 'dummy' : text;\r\n\r\n    textBBox = fakeText.getBBox();\r\n\r\n    // take text rendering related horizontal\r\n    // padding into account\r\n    bbox = {\r\n      width: textBBox.width + textBBox.x * 2,\r\n      height: textBBox.height\r\n    };\r\n\r\n    if (emptyLine) {\r\n\r\n      // correct width\r\n      bbox.width = 0;\r\n    }\r\n\r\n    return bbox;\r\n  } catch (e) {\r\n    return { width: 0, height: 0 };\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Layout the next line and return the layouted element.\r\n *\r\n * Alters the lines passed.\r\n *\r\n * @param  {Array<string>} lines\r\n * @return {Object} the line descriptor, an object { width, height, text }\r\n */\r\nfunction layoutNext(lines, maxWidth, fakeText) {\r\n\r\n  var originalLine = lines.shift(),\r\n      fitLine = originalLine;\r\n\r\n  var textBBox;\r\n\r\n  for (;;) {\r\n    textBBox = getTextBBox(fitLine, fakeText);\r\n\r\n    textBBox.width = fitLine ? textBBox.width : 0;\r\n\r\n    // try to fit\r\n    if (fitLine === ' ' || fitLine === '' || textBBox.width < Math.round(maxWidth) || fitLine.length < 2) {\r\n      return fit(lines, fitLine, originalLine, textBBox);\r\n    }\r\n\r\n    fitLine = shortenLine(fitLine, textBBox.width, maxWidth);\r\n  }\r\n}\r\n\r\nfunction fit(lines, fitLine, originalLine, textBBox) {\r\n  if (fitLine.length < originalLine.length) {\r\n    var remainder = originalLine.slice(fitLine.length).trim();\r\n\r\n    lines.unshift(remainder);\r\n  }\r\n\r\n  return {\r\n    width: textBBox.width,\r\n    height: textBBox.height,\r\n    text: fitLine\r\n  };\r\n}\r\n\r\nvar SOFT_BREAK = '\\u00AD';\r\n\r\n\r\n/**\r\n * Shortens a line based on spacing and hyphens.\r\n * Returns the shortened result on success.\r\n *\r\n * @param  {string} line\r\n * @param  {number} maxLength the maximum characters of the string\r\n * @return {string} the shortened string\r\n */\r\nfunction semanticShorten(line, maxLength) {\r\n\r\n  var parts = line.split(/(\\s|-|\\u00AD)/g),\r\n      part,\r\n      shortenedParts = [],\r\n      length = 0;\r\n\r\n  // try to shorten via break chars\r\n  if (parts.length > 1) {\r\n\r\n    while ((part = parts.shift())) {\r\n      if (part.length + length < maxLength) {\r\n        shortenedParts.push(part);\r\n        length += part.length;\r\n      } else {\r\n\r\n        // remove previous part, too if hyphen does not fit anymore\r\n        if (part === '-' || part === SOFT_BREAK) {\r\n          shortenedParts.pop();\r\n        }\r\n\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  var last = shortenedParts[shortenedParts.length - 1];\r\n\r\n  // translate trailing soft break to actual hyphen\r\n  if (last && last === SOFT_BREAK) {\r\n    shortenedParts[shortenedParts.length - 1] = '-';\r\n  }\r\n\r\n  return shortenedParts.join('');\r\n}\r\n\r\n\r\nfunction shortenLine(line, width, maxWidth) {\r\n  var length = Math.max(line.length * (maxWidth / width), 1);\r\n\r\n  // try to shorten semantically (i.e. based on spaces and hyphens)\r\n  var shortenedLine = semanticShorten(line, length);\r\n\r\n  if (!shortenedLine) {\r\n\r\n    // force shorten by cutting the long word\r\n    shortenedLine = line.slice(0, Math.max(Math.round(length - 1), 1));\r\n  }\r\n\r\n  return shortenedLine;\r\n}\r\n\r\n\r\nfunction getHelperSvg() {\r\n  var helperSvg = document.getElementById('helper-svg');\r\n\r\n  if (!helperSvg) {\r\n    helperSvg = svgCreate('svg');\r\n\r\n    svgAttr(helperSvg, {\r\n      id: 'helper-svg',\r\n      width: 0,\r\n      height: 0,\r\n      style: 'visibility: hidden; position: fixed'\r\n    });\r\n\r\n    document.body.appendChild(helperSvg);\r\n  }\r\n\r\n  return helperSvg;\r\n}\r\n\r\n\r\n/**\r\n * Creates a new label utility\r\n *\r\n * @param {Object} config\r\n * @param {Dimensions} config.size\r\n * @param {number} config.padding\r\n * @param {Object} config.style\r\n * @param {string} config.align\r\n */\r\nexport default function Text(config) {\r\n\r\n  this._config = assign({}, {\r\n    size: DEFAULT_LABEL_SIZE,\r\n    padding: DEFAULT_BOX_PADDING,\r\n    style: {},\r\n    align: 'center-top'\r\n  }, config || {});\r\n}\r\n\r\n/**\r\n * Returns the layouted text as an SVG element.\r\n *\r\n * @param {string} text\r\n * @param {Object} options\r\n *\r\n * @return {SVGElement}\r\n */\r\nText.prototype.createText = function(text, options) {\r\n  return this.layoutText(text, options).element;\r\n};\r\n\r\n/**\r\n * Returns a labels layouted dimensions.\r\n *\r\n * @param {string} text to layout\r\n * @param {Object} options\r\n *\r\n * @return {Dimensions}\r\n */\r\nText.prototype.getDimensions = function(text, options) {\r\n  return this.layoutText(text, options).dimensions;\r\n};\r\n\r\n/**\r\n * Creates and returns a label and its bounding box.\r\n *\r\n * @method Text#createText\r\n *\r\n * @param {string} text the text to render on the label\r\n * @param {Object} options\r\n * @param {string} options.align how to align in the bounding box.\r\n *                               Any of { 'center-middle', 'center-top' },\r\n *                               defaults to 'center-top'.\r\n * @param {string} options.style style to be applied to the text\r\n * @param {boolean} options.fitBox indicates if box will be recalculated to\r\n *                                 fit text\r\n *\r\n * @return {Object} { element, dimensions }\r\n */\r\nText.prototype.layoutText = function(text, options) {\r\n  var box = assign({}, this._config.size, options.box),\r\n      style = assign({}, this._config.style, options.style),\r\n      align = parseAlign(options.align || this._config.align),\r\n      padding = parsePadding(options.padding !== undefined ? options.padding : this._config.padding),\r\n      fitBox = options.fitBox || false;\r\n\r\n  var lineHeight = getLineHeight(style);\r\n\r\n  // we split text by lines and normalize\r\n  // {soft break} + {line break} => { line break }\r\n  var lines = text.split(/\\u00AD?\\r?\\n/),\r\n      layouted = [];\r\n\r\n  var maxWidth = box.width - padding.left - padding.right;\r\n\r\n  // ensure correct rendering by attaching helper text node to invisible SVG\r\n  var helperText = svgCreate('text');\r\n  svgAttr(helperText, { x: 0, y: 0 });\r\n  svgAttr(helperText, style);\r\n\r\n  var helperSvg = getHelperSvg();\r\n\r\n  svgAppend(helperSvg, helperText);\r\n\r\n  while (lines.length) {\r\n    layouted.push(layoutNext(lines, maxWidth, helperText));\r\n  }\r\n\r\n  if (align.vertical === 'middle') {\r\n    padding.top = padding.bottom = 0;\r\n  }\r\n\r\n  var totalHeight = reduce(layouted, function(sum, line, idx) {\r\n    return sum + (lineHeight || line.height);\r\n  }, 0) + padding.top + padding.bottom;\r\n\r\n  var maxLineWidth = reduce(layouted, function(sum, line, idx) {\r\n    return line.width > sum ? line.width : sum;\r\n  }, 0);\r\n\r\n  // the y position of the next line\r\n  var y = padding.top;\r\n\r\n  if (align.vertical === 'middle') {\r\n    y += (box.height - totalHeight) / 2;\r\n  }\r\n\r\n  // magic number initial offset\r\n  y -= (lineHeight || layouted[0].height) / 4;\r\n\r\n\r\n  var textElement = svgCreate('text');\r\n\r\n  svgAttr(textElement, style);\r\n\r\n  // layout each line taking into account that parent\r\n  // shape might resize to fit text size\r\n  forEach(layouted, function(line) {\r\n\r\n    var x;\r\n\r\n    y += (lineHeight || line.height);\r\n\r\n    switch (align.horizontal) {\r\n    case 'left':\r\n      x = padding.left;\r\n      break;\r\n\r\n    case 'right':\r\n      x = ((fitBox ? maxLineWidth : maxWidth)\r\n        - padding.right - line.width);\r\n      break;\r\n\r\n    default:\r\n\r\n      // aka center\r\n      x = Math.max((((fitBox ? maxLineWidth : maxWidth)\r\n        - line.width) / 2 + padding.left), 0);\r\n    }\r\n\r\n    var tspan = svgCreate('tspan');\r\n    svgAttr(tspan, { x: x, y: y });\r\n\r\n    tspan.textContent = line.text;\r\n\r\n    svgAppend(textElement, tspan);\r\n  });\r\n\r\n  svgRemove(helperText);\r\n\r\n  var dimensions = {\r\n    width: maxLineWidth,\r\n    height: totalHeight\r\n  };\r\n\r\n  return {\r\n    dimensions: dimensions,\r\n    element: textElement\r\n  };\r\n};\r\n\r\n\r\nfunction getLineHeight(style) {\r\n  if ('fontSize' in style && 'lineHeight' in style) {\r\n    return style.lineHeight * parseInt(style.fontSize, 10);\r\n  }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}