{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { createHTMLImage, customPropTypes, getElementType, getUnhandledProps, META } from '../../lib';\n\n/**\n * A comment can contain an image or avatar.\n */\nfunction CommentAvatar(props) {\n  var className = props.className,\n    src = props.src;\n  var classes = cx('avatar', className);\n  var rest = getUnhandledProps(CommentAvatar, props);\n  var ElementType = getElementType(CommentAvatar, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), createHTMLImage(src));\n}\nCommentAvatar.handledProps = ['as', 'className', 'src'];\nCommentAvatar._meta = {\n  name: 'CommentAvatar',\n  parent: 'Comment',\n  type: META.TYPES.VIEW\n};\nCommentAvatar.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n  /** Additional classes. */\n  className: PropTypes.string,\n  /** Specifies the URL of the image. */\n  src: PropTypes.string\n} : {};\nexport default CommentAvatar;","map":{"version":3,"names":["_extends","cx","PropTypes","React","createHTMLImage","customPropTypes","getElementType","getUnhandledProps","META","CommentAvatar","props","className","src","classes","rest","ElementType","createElement","handledProps","_meta","name","parent","type","TYPES","VIEW","propTypes","process","env","NODE_ENV","as","string"],"sources":["C:/Users/KondalaRaoThota/Truviq_Camunda/camunda-react/node_modules/react-semantic-redux-form/node_modules/semantic-ui-react/dist/es/views/Comment/CommentAvatar.js"],"sourcesContent":["import _extends from 'babel-runtime/helpers/extends';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { createHTMLImage, customPropTypes, getElementType, getUnhandledProps, META } from '../../lib';\n\n/**\n * A comment can contain an image or avatar.\n */\nfunction CommentAvatar(props) {\n  var className = props.className,\n      src = props.src;\n\n  var classes = cx('avatar', className);\n  var rest = getUnhandledProps(CommentAvatar, props);\n  var ElementType = getElementType(CommentAvatar, props);\n\n  return React.createElement(\n    ElementType,\n    _extends({}, rest, { className: classes }),\n    createHTMLImage(src)\n  );\n}\n\nCommentAvatar.handledProps = ['as', 'className', 'src'];\nCommentAvatar._meta = {\n  name: 'CommentAvatar',\n  parent: 'Comment',\n  type: META.TYPES.VIEW\n};\n\nCommentAvatar.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Specifies the URL of the image. */\n  src: PropTypes.string\n} : {};\n\nexport default CommentAvatar;"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,+BAA+B;AACpD,OAAOC,EAAE,MAAM,YAAY;AAC3B,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,KAAK,MAAM,OAAO;AAEzB,SAASC,eAAe,EAAEC,eAAe,EAAEC,cAAc,EAAEC,iBAAiB,EAAEC,IAAI,QAAQ,WAAW;;AAErG;AACA;AACA;AACA,SAASC,aAAaA,CAACC,KAAK,EAAE;EAC5B,IAAIC,SAAS,GAAGD,KAAK,CAACC,SAAS;IAC3BC,GAAG,GAAGF,KAAK,CAACE,GAAG;EAEnB,IAAIC,OAAO,GAAGZ,EAAE,CAAC,QAAQ,EAAEU,SAAS,CAAC;EACrC,IAAIG,IAAI,GAAGP,iBAAiB,CAACE,aAAa,EAAEC,KAAK,CAAC;EAClD,IAAIK,WAAW,GAAGT,cAAc,CAACG,aAAa,EAAEC,KAAK,CAAC;EAEtD,OAAOP,KAAK,CAACa,aAAa,CACxBD,WAAW,EACXf,QAAQ,CAAC,CAAC,CAAC,EAAEc,IAAI,EAAE;IAAEH,SAAS,EAAEE;EAAQ,CAAC,CAAC,EAC1CT,eAAe,CAACQ,GAAG,CAAC,CACrB;AACH;AAEAH,aAAa,CAACQ,YAAY,GAAG,CAAC,IAAI,EAAE,WAAW,EAAE,KAAK,CAAC;AACvDR,aAAa,CAACS,KAAK,GAAG;EACpBC,IAAI,EAAE,eAAe;EACrBC,MAAM,EAAE,SAAS;EACjBC,IAAI,EAAEb,IAAI,CAACc,KAAK,CAACC;AACnB,CAAC;AAEDd,aAAa,CAACe,SAAS,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAG;EAChE;EACAC,EAAE,EAAEvB,eAAe,CAACuB,EAAE;EAEtB;EACAjB,SAAS,EAAET,SAAS,CAAC2B,MAAM;EAE3B;EACAjB,GAAG,EAAEV,SAAS,CAAC2B;AACjB,CAAC,GAAG,CAAC,CAAC;AAEN,eAAepB,aAAa"},"metadata":{},"sourceType":"module"}