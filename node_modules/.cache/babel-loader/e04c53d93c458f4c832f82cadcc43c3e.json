{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _without from 'lodash/without';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthand, customPropTypes, getElementType, getUnhandledProps, META, SUI, useKeyOnly, useTextAlignProp } from '../../lib';\nimport CardDescription from './CardDescription';\nimport CardHeader from './CardHeader';\nimport CardMeta from './CardMeta';\n\n/**\r\n * A card can contain blocks of content or extra content meant to be formatted separately from the main content.\r\n */\nfunction CardContent(props) {\n  var children = props.children,\n    className = props.className,\n    content = props.content,\n    description = props.description,\n    extra = props.extra,\n    header = props.header,\n    meta = props.meta,\n    textAlign = props.textAlign;\n  var classes = cx(useKeyOnly(extra, 'extra'), useTextAlignProp(textAlign), 'content', className);\n  var rest = getUnhandledProps(CardContent, props);\n  var ElementType = getElementType(CardContent, props);\n  if (!childrenUtils.isNil(children)) return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), children);\n  if (!childrenUtils.isNil(content)) return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), content);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), createShorthand(CardHeader, function (val) {\n    return {\n      content: val\n    };\n  }, header), createShorthand(CardMeta, function (val) {\n    return {\n      content: val\n    };\n  }, meta), createShorthand(CardDescription, function (val) {\n    return {\n      content: val\n    };\n  }, description));\n}\nCardContent.handledProps = ['as', 'children', 'className', 'content', 'description', 'extra', 'header', 'meta', 'textAlign'];\nCardContent._meta = {\n  name: 'CardContent',\n  parent: 'Card',\n  type: META.TYPES.VIEW\n};\nCardContent.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n  /** Primary content. */\n  children: PropTypes.node,\n  /** Additional classes. */\n  className: PropTypes.string,\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n  /** Shorthand for CardDescription. */\n  description: customPropTypes.itemShorthand,\n  /** A card can contain extra content meant to be formatted separately from the main content. */\n  extra: PropTypes.bool,\n  /** Shorthand for CardHeader. */\n  header: customPropTypes.itemShorthand,\n  /** Shorthand for CardMeta. */\n  meta: customPropTypes.itemShorthand,\n  /** A card content can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified'))\n} : {};\nexport default CardContent;","map":{"version":3,"names":["_extends","_without","cx","PropTypes","React","childrenUtils","createShorthand","customPropTypes","getElementType","getUnhandledProps","META","SUI","useKeyOnly","useTextAlignProp","CardDescription","CardHeader","CardMeta","CardContent","props","children","className","content","description","extra","header","meta","textAlign","classes","rest","ElementType","isNil","createElement","val","handledProps","_meta","name","parent","type","TYPES","VIEW","propTypes","process","env","NODE_ENV","as","node","string","contentShorthand","itemShorthand","bool","oneOf","TEXT_ALIGNMENTS"],"sources":["C:/Users/sam/final/camunda-react/node_modules/react-semantic-redux-form/node_modules/semantic-ui-react/dist/es/views/Card/CardContent.js"],"sourcesContent":["import _extends from 'babel-runtime/helpers/extends';\r\nimport _without from 'lodash/without';\r\nimport cx from 'classnames';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\nimport { childrenUtils, createShorthand, customPropTypes, getElementType, getUnhandledProps, META, SUI, useKeyOnly, useTextAlignProp } from '../../lib';\r\nimport CardDescription from './CardDescription';\r\nimport CardHeader from './CardHeader';\r\nimport CardMeta from './CardMeta';\r\n\r\n/**\r\n * A card can contain blocks of content or extra content meant to be formatted separately from the main content.\r\n */\r\nfunction CardContent(props) {\r\n  var children = props.children,\r\n      className = props.className,\r\n      content = props.content,\r\n      description = props.description,\r\n      extra = props.extra,\r\n      header = props.header,\r\n      meta = props.meta,\r\n      textAlign = props.textAlign;\r\n\r\n\r\n  var classes = cx(useKeyOnly(extra, 'extra'), useTextAlignProp(textAlign), 'content', className);\r\n  var rest = getUnhandledProps(CardContent, props);\r\n  var ElementType = getElementType(CardContent, props);\r\n\r\n  if (!childrenUtils.isNil(children)) return React.createElement(\r\n    ElementType,\r\n    _extends({}, rest, { className: classes }),\r\n    children\r\n  );\r\n  if (!childrenUtils.isNil(content)) return React.createElement(\r\n    ElementType,\r\n    _extends({}, rest, { className: classes }),\r\n    content\r\n  );\r\n\r\n  return React.createElement(\r\n    ElementType,\r\n    _extends({}, rest, { className: classes }),\r\n    createShorthand(CardHeader, function (val) {\r\n      return { content: val };\r\n    }, header),\r\n    createShorthand(CardMeta, function (val) {\r\n      return { content: val };\r\n    }, meta),\r\n    createShorthand(CardDescription, function (val) {\r\n      return { content: val };\r\n    }, description)\r\n  );\r\n}\r\n\r\nCardContent.handledProps = ['as', 'children', 'className', 'content', 'description', 'extra', 'header', 'meta', 'textAlign'];\r\nCardContent._meta = {\r\n  name: 'CardContent',\r\n  parent: 'Card',\r\n  type: META.TYPES.VIEW\r\n};\r\n\r\nCardContent.propTypes = process.env.NODE_ENV !== \"production\" ? {\r\n  /** An element type to render as (string or function). */\r\n  as: customPropTypes.as,\r\n\r\n  /** Primary content. */\r\n  children: PropTypes.node,\r\n\r\n  /** Additional classes. */\r\n  className: PropTypes.string,\r\n\r\n  /** Shorthand for primary content. */\r\n  content: customPropTypes.contentShorthand,\r\n\r\n  /** Shorthand for CardDescription. */\r\n  description: customPropTypes.itemShorthand,\r\n\r\n  /** A card can contain extra content meant to be formatted separately from the main content. */\r\n  extra: PropTypes.bool,\r\n\r\n  /** Shorthand for CardHeader. */\r\n  header: customPropTypes.itemShorthand,\r\n\r\n  /** Shorthand for CardMeta. */\r\n  meta: customPropTypes.itemShorthand,\r\n\r\n  /** A card content can adjust its text alignment. */\r\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified'))\r\n} : {};\r\n\r\nexport default CardContent;"],"mappings":"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"},"metadata":{},"sourceType":"module"}