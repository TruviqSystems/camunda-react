{"ast":null,"code":"import * as AT from '../../constants/ActionTypes';\nimport { CALL_API, Schemas } from '../../middleware/api';\nexport const fetchTasks = () => ({\n  [CALL_API]: {\n    types: [AT.TASKS_REQUEST, AT.TASKS_SUCCESS, AT.TASKS_FAILURE],\n    endpoint: 'task?sortBy=created&sortOrder=desc',\n    schema: Schemas.TASK_ARRAY\n  }\n});\nexport const fetchTaskFormKey = taskId => ({\n  [CALL_API]: {\n    types: [AT.TASK_FORM_KEY_REQUEST, AT.TASK_FORM_KEY_SUCCESS, AT.TASK_FORM_KEY_FAILURE],\n    endpoint: `task/${taskId}/form`,\n    schema: Schemas.FORM_KEY\n  }\n});\nexport const postCompleTask = (taskId, values) => ({\n  [CALL_API]: {\n    types: [AT.TASK_SUBMITTED_REQUEST, AT.TASK_SUBMITTED_SUCCESS, AT.TASK_SUBMITTED_FAILURE],\n    endpoint: `task/${taskId}/complete`,\n    schema: Schemas.PROCESS_INSTANCE_STARTED,\n    settings: {\n      method: 'post',\n      body: JSON.stringify(values),\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    }\n  }\n});\nexport const fetchTaskVariables = (taskId, variableNames) => {\n  const variableName = Object.keys(variableNames).join(',');\n  return {\n    [CALL_API]: {\n      types: [AT.TASK_VARIABLES_REQUEST, AT.TASK_VARIABLES_SUCCESS, AT.TASK_VARIABLES_FAILURE],\n      endpoint: `task/${taskId}/form-variables?variableNames=${variableName}`,\n      schema: Schemas.TASK_VARIABLES\n    }\n  };\n};","map":{"version":3,"names":["AT","CALL_API","Schemas","fetchTasks","types","TASKS_REQUEST","TASKS_SUCCESS","TASKS_FAILURE","endpoint","schema","TASK_ARRAY","fetchTaskFormKey","taskId","TASK_FORM_KEY_REQUEST","TASK_FORM_KEY_SUCCESS","TASK_FORM_KEY_FAILURE","FORM_KEY","postCompleTask","values","TASK_SUBMITTED_REQUEST","TASK_SUBMITTED_SUCCESS","TASK_SUBMITTED_FAILURE","PROCESS_INSTANCE_STARTED","settings","method","body","JSON","stringify","headers","fetchTaskVariables","variableNames","variableName","Object","keys","join","TASK_VARIABLES_REQUEST","TASK_VARIABLES_SUCCESS","TASK_VARIABLES_FAILURE","TASK_VARIABLES"],"sources":["C:/Users/KondalaRaoThota/Truviq_Camunda/camunda-react/src/actions/camunda-rest/task.js"],"sourcesContent":["import * as AT from '../../constants/ActionTypes'\r\nimport { CALL_API, Schemas } from '../../middleware/api'\r\n\r\nexport const fetchTasks = () => ({\r\n  [CALL_API]: {\r\n    types: [ AT.TASKS_REQUEST, AT.TASKS_SUCCESS, AT.TASKS_FAILURE ],\r\n    endpoint: 'task?sortBy=created&sortOrder=desc',\r\n    schema: Schemas.TASK_ARRAY\r\n  }\r\n})\r\n\r\nexport const fetchTaskFormKey = (taskId) => ({\r\n  [CALL_API]: {\r\n    types: [ AT.TASK_FORM_KEY_REQUEST, AT.TASK_FORM_KEY_SUCCESS, AT.TASK_FORM_KEY_FAILURE ],\r\n    endpoint: `task/${taskId}/form`,\r\n    schema: Schemas.FORM_KEY\r\n  }\r\n})\r\n\r\nexport const postCompleTask = (taskId, values) => ({\r\n  [CALL_API]: {\r\n    types: [ AT.TASK_SUBMITTED_REQUEST, AT.TASK_SUBMITTED_SUCCESS, AT.TASK_SUBMITTED_FAILURE ],\r\n    endpoint: `task/${taskId}/complete`,\r\n    schema: Schemas.PROCESS_INSTANCE_STARTED,\r\n    settings: {\r\n      method: 'post',\r\n      body: JSON.stringify(values),\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json'\r\n      }\r\n    }\r\n  }\r\n})\r\n\r\nexport const fetchTaskVariables = (taskId, variableNames) => {\r\n  const variableName = Object.keys(variableNames).join(',')\r\n  return {\r\n    [CALL_API]: {\r\n      types: [ AT.TASK_VARIABLES_REQUEST, AT.TASK_VARIABLES_SUCCESS, AT.TASK_VARIABLES_FAILURE ],\r\n      endpoint: `task/${taskId}/form-variables?variableNames=${variableName}`,\r\n      schema: Schemas.TASK_VARIABLES\r\n    }\r\n  }\r\n}\r\n"],"mappings":"AAAA,OAAO,KAAKA,EAAE,MAAM,6BAA6B;AACjD,SAASC,QAAQ,EAAEC,OAAO,QAAQ,sBAAsB;AAExD,OAAO,MAAMC,UAAU,GAAGA,CAAA,MAAO;EAC/B,CAACF,QAAQ,GAAG;IACVG,KAAK,EAAE,CAAEJ,EAAE,CAACK,aAAa,EAAEL,EAAE,CAACM,aAAa,EAAEN,EAAE,CAACO,aAAa,CAAE;IAC/DC,QAAQ,EAAE,oCAAoC;IAC9CC,MAAM,EAAEP,OAAO,CAACQ;EAClB;AACF,CAAC,CAAC;AAEF,OAAO,MAAMC,gBAAgB,GAAIC,MAAM,KAAM;EAC3C,CAACX,QAAQ,GAAG;IACVG,KAAK,EAAE,CAAEJ,EAAE,CAACa,qBAAqB,EAAEb,EAAE,CAACc,qBAAqB,EAAEd,EAAE,CAACe,qBAAqB,CAAE;IACvFP,QAAQ,EAAG,QAAOI,MAAO,OAAM;IAC/BH,MAAM,EAAEP,OAAO,CAACc;EAClB;AACF,CAAC,CAAC;AAEF,OAAO,MAAMC,cAAc,GAAGA,CAACL,MAAM,EAAEM,MAAM,MAAM;EACjD,CAACjB,QAAQ,GAAG;IACVG,KAAK,EAAE,CAAEJ,EAAE,CAACmB,sBAAsB,EAAEnB,EAAE,CAACoB,sBAAsB,EAAEpB,EAAE,CAACqB,sBAAsB,CAAE;IAC1Fb,QAAQ,EAAG,QAAOI,MAAO,WAAU;IACnCH,MAAM,EAAEP,OAAO,CAACoB,wBAAwB;IACxCC,QAAQ,EAAE;MACRC,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACT,MAAM,CAAC;MAC5BU,OAAO,EAAE;QACP,QAAQ,EAAE,kBAAkB;QAC5B,cAAc,EAAE;MAClB;IACF;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAMC,kBAAkB,GAAGA,CAACjB,MAAM,EAAEkB,aAAa,KAAK;EAC3D,MAAMC,YAAY,GAAGC,MAAM,CAACC,IAAI,CAACH,aAAa,CAAC,CAACI,IAAI,CAAC,GAAG,CAAC;EACzD,OAAO;IACL,CAACjC,QAAQ,GAAG;MACVG,KAAK,EAAE,CAAEJ,EAAE,CAACmC,sBAAsB,EAAEnC,EAAE,CAACoC,sBAAsB,EAAEpC,EAAE,CAACqC,sBAAsB,CAAE;MAC1F7B,QAAQ,EAAG,QAAOI,MAAO,iCAAgCmB,YAAa,EAAC;MACvEtB,MAAM,EAAEP,OAAO,CAACoC;IAClB;EACF,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module"}