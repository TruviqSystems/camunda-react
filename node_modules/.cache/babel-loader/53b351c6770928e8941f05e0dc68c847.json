{"ast":null,"code":"import { isFunction } from 'min-dash';\nimport { closest as domClosest, event as domEvent, matches as domMatches } from 'min-dom';\nimport { hasModifier, isCmd, isKey, isShift } from './KeyboardUtil';\nvar KEYDOWN_EVENT = 'keyboard.keydown',\n  KEYUP_EVENT = 'keyboard.keyup';\nvar HANDLE_MODIFIER_ATTRIBUTE = 'input-handle-modified-keys';\nvar DEFAULT_PRIORITY = 1000;\n\n/**\n * A keyboard abstraction that may be activated and\n * deactivated by users at will, consuming key events\n * and triggering diagram actions.\n *\n * For keys pressed down, keyboard fires `keyboard.keydown` event.\n * The event context contains one field which is `KeyboardEvent` event.\n *\n * The implementation fires the following key events that allow\n * other components to hook into key handling:\n *\n *  - keyboard.bind\n *  - keyboard.unbind\n *  - keyboard.init\n *  - keyboard.destroy\n *\n * All events contain one field which is node.\n *\n * A default binding for the keyboard may be specified via the\n * `keyboard.bindTo` configuration option.\n *\n * @param {Config} config\n * @param {EventBus} eventBus\n */\nexport default function Keyboard(config, eventBus) {\n  var self = this;\n  this._config = config || {};\n  this._eventBus = eventBus;\n  this._keydownHandler = this._keydownHandler.bind(this);\n  this._keyupHandler = this._keyupHandler.bind(this);\n\n  // properly clean dom registrations\n  eventBus.on('diagram.destroy', function () {\n    self._fire('destroy');\n    self.unbind();\n  });\n  eventBus.on('diagram.init', function () {\n    self._fire('init');\n  });\n  eventBus.on('attach', function () {\n    if (config && config.bindTo) {\n      self.bind(config.bindTo);\n    }\n  });\n  eventBus.on('detach', function () {\n    self.unbind();\n  });\n}\nKeyboard.$inject = ['config.keyboard', 'eventBus'];\nKeyboard.prototype._keydownHandler = function (event) {\n  this._keyHandler(event, KEYDOWN_EVENT);\n};\nKeyboard.prototype._keyupHandler = function (event) {\n  this._keyHandler(event, KEYUP_EVENT);\n};\nKeyboard.prototype._keyHandler = function (event, type) {\n  var eventBusResult;\n  if (this._isEventIgnored(event)) {\n    return;\n  }\n  var context = {\n    keyEvent: event\n  };\n  eventBusResult = this._eventBus.fire(type || KEYDOWN_EVENT, context);\n  if (eventBusResult) {\n    event.preventDefault();\n  }\n};\nKeyboard.prototype._isEventIgnored = function (event) {\n  return isInput(event.target) && this._isModifiedKeyIgnored(event);\n};\nKeyboard.prototype._isModifiedKeyIgnored = function (event) {\n  if (!isCmd(event)) {\n    return true;\n  }\n  var allowedModifiers = this._getAllowedModifiers(event.target);\n  return !allowedModifiers.includes(event.key);\n};\nKeyboard.prototype._getAllowedModifiers = function (element) {\n  var modifierContainer = domClosest(element, '[' + HANDLE_MODIFIER_ATTRIBUTE + ']', true);\n  if (!modifierContainer || this._node && !this._node.contains(modifierContainer)) {\n    return [];\n  }\n  return modifierContainer.getAttribute(HANDLE_MODIFIER_ATTRIBUTE).split(',');\n};\nKeyboard.prototype.bind = function (node) {\n  // make sure that the keyboard is only bound once to the DOM\n  this.unbind();\n  this._node = node;\n\n  // bind key events\n  domEvent.bind(node, 'keydown', this._keydownHandler, true);\n  domEvent.bind(node, 'keyup', this._keyupHandler, true);\n  this._fire('bind');\n};\nKeyboard.prototype.getBinding = function () {\n  return this._node;\n};\nKeyboard.prototype.unbind = function () {\n  var node = this._node;\n  if (node) {\n    this._fire('unbind');\n\n    // unbind key events\n    domEvent.unbind(node, 'keydown', this._keydownHandler, true);\n    domEvent.unbind(node, 'keyup', this._keyupHandler, true);\n  }\n  this._node = null;\n};\nKeyboard.prototype._fire = function (event) {\n  this._eventBus.fire('keyboard.' + event, {\n    node: this._node\n  });\n};\n\n/**\n * Add a listener function that is notified with `KeyboardEvent` whenever\n * the keyboard is bound and the user presses a key. If no priority is\n * provided, the default value of 1000 is used.\n *\n * @param {number} [priority]\n * @param {Function} listener\n * @param {string} type\n */\nKeyboard.prototype.addListener = function (priority, listener, type) {\n  if (isFunction(priority)) {\n    type = listener;\n    listener = priority;\n    priority = DEFAULT_PRIORITY;\n  }\n  this._eventBus.on(type || KEYDOWN_EVENT, priority, listener);\n};\nKeyboard.prototype.removeListener = function (listener, type) {\n  this._eventBus.off(type || KEYDOWN_EVENT, listener);\n};\nKeyboard.prototype.hasModifier = hasModifier;\nKeyboard.prototype.isCmd = isCmd;\nKeyboard.prototype.isShift = isShift;\nKeyboard.prototype.isKey = isKey;\n\n// helpers ///////\n\nfunction isInput(target) {\n  return target && (domMatches(target, 'input, textarea') || target.contentEditable === 'true');\n}","map":{"version":3,"names":["isFunction","closest","domClosest","event","domEvent","matches","domMatches","hasModifier","isCmd","isKey","isShift","KEYDOWN_EVENT","KEYUP_EVENT","HANDLE_MODIFIER_ATTRIBUTE","DEFAULT_PRIORITY","Keyboard","config","eventBus","self","_config","_eventBus","_keydownHandler","bind","_keyupHandler","on","_fire","unbind","bindTo","$inject","prototype","_keyHandler","type","eventBusResult","_isEventIgnored","context","keyEvent","fire","preventDefault","isInput","target","_isModifiedKeyIgnored","allowedModifiers","_getAllowedModifiers","includes","key","element","modifierContainer","_node","contains","getAttribute","split","node","getBinding","addListener","priority","listener","removeListener","off","contentEditable"],"sources":["C:/Users/KondalaRaoThota/Truviq_Camunda/camunda-react/node_modules/diagram-js/lib/features/keyboard/Keyboard.js"],"sourcesContent":["import {\n  isFunction\n} from 'min-dash';\n\nimport {\n  closest as domClosest,\n  event as domEvent,\n  matches as domMatches\n} from 'min-dom';\n\nimport {\n  hasModifier,\n  isCmd,\n  isKey,\n  isShift\n} from './KeyboardUtil';\n\nvar KEYDOWN_EVENT = 'keyboard.keydown',\n    KEYUP_EVENT = 'keyboard.keyup';\n\nvar HANDLE_MODIFIER_ATTRIBUTE = 'input-handle-modified-keys';\n\nvar DEFAULT_PRIORITY = 1000;\n\n/**\n * A keyboard abstraction that may be activated and\n * deactivated by users at will, consuming key events\n * and triggering diagram actions.\n *\n * For keys pressed down, keyboard fires `keyboard.keydown` event.\n * The event context contains one field which is `KeyboardEvent` event.\n *\n * The implementation fires the following key events that allow\n * other components to hook into key handling:\n *\n *  - keyboard.bind\n *  - keyboard.unbind\n *  - keyboard.init\n *  - keyboard.destroy\n *\n * All events contain one field which is node.\n *\n * A default binding for the keyboard may be specified via the\n * `keyboard.bindTo` configuration option.\n *\n * @param {Config} config\n * @param {EventBus} eventBus\n */\nexport default function Keyboard(config, eventBus) {\n  var self = this;\n\n  this._config = config || {};\n  this._eventBus = eventBus;\n\n  this._keydownHandler = this._keydownHandler.bind(this);\n  this._keyupHandler = this._keyupHandler.bind(this);\n\n  // properly clean dom registrations\n  eventBus.on('diagram.destroy', function() {\n    self._fire('destroy');\n\n    self.unbind();\n  });\n\n  eventBus.on('diagram.init', function() {\n    self._fire('init');\n  });\n\n  eventBus.on('attach', function() {\n    if (config && config.bindTo) {\n      self.bind(config.bindTo);\n    }\n  });\n\n  eventBus.on('detach', function() {\n    self.unbind();\n  });\n}\n\nKeyboard.$inject = [\n  'config.keyboard',\n  'eventBus'\n];\n\nKeyboard.prototype._keydownHandler = function(event) {\n  this._keyHandler(event, KEYDOWN_EVENT);\n};\n\nKeyboard.prototype._keyupHandler = function(event) {\n  this._keyHandler(event, KEYUP_EVENT);\n};\n\nKeyboard.prototype._keyHandler = function(event, type) {\n  var eventBusResult;\n\n  if (this._isEventIgnored(event)) {\n    return;\n  }\n\n  var context = {\n    keyEvent: event\n  };\n\n  eventBusResult = this._eventBus.fire(type || KEYDOWN_EVENT, context);\n\n  if (eventBusResult) {\n    event.preventDefault();\n  }\n};\n\nKeyboard.prototype._isEventIgnored = function(event) {\n  return isInput(event.target) && this._isModifiedKeyIgnored(event);\n};\n\nKeyboard.prototype._isModifiedKeyIgnored = function(event) {\n  if (!isCmd(event)) {\n    return true;\n  }\n\n  var allowedModifiers = this._getAllowedModifiers(event.target);\n  return !allowedModifiers.includes(event.key);\n};\n\nKeyboard.prototype._getAllowedModifiers = function(element) {\n  var modifierContainer = domClosest(element, '[' + HANDLE_MODIFIER_ATTRIBUTE + ']', true);\n\n  if (!modifierContainer || (this._node && !this._node.contains(modifierContainer))) {\n    return [];\n  }\n\n  return modifierContainer.getAttribute(HANDLE_MODIFIER_ATTRIBUTE).split(',');\n};\n\nKeyboard.prototype.bind = function(node) {\n\n  // make sure that the keyboard is only bound once to the DOM\n  this.unbind();\n\n  this._node = node;\n\n  // bind key events\n  domEvent.bind(node, 'keydown', this._keydownHandler, true);\n  domEvent.bind(node, 'keyup', this._keyupHandler, true);\n\n  this._fire('bind');\n};\n\nKeyboard.prototype.getBinding = function() {\n  return this._node;\n};\n\nKeyboard.prototype.unbind = function() {\n  var node = this._node;\n\n  if (node) {\n    this._fire('unbind');\n\n    // unbind key events\n    domEvent.unbind(node, 'keydown', this._keydownHandler, true);\n    domEvent.unbind(node, 'keyup', this._keyupHandler, true);\n  }\n\n  this._node = null;\n};\n\nKeyboard.prototype._fire = function(event) {\n  this._eventBus.fire('keyboard.' + event, { node: this._node });\n};\n\n/**\n * Add a listener function that is notified with `KeyboardEvent` whenever\n * the keyboard is bound and the user presses a key. If no priority is\n * provided, the default value of 1000 is used.\n *\n * @param {number} [priority]\n * @param {Function} listener\n * @param {string} type\n */\nKeyboard.prototype.addListener = function(priority, listener, type) {\n  if (isFunction(priority)) {\n    type = listener;\n    listener = priority;\n    priority = DEFAULT_PRIORITY;\n  }\n\n  this._eventBus.on(type || KEYDOWN_EVENT, priority, listener);\n};\n\nKeyboard.prototype.removeListener = function(listener, type) {\n  this._eventBus.off(type || KEYDOWN_EVENT, listener);\n};\n\nKeyboard.prototype.hasModifier = hasModifier;\nKeyboard.prototype.isCmd = isCmd;\nKeyboard.prototype.isShift = isShift;\nKeyboard.prototype.isKey = isKey;\n\n\n\n// helpers ///////\n\nfunction isInput(target) {\n  return target && (domMatches(target, 'input, textarea') || target.contentEditable === 'true');\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}