{"ast":null,"code":"import * as ActionTypes from '../constants/ActionTypes';\nimport merge from 'lodash/merge';\nimport { combineReducers } from 'redux';\nimport { reducer as reduxFormReducer } from 'redux-form';\n\n// Updates an entity cache in response to any action with response.entities.\nconst entities = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  const {\n    type\n  } = action;\n  if (type === ActionTypes.TASK_SUBMITTED_SUCCESS || type === ActionTypes.TASK_SUBMITTED_FAILURE) {\n    return merge({}, state, {\n      redirect: '/tasklist'\n    });\n  } else {\n    state = merge({}, state, {\n      redirect: null\n    });\n  }\n  if (type === ActionTypes.NEW_PROCESS_INSTANCE_SUCCESS) {\n    state.formKey = null;\n  }\n  if (type === ActionTypes.FORM_KEY_SUCCESS) {\n    state.processInstanceStarted = null;\n  }\n  if (type === ActionTypes.TASKS_SUCCESS) {\n    state.task = null;\n  }\n  if (action.response && action.response.entities) {\n    return merge({}, state, action.response.entities);\n  }\n  return state;\n};\nconst rootReducer = combineReducers({\n  form: reduxFormReducer,\n  entities\n});\nexport default rootReducer;","map":{"version":3,"names":["ActionTypes","merge","combineReducers","reducer","reduxFormReducer","entities","state","arguments","length","undefined","action","type","TASK_SUBMITTED_SUCCESS","TASK_SUBMITTED_FAILURE","redirect","NEW_PROCESS_INSTANCE_SUCCESS","formKey","FORM_KEY_SUCCESS","processInstanceStarted","TASKS_SUCCESS","task","response","rootReducer","form"],"sources":["C:/Users/KondalaRaoThota/Truviq_Camunda/camunda-react/src/reducers/index.js"],"sourcesContent":["import * as ActionTypes from '../constants/ActionTypes'\r\nimport merge from 'lodash/merge'\r\nimport { combineReducers } from 'redux'\r\nimport { reducer as reduxFormReducer } from 'redux-form'\r\n\r\n// Updates an entity cache in response to any action with response.entities.\r\nconst entities = (state = {}, action) => {\r\n  const { type } = action\r\n  if (type === ActionTypes.TASK_SUBMITTED_SUCCESS || type === ActionTypes.TASK_SUBMITTED_FAILURE) {\r\n    return merge({}, state, {\r\n      redirect: '/tasklist'\r\n    })\r\n  } else {\r\n    state = merge({}, state, {\r\n      redirect: null\r\n    })\r\n  }\r\n  if (type === ActionTypes.NEW_PROCESS_INSTANCE_SUCCESS) {\r\n    state.formKey = null\r\n  }\r\n  if (type === ActionTypes.FORM_KEY_SUCCESS) {\r\n    state.processInstanceStarted = null\r\n  }\r\n  if (type === ActionTypes.TASKS_SUCCESS) {\r\n    state.task = null\r\n  }\r\n\r\n  if (action.response && action.response.entities) {\r\n    return merge({}, state, action.response.entities)\r\n  }\r\n  return state\r\n}\r\n\r\nconst rootReducer = combineReducers({\r\n  form: reduxFormReducer,\r\n  entities\r\n})\r\n\r\nexport default rootReducer\r\n"],"mappings":"AAAA,OAAO,KAAKA,WAAW,MAAM,0BAA0B;AACvD,OAAOC,KAAK,MAAM,cAAc;AAChC,SAASC,eAAe,QAAQ,OAAO;AACvC,SAASC,OAAO,IAAIC,gBAAgB,QAAQ,YAAY;;AAExD;AACA,MAAMC,QAAQ,GAAG,SAAAA,CAAA,EAAwB;EAAA,IAAvBC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EAAA,IAAEG,MAAM,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAClC,MAAM;IAAEE;EAAK,CAAC,GAAGD,MAAM;EACvB,IAAIC,IAAI,KAAKX,WAAW,CAACY,sBAAsB,IAAID,IAAI,KAAKX,WAAW,CAACa,sBAAsB,EAAE;IAC9F,OAAOZ,KAAK,CAAC,CAAC,CAAC,EAAEK,KAAK,EAAE;MACtBQ,QAAQ,EAAE;IACZ,CAAC,CAAC;EACJ,CAAC,MAAM;IACLR,KAAK,GAAGL,KAAK,CAAC,CAAC,CAAC,EAAEK,KAAK,EAAE;MACvBQ,QAAQ,EAAE;IACZ,CAAC,CAAC;EACJ;EACA,IAAIH,IAAI,KAAKX,WAAW,CAACe,4BAA4B,EAAE;IACrDT,KAAK,CAACU,OAAO,GAAG,IAAI;EACtB;EACA,IAAIL,IAAI,KAAKX,WAAW,CAACiB,gBAAgB,EAAE;IACzCX,KAAK,CAACY,sBAAsB,GAAG,IAAI;EACrC;EACA,IAAIP,IAAI,KAAKX,WAAW,CAACmB,aAAa,EAAE;IACtCb,KAAK,CAACc,IAAI,GAAG,IAAI;EACnB;EAEA,IAAIV,MAAM,CAACW,QAAQ,IAAIX,MAAM,CAACW,QAAQ,CAAChB,QAAQ,EAAE;IAC/C,OAAOJ,KAAK,CAAC,CAAC,CAAC,EAAEK,KAAK,EAAEI,MAAM,CAACW,QAAQ,CAAChB,QAAQ,CAAC;EACnD;EACA,OAAOC,KAAK;AACd,CAAC;AAED,MAAMgB,WAAW,GAAGpB,eAAe,CAAC;EAClCqB,IAAI,EAAEnB,gBAAgB;EACtBC;AACF,CAAC,CAAC;AAEF,eAAeiB,WAAW"},"metadata":{},"sourceType":"module"}