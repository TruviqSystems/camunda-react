{"ast":null,"code":"import _typeof from 'babel-runtime/helpers/typeof';\nimport { numberToWord } from './numberToWord';\n\n/*\r\n * There are 3 prop patterns used to build up the className for a component.\r\n * Each utility here is meant for use in a classnames() argument.\r\n *\r\n * There is no util for valueOnly() because it would simply return val.\r\n * Use the prop value inline instead.\r\n *   <Label size='big' />\r\n *   <div class=\"ui big label\"></div>\r\n */\n\n/**\r\n * Props where only the prop key is used in the className.\r\n * @param {*} val A props value\r\n * @param {string} key A props key\r\n *\r\n * @example\r\n * <Label tag />\r\n * <div class=\"ui tag label\"></div>\r\n */\nexport var useKeyOnly = function useKeyOnly(val, key) {\n  return val && key;\n};\n\n/**\r\n * Props that require both a key and value to create a className.\r\n * @param {*} val A props value\r\n * @param {string} key A props key\r\n *\r\n * @example\r\n * <Label corner='left' />\r\n * <div class=\"ui left corner label\"></div>\r\n */\nexport var useValueAndKey = function useValueAndKey(val, key) {\n  return val && val !== true && val + ' ' + key;\n};\n\n/**\r\n * Props whose key will be used in className, or value and key.\r\n * @param {*} val A props value\r\n * @param {string} key A props key\r\n *\r\n * @example Key Only\r\n * <Label pointing />\r\n * <div class=\"ui pointing label\"></div>\r\n *\r\n * @example Key and Value\r\n * <Label pointing='left' />\r\n * <div class=\"ui left pointing label\"></div>\r\n */\nexport var useKeyOrValueAndKey = function useKeyOrValueAndKey(val, key) {\n  return val && (val === true ? key : val + ' ' + key);\n};\n\n//\n// Prop to className exceptions\n//\n\n/**\r\n * The \"multiple\" prop implements control of visibility and reserved classes for Grid subcomponents.\r\n *\r\n * @param {*} val The value of the \"multiple\" prop\r\n * @param {*} key A props key\r\n *\r\n * @example\r\n * <Grid.Row only='mobile' />\r\n * <Grid.Row only='mobile tablet' />\r\n * <div class=\"mobile only row\"></div>\r\n * <div class=\"mobile only tablet only row\"></div>\r\n */\nexport var useMultipleProp = function useMultipleProp(val, key) {\n  if (!val || val === true) return null;\n  return val.replace('large screen', 'large-screen').replace(/ vertically/g, '-vertically').split(' ').map(function (prop) {\n    return prop.replace('-', ' ') + ' ' + key;\n  }).join(' ');\n};\n\n/**\r\n * The \"textAlign\" prop follows the useValueAndKey except when the value is \"justified'.\r\n * In this case, only the class \"justified\" is used, ignoring the \"aligned\" class.\r\n * @param {*} val The value of the \"textAlign\" prop\r\n *\r\n * @example\r\n * <Container textAlign='justified' />\r\n * <div class=\"ui justified container\"></div>\r\n *\r\n * @example\r\n * <Container textAlign='left' />\r\n * <div class=\"ui left aligned container\"></div>\r\n */\nexport var useTextAlignProp = function useTextAlignProp(val) {\n  return val === 'justified' ? 'justified' : useValueAndKey(val, 'aligned');\n};\n\n/**\r\n * The \"verticalAlign\" prop follows the useValueAndKey.\r\n *\r\n * @param {*} val The value of the \"verticalAlign\" prop\r\n *\r\n * @example\r\n * <Grid verticalAlign='middle' />\r\n * <div class=\"ui middle aligned grid\"></div>\r\n */\nexport var useVerticalAlignProp = function useVerticalAlignProp(val) {\n  return useValueAndKey(val, 'aligned');\n};\n\n/**\r\n * Create \"X\", \"X wide\" and \"equal width\" classNames.\r\n * \"X\" is a numberToWord value and \"wide\" is configurable.\r\n * @param {*} val The prop value\r\n * @param {string} [widthClass=''] The class\r\n * @param {boolean} [canEqual=false] Flag that indicates possibility of \"equal\" value\r\n *\r\n * @example\r\n * <Grid columns='equal' />\r\n * <div class=\"ui equal width grid\"></div>\r\n *\r\n * <Form widths='equal' />\r\n * <div class=\"ui equal width form\"></div>\r\n *\r\n * <FieldGroup widths='equal' />\r\n * <div class=\"equal width fields\"></div>\r\n *\r\n * @example\r\n * <Grid columns={4} />\r\n * <div class=\"ui four column grid\"></div>\r\n */\nexport var useWidthProp = function useWidthProp(val) {\n  var widthClass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var canEqual = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  if (canEqual && val === 'equal') {\n    return 'equal width';\n  }\n  var valType = typeof val === 'undefined' ? 'undefined' : _typeof(val);\n  if ((valType === 'string' || valType === 'number') && widthClass) {\n    return numberToWord(val) + ' ' + widthClass;\n  }\n  return numberToWord(val);\n};","map":{"version":3,"names":["_typeof","numberToWord","useKeyOnly","val","key","useValueAndKey","useKeyOrValueAndKey","useMultipleProp","replace","split","map","prop","join","useTextAlignProp","useVerticalAlignProp","useWidthProp","widthClass","arguments","length","undefined","canEqual","valType"],"sources":["C:/Users/sam/final/camunda-react/node_modules/react-semantic-redux-form/node_modules/semantic-ui-react/dist/es/lib/classNameBuilders.js"],"sourcesContent":["import _typeof from 'babel-runtime/helpers/typeof';\r\nimport { numberToWord } from './numberToWord';\r\n\r\n/*\r\n * There are 3 prop patterns used to build up the className for a component.\r\n * Each utility here is meant for use in a classnames() argument.\r\n *\r\n * There is no util for valueOnly() because it would simply return val.\r\n * Use the prop value inline instead.\r\n *   <Label size='big' />\r\n *   <div class=\"ui big label\"></div>\r\n */\r\n\r\n/**\r\n * Props where only the prop key is used in the className.\r\n * @param {*} val A props value\r\n * @param {string} key A props key\r\n *\r\n * @example\r\n * <Label tag />\r\n * <div class=\"ui tag label\"></div>\r\n */\r\nexport var useKeyOnly = function useKeyOnly(val, key) {\r\n  return val && key;\r\n};\r\n\r\n/**\r\n * Props that require both a key and value to create a className.\r\n * @param {*} val A props value\r\n * @param {string} key A props key\r\n *\r\n * @example\r\n * <Label corner='left' />\r\n * <div class=\"ui left corner label\"></div>\r\n */\r\nexport var useValueAndKey = function useValueAndKey(val, key) {\r\n  return val && val !== true && val + ' ' + key;\r\n};\r\n\r\n/**\r\n * Props whose key will be used in className, or value and key.\r\n * @param {*} val A props value\r\n * @param {string} key A props key\r\n *\r\n * @example Key Only\r\n * <Label pointing />\r\n * <div class=\"ui pointing label\"></div>\r\n *\r\n * @example Key and Value\r\n * <Label pointing='left' />\r\n * <div class=\"ui left pointing label\"></div>\r\n */\r\nexport var useKeyOrValueAndKey = function useKeyOrValueAndKey(val, key) {\r\n  return val && (val === true ? key : val + ' ' + key);\r\n};\r\n\r\n//\r\n// Prop to className exceptions\r\n//\r\n\r\n/**\r\n * The \"multiple\" prop implements control of visibility and reserved classes for Grid subcomponents.\r\n *\r\n * @param {*} val The value of the \"multiple\" prop\r\n * @param {*} key A props key\r\n *\r\n * @example\r\n * <Grid.Row only='mobile' />\r\n * <Grid.Row only='mobile tablet' />\r\n * <div class=\"mobile only row\"></div>\r\n * <div class=\"mobile only tablet only row\"></div>\r\n */\r\nexport var useMultipleProp = function useMultipleProp(val, key) {\r\n  if (!val || val === true) return null;\r\n\r\n  return val.replace('large screen', 'large-screen').replace(/ vertically/g, '-vertically').split(' ').map(function (prop) {\r\n    return prop.replace('-', ' ') + ' ' + key;\r\n  }).join(' ');\r\n};\r\n\r\n/**\r\n * The \"textAlign\" prop follows the useValueAndKey except when the value is \"justified'.\r\n * In this case, only the class \"justified\" is used, ignoring the \"aligned\" class.\r\n * @param {*} val The value of the \"textAlign\" prop\r\n *\r\n * @example\r\n * <Container textAlign='justified' />\r\n * <div class=\"ui justified container\"></div>\r\n *\r\n * @example\r\n * <Container textAlign='left' />\r\n * <div class=\"ui left aligned container\"></div>\r\n */\r\nexport var useTextAlignProp = function useTextAlignProp(val) {\r\n  return val === 'justified' ? 'justified' : useValueAndKey(val, 'aligned');\r\n};\r\n\r\n/**\r\n * The \"verticalAlign\" prop follows the useValueAndKey.\r\n *\r\n * @param {*} val The value of the \"verticalAlign\" prop\r\n *\r\n * @example\r\n * <Grid verticalAlign='middle' />\r\n * <div class=\"ui middle aligned grid\"></div>\r\n */\r\nexport var useVerticalAlignProp = function useVerticalAlignProp(val) {\r\n  return useValueAndKey(val, 'aligned');\r\n};\r\n\r\n/**\r\n * Create \"X\", \"X wide\" and \"equal width\" classNames.\r\n * \"X\" is a numberToWord value and \"wide\" is configurable.\r\n * @param {*} val The prop value\r\n * @param {string} [widthClass=''] The class\r\n * @param {boolean} [canEqual=false] Flag that indicates possibility of \"equal\" value\r\n *\r\n * @example\r\n * <Grid columns='equal' />\r\n * <div class=\"ui equal width grid\"></div>\r\n *\r\n * <Form widths='equal' />\r\n * <div class=\"ui equal width form\"></div>\r\n *\r\n * <FieldGroup widths='equal' />\r\n * <div class=\"equal width fields\"></div>\r\n *\r\n * @example\r\n * <Grid columns={4} />\r\n * <div class=\"ui four column grid\"></div>\r\n */\r\nexport var useWidthProp = function useWidthProp(val) {\r\n  var widthClass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\r\n  var canEqual = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\r\n\r\n  if (canEqual && val === 'equal') {\r\n    return 'equal width';\r\n  }\r\n  var valType = typeof val === 'undefined' ? 'undefined' : _typeof(val);\r\n  if ((valType === 'string' || valType === 'number') && widthClass) {\r\n    return numberToWord(val) + ' ' + widthClass;\r\n  }\r\n  return numberToWord(val);\r\n};"],"mappings":"AAAA,OAAOA,OAAO,MAAM,8BAA8B;AAClD,SAASC,YAAY,QAAQ,gBAAgB;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,UAAU,GAAG,SAASA,UAAUA,CAACC,GAAG,EAAEC,GAAG,EAAE;EACpD,OAAOD,GAAG,IAAIC,GAAG;AACnB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,cAAc,GAAG,SAASA,cAAcA,CAACF,GAAG,EAAEC,GAAG,EAAE;EAC5D,OAAOD,GAAG,IAAIA,GAAG,KAAK,IAAI,IAAIA,GAAG,GAAG,GAAG,GAAGC,GAAG;AAC/C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIE,mBAAmB,GAAG,SAASA,mBAAmBA,CAACH,GAAG,EAAEC,GAAG,EAAE;EACtE,OAAOD,GAAG,KAAKA,GAAG,KAAK,IAAI,GAAGC,GAAG,GAAGD,GAAG,GAAG,GAAG,GAAGC,GAAG,CAAC;AACtD,CAAC;;AAED;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIG,eAAe,GAAG,SAASA,eAAeA,CAACJ,GAAG,EAAEC,GAAG,EAAE;EAC9D,IAAI,CAACD,GAAG,IAAIA,GAAG,KAAK,IAAI,EAAE,OAAO,IAAI;EAErC,OAAOA,GAAG,CAACK,OAAO,CAAC,cAAc,EAAE,cAAc,CAAC,CAACA,OAAO,CAAC,cAAc,EAAE,aAAa,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,UAAUC,IAAI,EAAE;IACvH,OAAOA,IAAI,CAACH,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,GAAG,GAAGJ,GAAG;EAC3C,CAAC,CAAC,CAACQ,IAAI,CAAC,GAAG,CAAC;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,gBAAgB,GAAG,SAASA,gBAAgBA,CAACV,GAAG,EAAE;EAC3D,OAAOA,GAAG,KAAK,WAAW,GAAG,WAAW,GAAGE,cAAc,CAACF,GAAG,EAAE,SAAS,CAAC;AAC3E,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIW,oBAAoB,GAAG,SAASA,oBAAoBA,CAACX,GAAG,EAAE;EACnE,OAAOE,cAAc,CAACF,GAAG,EAAE,SAAS,CAAC;AACvC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIY,YAAY,GAAG,SAASA,YAAYA,CAACZ,GAAG,EAAE;EACnD,IAAIa,UAAU,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE;EACvF,IAAIG,QAAQ,GAAGH,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,KAAK;EAExF,IAAIG,QAAQ,IAAIjB,GAAG,KAAK,OAAO,EAAE;IAC/B,OAAO,aAAa;EACtB;EACA,IAAIkB,OAAO,GAAG,OAAOlB,GAAG,KAAK,WAAW,GAAG,WAAW,GAAGH,OAAO,CAACG,GAAG,CAAC;EACrE,IAAI,CAACkB,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,QAAQ,KAAKL,UAAU,EAAE;IAChE,OAAOf,YAAY,CAACE,GAAG,CAAC,GAAG,GAAG,GAAGa,UAAU;EAC7C;EACA,OAAOf,YAAY,CAACE,GAAG,CAAC;AAC1B,CAAC"},"metadata":{},"sourceType":"module"}