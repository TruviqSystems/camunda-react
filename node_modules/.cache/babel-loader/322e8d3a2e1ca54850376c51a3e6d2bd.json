{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, META, useKeyOnly } from '../../lib';\n\n/**\n * A divider visually segments content into groups.\n */\nfunction Divider(props) {\n  var children = props.children,\n    className = props.className,\n    clearing = props.clearing,\n    content = props.content,\n    fitted = props.fitted,\n    hidden = props.hidden,\n    horizontal = props.horizontal,\n    inverted = props.inverted,\n    section = props.section,\n    vertical = props.vertical;\n  var classes = cx('ui', useKeyOnly(clearing, 'clearing'), useKeyOnly(fitted, 'fitted'), useKeyOnly(hidden, 'hidden'), useKeyOnly(horizontal, 'horizontal'), useKeyOnly(inverted, 'inverted'), useKeyOnly(section, 'section'), useKeyOnly(vertical, 'vertical'), 'divider', className);\n  var rest = getUnhandledProps(Divider, props);\n  var ElementType = getElementType(Divider, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\nDivider.handledProps = ['as', 'children', 'className', 'clearing', 'content', 'fitted', 'hidden', 'horizontal', 'inverted', 'section', 'vertical'];\nDivider._meta = {\n  name: 'Divider',\n  type: META.TYPES.ELEMENT\n};\nDivider.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n  /** Primary content. */\n  children: PropTypes.node,\n  /** Additional classes. */\n  className: PropTypes.string,\n  /** Divider can clear the content above it. */\n  clearing: PropTypes.bool,\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n  /** Divider can be fitted without any space above or below it. */\n  fitted: PropTypes.bool,\n  /** Divider can divide content without creating a dividing line. */\n  hidden: PropTypes.bool,\n  /** Divider can segment content horizontally. */\n  horizontal: PropTypes.bool,\n  /** Divider can have its colours inverted. */\n  inverted: PropTypes.bool,\n  /** Divider can provide greater margins to divide sections of content. */\n  section: PropTypes.bool,\n  /** Divider can segment content vertically. */\n  vertical: PropTypes.bool\n} : {};\nexport default Divider;","map":{"version":3,"names":["_extends","cx","PropTypes","React","childrenUtils","customPropTypes","getElementType","getUnhandledProps","META","useKeyOnly","Divider","props","children","className","clearing","content","fitted","hidden","horizontal","inverted","section","vertical","classes","rest","ElementType","createElement","isNil","handledProps","_meta","name","type","TYPES","ELEMENT","propTypes","process","env","NODE_ENV","as","node","string","bool","contentShorthand"],"sources":["C:/Users/KondalaRaoThota/Truviq_Camunda/camunda-react/node_modules/react-semantic-redux-form/node_modules/semantic-ui-react/dist/es/elements/Divider/Divider.js"],"sourcesContent":["import _extends from 'babel-runtime/helpers/extends';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, META, useKeyOnly } from '../../lib';\n\n/**\n * A divider visually segments content into groups.\n */\nfunction Divider(props) {\n  var children = props.children,\n      className = props.className,\n      clearing = props.clearing,\n      content = props.content,\n      fitted = props.fitted,\n      hidden = props.hidden,\n      horizontal = props.horizontal,\n      inverted = props.inverted,\n      section = props.section,\n      vertical = props.vertical;\n\n\n  var classes = cx('ui', useKeyOnly(clearing, 'clearing'), useKeyOnly(fitted, 'fitted'), useKeyOnly(hidden, 'hidden'), useKeyOnly(horizontal, 'horizontal'), useKeyOnly(inverted, 'inverted'), useKeyOnly(section, 'section'), useKeyOnly(vertical, 'vertical'), 'divider', className);\n  var rest = getUnhandledProps(Divider, props);\n  var ElementType = getElementType(Divider, props);\n\n  return React.createElement(\n    ElementType,\n    _extends({}, rest, { className: classes }),\n    childrenUtils.isNil(children) ? content : children\n  );\n}\n\nDivider.handledProps = ['as', 'children', 'className', 'clearing', 'content', 'fitted', 'hidden', 'horizontal', 'inverted', 'section', 'vertical'];\nDivider._meta = {\n  name: 'Divider',\n  type: META.TYPES.ELEMENT\n};\n\nDivider.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Divider can clear the content above it. */\n  clearing: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Divider can be fitted without any space above or below it. */\n  fitted: PropTypes.bool,\n\n  /** Divider can divide content without creating a dividing line. */\n  hidden: PropTypes.bool,\n\n  /** Divider can segment content horizontally. */\n  horizontal: PropTypes.bool,\n\n  /** Divider can have its colours inverted. */\n  inverted: PropTypes.bool,\n\n  /** Divider can provide greater margins to divide sections of content. */\n  section: PropTypes.bool,\n\n  /** Divider can segment content vertically. */\n  vertical: PropTypes.bool\n} : {};\n\nexport default Divider;"],"mappings":"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"},"metadata":{},"sourceType":"module"}