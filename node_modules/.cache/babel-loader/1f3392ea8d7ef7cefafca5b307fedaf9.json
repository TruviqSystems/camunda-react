{"ast":null,"code":"import { isFunction, isArray, isNumber, bind, assign } from 'min-dash';\nvar FN_REF = '__fn';\nvar DEFAULT_PRIORITY = 1000;\nvar slice = Array.prototype.slice;\n\n/**\n * A general purpose event bus.\n *\n * This component is used to communicate across a diagram instance.\n * Other parts of a diagram can use it to listen to and broadcast events.\n *\n *\n * ## Registering for Events\n *\n * The event bus provides the {@link EventBus#on} and {@link EventBus#once}\n * methods to register for events. {@link EventBus#off} can be used to\n * remove event registrations. Listeners receive an instance of {@link Event}\n * as the first argument. It allows them to hook into the event execution.\n *\n * ```javascript\n *\n * // listen for event\n * eventBus.on('foo', function(event) {\n *\n *   // access event type\n *   event.type; // 'foo'\n *\n *   // stop propagation to other listeners\n *   event.stopPropagation();\n *\n *   // prevent event default\n *   event.preventDefault();\n * });\n *\n * // listen for event with custom payload\n * eventBus.on('bar', function(event, payload) {\n *   console.log(payload);\n * });\n *\n * // listen for event returning value\n * eventBus.on('foobar', function(event) {\n *\n *   // stop event propagation + prevent default\n *   return false;\n *\n *   // stop event propagation + return custom result\n *   return {\n *     complex: 'listening result'\n *   };\n * });\n *\n *\n * // listen with custom priority (default=1000, higher is better)\n * eventBus.on('priorityfoo', 1500, function(event) {\n *   console.log('invoked first!');\n * });\n *\n *\n * // listen for event and pass the context (`this`)\n * eventBus.on('foobar', function(event) {\n *   this.foo();\n * }, this);\n * ```\n *\n *\n * ## Emitting Events\n *\n * Events can be emitted via the event bus using {@link EventBus#fire}.\n *\n * ```javascript\n *\n * // false indicates that the default action\n * // was prevented by listeners\n * if (eventBus.fire('foo') === false) {\n *   console.log('default has been prevented!');\n * };\n *\n *\n * // custom args + return value listener\n * eventBus.on('sum', function(event, a, b) {\n *   return a + b;\n * });\n *\n * // you can pass custom arguments + retrieve result values.\n * var sum = eventBus.fire('sum', 1, 2);\n * console.log(sum); // 3\n * ```\n */\nexport default function EventBus() {\n  this._listeners = {};\n\n  // cleanup on destroy on lowest priority to allow\n  // message passing until the bitter end\n  this.on('diagram.destroy', 1, this._destroy, this);\n}\n\n/**\n * Register an event listener for events with the given name.\n *\n * The callback will be invoked with `event, ...additionalArguments`\n * that have been passed to {@link EventBus#fire}.\n *\n * Returning false from a listener will prevent the events default action\n * (if any is specified). To stop an event from being processed further in\n * other listeners execute {@link Event#stopPropagation}.\n *\n * Returning anything but `undefined` from a listener will stop the listener propagation.\n *\n * @param {string|Array<string>} events\n * @param {number} [priority=1000] the priority in which this listener is called, larger is higher\n * @param {Function} callback\n * @param {Object} [that] Pass context (`this`) to the callback\n */\nEventBus.prototype.on = function (events, priority, callback, that) {\n  events = isArray(events) ? events : [events];\n  if (isFunction(priority)) {\n    that = callback;\n    callback = priority;\n    priority = DEFAULT_PRIORITY;\n  }\n  if (!isNumber(priority)) {\n    throw new Error('priority must be a number');\n  }\n  var actualCallback = callback;\n  if (that) {\n    actualCallback = bind(callback, that);\n\n    // make sure we remember and are able to remove\n    // bound callbacks via {@link #off} using the original\n    // callback\n    actualCallback[FN_REF] = callback[FN_REF] || callback;\n  }\n  var self = this;\n  events.forEach(function (e) {\n    self._addListener(e, {\n      priority: priority,\n      callback: actualCallback,\n      next: null\n    });\n  });\n};\n\n/**\n * Register an event listener that is executed only once.\n *\n * @param {string} event the event name to register for\n * @param {number} [priority=1000] the priority in which this listener is called, larger is higher\n * @param {Function} callback the callback to execute\n * @param {Object} [that] Pass context (`this`) to the callback\n */\nEventBus.prototype.once = function (event, priority, callback, that) {\n  var self = this;\n  if (isFunction(priority)) {\n    that = callback;\n    callback = priority;\n    priority = DEFAULT_PRIORITY;\n  }\n  if (!isNumber(priority)) {\n    throw new Error('priority must be a number');\n  }\n  function wrappedCallback() {\n    wrappedCallback.__isTomb = true;\n    var result = callback.apply(that, arguments);\n    self.off(event, wrappedCallback);\n    return result;\n  }\n\n  // make sure we remember and are able to remove\n  // bound callbacks via {@link #off} using the original\n  // callback\n  wrappedCallback[FN_REF] = callback;\n  this.on(event, priority, wrappedCallback);\n};\n\n/**\n * Removes event listeners by event and callback.\n *\n * If no callback is given, all listeners for a given event name are being removed.\n *\n * @param {string|Array<string>} events\n * @param {Function} [callback]\n */\nEventBus.prototype.off = function (events, callback) {\n  events = isArray(events) ? events : [events];\n  var self = this;\n  events.forEach(function (event) {\n    self._removeListener(event, callback);\n  });\n};\n\n/**\n * Create an EventBus event.\n *\n * @param {Object} data\n *\n * @return {Object} event, recognized by the eventBus\n */\nEventBus.prototype.createEvent = function (data) {\n  var event = new InternalEvent();\n  event.init(data);\n  return event;\n};\n\n/**\n * Fires a named event.\n *\n * @example\n *\n * // fire event by name\n * events.fire('foo');\n *\n * // fire event object with nested type\n * var event = { type: 'foo' };\n * events.fire(event);\n *\n * // fire event with explicit type\n * var event = { x: 10, y: 20 };\n * events.fire('element.moved', event);\n *\n * // pass additional arguments to the event\n * events.on('foo', function(event, bar) {\n *   alert(bar);\n * });\n *\n * events.fire({ type: 'foo' }, 'I am bar!');\n *\n * @param {string} [name] the optional event name\n * @param {Object} [event] the event object\n * @param {...Object} additional arguments to be passed to the callback functions\n *\n * @return {boolean} the events return value, if specified or false if the\n *                   default action was prevented by listeners\n */\nEventBus.prototype.fire = function (type, data) {\n  var event, firstListener, returnValue, args;\n  args = slice.call(arguments);\n  if (typeof type === 'object') {\n    data = type;\n    type = data.type;\n  }\n  if (!type) {\n    throw new Error('no event type specified');\n  }\n  firstListener = this._listeners[type];\n  if (!firstListener) {\n    return;\n  }\n\n  // we make sure we fire instances of our home made\n  // events here. We wrap them only once, though\n  if (data instanceof InternalEvent) {\n    // we are fine, we alread have an event\n    event = data;\n  } else {\n    event = this.createEvent(data);\n  }\n\n  // ensure we pass the event as the first parameter\n  args[0] = event;\n\n  // original event type (in case we delegate)\n  var originalType = event.type;\n\n  // update event type before delegation\n  if (type !== originalType) {\n    event.type = type;\n  }\n  try {\n    returnValue = this._invokeListeners(event, args, firstListener);\n  } finally {\n    // reset event type after delegation\n    if (type !== originalType) {\n      event.type = originalType;\n    }\n  }\n\n  // set the return value to false if the event default\n  // got prevented and no other return value exists\n  if (returnValue === undefined && event.defaultPrevented) {\n    returnValue = false;\n  }\n  return returnValue;\n};\nEventBus.prototype.handleError = function (error) {\n  return this.fire('error', {\n    error: error\n  }) === false;\n};\nEventBus.prototype._destroy = function () {\n  this._listeners = {};\n};\nEventBus.prototype._invokeListeners = function (event, args, listener) {\n  var returnValue;\n  while (listener) {\n    // handle stopped propagation\n    if (event.cancelBubble) {\n      break;\n    }\n    returnValue = this._invokeListener(event, args, listener);\n    listener = listener.next;\n  }\n  return returnValue;\n};\nEventBus.prototype._invokeListener = function (event, args, listener) {\n  var returnValue;\n  if (listener.callback.__isTomb) {\n    return returnValue;\n  }\n  try {\n    // returning false prevents the default action\n    returnValue = invokeFunction(listener.callback, args);\n\n    // stop propagation on return value\n    if (returnValue !== undefined) {\n      event.returnValue = returnValue;\n      event.stopPropagation();\n    }\n\n    // prevent default on return false\n    if (returnValue === false) {\n      event.preventDefault();\n    }\n  } catch (error) {\n    if (!this.handleError(error)) {\n      console.error('unhandled error in event listener', error);\n      throw error;\n    }\n  }\n  return returnValue;\n};\n\n/*\n * Add new listener with a certain priority to the list\n * of listeners (for the given event).\n *\n * The semantics of listener registration / listener execution are\n * first register, first serve: New listeners will always be inserted\n * after existing listeners with the same priority.\n *\n * Example: Inserting two listeners with priority 1000 and 1300\n *\n *    * before: [ 1500, 1500, 1000, 1000 ]\n *    * after: [ 1500, 1500, (new=1300), 1000, 1000, (new=1000) ]\n *\n * @param {string} event\n * @param {Object} listener { priority, callback }\n */\nEventBus.prototype._addListener = function (event, newListener) {\n  var listener = this._getListeners(event),\n    previousListener;\n\n  // no prior listeners\n  if (!listener) {\n    this._setListeners(event, newListener);\n    return;\n  }\n\n  // ensure we order listeners by priority from\n  // 0 (high) to n > 0 (low)\n  while (listener) {\n    if (listener.priority < newListener.priority) {\n      newListener.next = listener;\n      if (previousListener) {\n        previousListener.next = newListener;\n      } else {\n        this._setListeners(event, newListener);\n      }\n      return;\n    }\n    previousListener = listener;\n    listener = listener.next;\n  }\n\n  // add new listener to back\n  previousListener.next = newListener;\n};\nEventBus.prototype._getListeners = function (name) {\n  return this._listeners[name];\n};\nEventBus.prototype._setListeners = function (name, listener) {\n  this._listeners[name] = listener;\n};\nEventBus.prototype._removeListener = function (event, callback) {\n  var listener = this._getListeners(event),\n    nextListener,\n    previousListener,\n    listenerCallback;\n  if (!callback) {\n    // clear listeners\n    this._setListeners(event, null);\n    return;\n  }\n  while (listener) {\n    nextListener = listener.next;\n    listenerCallback = listener.callback;\n    if (listenerCallback === callback || listenerCallback[FN_REF] === callback) {\n      if (previousListener) {\n        previousListener.next = nextListener;\n      } else {\n        // new first listener\n        this._setListeners(event, nextListener);\n      }\n    }\n    previousListener = listener;\n    listener = nextListener;\n  }\n};\n\n/**\n * A event that is emitted via the event bus.\n */\nfunction InternalEvent() {}\nInternalEvent.prototype.stopPropagation = function () {\n  this.cancelBubble = true;\n};\nInternalEvent.prototype.preventDefault = function () {\n  this.defaultPrevented = true;\n};\nInternalEvent.prototype.init = function (data) {\n  assign(this, data || {});\n};\n\n/**\n * Invoke function. Be fast...\n *\n * @param {Function} fn\n * @param {Array<Object>} args\n *\n * @return {Any}\n */\nfunction invokeFunction(fn, args) {\n  return fn.apply(null, args);\n}","map":{"version":3,"names":["isFunction","isArray","isNumber","bind","assign","FN_REF","DEFAULT_PRIORITY","slice","Array","prototype","EventBus","_listeners","on","_destroy","events","priority","callback","that","Error","actualCallback","self","forEach","e","_addListener","next","once","event","wrappedCallback","__isTomb","result","apply","arguments","off","_removeListener","createEvent","data","InternalEvent","init","fire","type","firstListener","returnValue","args","call","originalType","_invokeListeners","undefined","defaultPrevented","handleError","error","listener","cancelBubble","_invokeListener","invokeFunction","stopPropagation","preventDefault","console","newListener","_getListeners","previousListener","_setListeners","name","nextListener","listenerCallback","fn"],"sources":["C:/Users/KondalaRaoThota/Truviq_Camunda/camunda-react/node_modules/diagram-js/lib/core/EventBus.js"],"sourcesContent":["import {\n  isFunction,\n  isArray,\n  isNumber,\n  bind,\n  assign\n} from 'min-dash';\n\nvar FN_REF = '__fn';\n\nvar DEFAULT_PRIORITY = 1000;\n\nvar slice = Array.prototype.slice;\n\n/**\n * A general purpose event bus.\n *\n * This component is used to communicate across a diagram instance.\n * Other parts of a diagram can use it to listen to and broadcast events.\n *\n *\n * ## Registering for Events\n *\n * The event bus provides the {@link EventBus#on} and {@link EventBus#once}\n * methods to register for events. {@link EventBus#off} can be used to\n * remove event registrations. Listeners receive an instance of {@link Event}\n * as the first argument. It allows them to hook into the event execution.\n *\n * ```javascript\n *\n * // listen for event\n * eventBus.on('foo', function(event) {\n *\n *   // access event type\n *   event.type; // 'foo'\n *\n *   // stop propagation to other listeners\n *   event.stopPropagation();\n *\n *   // prevent event default\n *   event.preventDefault();\n * });\n *\n * // listen for event with custom payload\n * eventBus.on('bar', function(event, payload) {\n *   console.log(payload);\n * });\n *\n * // listen for event returning value\n * eventBus.on('foobar', function(event) {\n *\n *   // stop event propagation + prevent default\n *   return false;\n *\n *   // stop event propagation + return custom result\n *   return {\n *     complex: 'listening result'\n *   };\n * });\n *\n *\n * // listen with custom priority (default=1000, higher is better)\n * eventBus.on('priorityfoo', 1500, function(event) {\n *   console.log('invoked first!');\n * });\n *\n *\n * // listen for event and pass the context (`this`)\n * eventBus.on('foobar', function(event) {\n *   this.foo();\n * }, this);\n * ```\n *\n *\n * ## Emitting Events\n *\n * Events can be emitted via the event bus using {@link EventBus#fire}.\n *\n * ```javascript\n *\n * // false indicates that the default action\n * // was prevented by listeners\n * if (eventBus.fire('foo') === false) {\n *   console.log('default has been prevented!');\n * };\n *\n *\n * // custom args + return value listener\n * eventBus.on('sum', function(event, a, b) {\n *   return a + b;\n * });\n *\n * // you can pass custom arguments + retrieve result values.\n * var sum = eventBus.fire('sum', 1, 2);\n * console.log(sum); // 3\n * ```\n */\nexport default function EventBus() {\n  this._listeners = {};\n\n  // cleanup on destroy on lowest priority to allow\n  // message passing until the bitter end\n  this.on('diagram.destroy', 1, this._destroy, this);\n}\n\n\n/**\n * Register an event listener for events with the given name.\n *\n * The callback will be invoked with `event, ...additionalArguments`\n * that have been passed to {@link EventBus#fire}.\n *\n * Returning false from a listener will prevent the events default action\n * (if any is specified). To stop an event from being processed further in\n * other listeners execute {@link Event#stopPropagation}.\n *\n * Returning anything but `undefined` from a listener will stop the listener propagation.\n *\n * @param {string|Array<string>} events\n * @param {number} [priority=1000] the priority in which this listener is called, larger is higher\n * @param {Function} callback\n * @param {Object} [that] Pass context (`this`) to the callback\n */\nEventBus.prototype.on = function(events, priority, callback, that) {\n\n  events = isArray(events) ? events : [ events ];\n\n  if (isFunction(priority)) {\n    that = callback;\n    callback = priority;\n    priority = DEFAULT_PRIORITY;\n  }\n\n  if (!isNumber(priority)) {\n    throw new Error('priority must be a number');\n  }\n\n  var actualCallback = callback;\n\n  if (that) {\n    actualCallback = bind(callback, that);\n\n    // make sure we remember and are able to remove\n    // bound callbacks via {@link #off} using the original\n    // callback\n    actualCallback[FN_REF] = callback[FN_REF] || callback;\n  }\n\n  var self = this;\n\n  events.forEach(function(e) {\n    self._addListener(e, {\n      priority: priority,\n      callback: actualCallback,\n      next: null\n    });\n  });\n};\n\n\n/**\n * Register an event listener that is executed only once.\n *\n * @param {string} event the event name to register for\n * @param {number} [priority=1000] the priority in which this listener is called, larger is higher\n * @param {Function} callback the callback to execute\n * @param {Object} [that] Pass context (`this`) to the callback\n */\nEventBus.prototype.once = function(event, priority, callback, that) {\n  var self = this;\n\n  if (isFunction(priority)) {\n    that = callback;\n    callback = priority;\n    priority = DEFAULT_PRIORITY;\n  }\n\n  if (!isNumber(priority)) {\n    throw new Error('priority must be a number');\n  }\n\n  function wrappedCallback() {\n    wrappedCallback.__isTomb = true;\n\n    var result = callback.apply(that, arguments);\n\n    self.off(event, wrappedCallback);\n\n    return result;\n  }\n\n  // make sure we remember and are able to remove\n  // bound callbacks via {@link #off} using the original\n  // callback\n  wrappedCallback[FN_REF] = callback;\n\n  this.on(event, priority, wrappedCallback);\n};\n\n\n/**\n * Removes event listeners by event and callback.\n *\n * If no callback is given, all listeners for a given event name are being removed.\n *\n * @param {string|Array<string>} events\n * @param {Function} [callback]\n */\nEventBus.prototype.off = function(events, callback) {\n\n  events = isArray(events) ? events : [ events ];\n\n  var self = this;\n\n  events.forEach(function(event) {\n    self._removeListener(event, callback);\n  });\n\n};\n\n\n/**\n * Create an EventBus event.\n *\n * @param {Object} data\n *\n * @return {Object} event, recognized by the eventBus\n */\nEventBus.prototype.createEvent = function(data) {\n  var event = new InternalEvent();\n\n  event.init(data);\n\n  return event;\n};\n\n\n/**\n * Fires a named event.\n *\n * @example\n *\n * // fire event by name\n * events.fire('foo');\n *\n * // fire event object with nested type\n * var event = { type: 'foo' };\n * events.fire(event);\n *\n * // fire event with explicit type\n * var event = { x: 10, y: 20 };\n * events.fire('element.moved', event);\n *\n * // pass additional arguments to the event\n * events.on('foo', function(event, bar) {\n *   alert(bar);\n * });\n *\n * events.fire({ type: 'foo' }, 'I am bar!');\n *\n * @param {string} [name] the optional event name\n * @param {Object} [event] the event object\n * @param {...Object} additional arguments to be passed to the callback functions\n *\n * @return {boolean} the events return value, if specified or false if the\n *                   default action was prevented by listeners\n */\nEventBus.prototype.fire = function(type, data) {\n  var event,\n      firstListener,\n      returnValue,\n      args;\n\n  args = slice.call(arguments);\n\n  if (typeof type === 'object') {\n    data = type;\n    type = data.type;\n  }\n\n  if (!type) {\n    throw new Error('no event type specified');\n  }\n\n  firstListener = this._listeners[type];\n\n  if (!firstListener) {\n    return;\n  }\n\n  // we make sure we fire instances of our home made\n  // events here. We wrap them only once, though\n  if (data instanceof InternalEvent) {\n\n    // we are fine, we alread have an event\n    event = data;\n  } else {\n    event = this.createEvent(data);\n  }\n\n  // ensure we pass the event as the first parameter\n  args[0] = event;\n\n  // original event type (in case we delegate)\n  var originalType = event.type;\n\n  // update event type before delegation\n  if (type !== originalType) {\n    event.type = type;\n  }\n\n  try {\n    returnValue = this._invokeListeners(event, args, firstListener);\n  } finally {\n\n    // reset event type after delegation\n    if (type !== originalType) {\n      event.type = originalType;\n    }\n  }\n\n  // set the return value to false if the event default\n  // got prevented and no other return value exists\n  if (returnValue === undefined && event.defaultPrevented) {\n    returnValue = false;\n  }\n\n  return returnValue;\n};\n\n\nEventBus.prototype.handleError = function(error) {\n  return this.fire('error', { error: error }) === false;\n};\n\n\nEventBus.prototype._destroy = function() {\n  this._listeners = {};\n};\n\nEventBus.prototype._invokeListeners = function(event, args, listener) {\n\n  var returnValue;\n\n  while (listener) {\n\n    // handle stopped propagation\n    if (event.cancelBubble) {\n      break;\n    }\n\n    returnValue = this._invokeListener(event, args, listener);\n\n    listener = listener.next;\n  }\n\n  return returnValue;\n};\n\nEventBus.prototype._invokeListener = function(event, args, listener) {\n\n  var returnValue;\n\n  if (listener.callback.__isTomb) {\n    return returnValue;\n  }\n\n  try {\n\n    // returning false prevents the default action\n    returnValue = invokeFunction(listener.callback, args);\n\n    // stop propagation on return value\n    if (returnValue !== undefined) {\n      event.returnValue = returnValue;\n      event.stopPropagation();\n    }\n\n    // prevent default on return false\n    if (returnValue === false) {\n      event.preventDefault();\n    }\n  } catch (error) {\n    if (!this.handleError(error)) {\n      console.error('unhandled error in event listener', error);\n\n      throw error;\n    }\n  }\n\n  return returnValue;\n};\n\n/*\n * Add new listener with a certain priority to the list\n * of listeners (for the given event).\n *\n * The semantics of listener registration / listener execution are\n * first register, first serve: New listeners will always be inserted\n * after existing listeners with the same priority.\n *\n * Example: Inserting two listeners with priority 1000 and 1300\n *\n *    * before: [ 1500, 1500, 1000, 1000 ]\n *    * after: [ 1500, 1500, (new=1300), 1000, 1000, (new=1000) ]\n *\n * @param {string} event\n * @param {Object} listener { priority, callback }\n */\nEventBus.prototype._addListener = function(event, newListener) {\n\n  var listener = this._getListeners(event),\n      previousListener;\n\n  // no prior listeners\n  if (!listener) {\n    this._setListeners(event, newListener);\n\n    return;\n  }\n\n  // ensure we order listeners by priority from\n  // 0 (high) to n > 0 (low)\n  while (listener) {\n\n    if (listener.priority < newListener.priority) {\n\n      newListener.next = listener;\n\n      if (previousListener) {\n        previousListener.next = newListener;\n      } else {\n        this._setListeners(event, newListener);\n      }\n\n      return;\n    }\n\n    previousListener = listener;\n    listener = listener.next;\n  }\n\n  // add new listener to back\n  previousListener.next = newListener;\n};\n\n\nEventBus.prototype._getListeners = function(name) {\n  return this._listeners[name];\n};\n\nEventBus.prototype._setListeners = function(name, listener) {\n  this._listeners[name] = listener;\n};\n\nEventBus.prototype._removeListener = function(event, callback) {\n\n  var listener = this._getListeners(event),\n      nextListener,\n      previousListener,\n      listenerCallback;\n\n  if (!callback) {\n\n    // clear listeners\n    this._setListeners(event, null);\n\n    return;\n  }\n\n  while (listener) {\n\n    nextListener = listener.next;\n\n    listenerCallback = listener.callback;\n\n    if (listenerCallback === callback || listenerCallback[FN_REF] === callback) {\n      if (previousListener) {\n        previousListener.next = nextListener;\n      } else {\n\n        // new first listener\n        this._setListeners(event, nextListener);\n      }\n    }\n\n    previousListener = listener;\n    listener = nextListener;\n  }\n};\n\n/**\n * A event that is emitted via the event bus.\n */\nfunction InternalEvent() { }\n\nInternalEvent.prototype.stopPropagation = function() {\n  this.cancelBubble = true;\n};\n\nInternalEvent.prototype.preventDefault = function() {\n  this.defaultPrevented = true;\n};\n\nInternalEvent.prototype.init = function(data) {\n  assign(this, data || {});\n};\n\n\n/**\n * Invoke function. Be fast...\n *\n * @param {Function} fn\n * @param {Array<Object>} args\n *\n * @return {Any}\n */\nfunction invokeFunction(fn, args) {\n  return fn.apply(null, args);\n}\n"],"mappings":"AAAA,SACEA,UAAU,EACVC,OAAO,EACPC,QAAQ,EACRC,IAAI,EACJC,MAAM,QACD,UAAU;AAEjB,IAAIC,MAAM,GAAG,MAAM;AAEnB,IAAIC,gBAAgB,GAAG,IAAI;AAE3B,IAAIC,KAAK,GAAGC,KAAK,CAACC,SAAS,CAACF,KAAK;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASG,QAAQA,CAAA,EAAG;EACjC,IAAI,CAACC,UAAU,GAAG,CAAC,CAAC;;EAEpB;EACA;EACA,IAAI,CAACC,EAAE,CAAC,iBAAiB,EAAE,CAAC,EAAE,IAAI,CAACC,QAAQ,EAAE,IAAI,CAAC;AACpD;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,QAAQ,CAACD,SAAS,CAACG,EAAE,GAAG,UAASE,MAAM,EAAEC,QAAQ,EAAEC,QAAQ,EAAEC,IAAI,EAAE;EAEjEH,MAAM,GAAGb,OAAO,CAACa,MAAM,CAAC,GAAGA,MAAM,GAAG,CAAEA,MAAM,CAAE;EAE9C,IAAId,UAAU,CAACe,QAAQ,CAAC,EAAE;IACxBE,IAAI,GAAGD,QAAQ;IACfA,QAAQ,GAAGD,QAAQ;IACnBA,QAAQ,GAAGT,gBAAgB;EAC7B;EAEA,IAAI,CAACJ,QAAQ,CAACa,QAAQ,CAAC,EAAE;IACvB,MAAM,IAAIG,KAAK,CAAC,2BAA2B,CAAC;EAC9C;EAEA,IAAIC,cAAc,GAAGH,QAAQ;EAE7B,IAAIC,IAAI,EAAE;IACRE,cAAc,GAAGhB,IAAI,CAACa,QAAQ,EAAEC,IAAI,CAAC;;IAErC;IACA;IACA;IACAE,cAAc,CAACd,MAAM,CAAC,GAAGW,QAAQ,CAACX,MAAM,CAAC,IAAIW,QAAQ;EACvD;EAEA,IAAII,IAAI,GAAG,IAAI;EAEfN,MAAM,CAACO,OAAO,CAAC,UAASC,CAAC,EAAE;IACzBF,IAAI,CAACG,YAAY,CAACD,CAAC,EAAE;MACnBP,QAAQ,EAAEA,QAAQ;MAClBC,QAAQ,EAAEG,cAAc;MACxBK,IAAI,EAAE;IACR,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAd,QAAQ,CAACD,SAAS,CAACgB,IAAI,GAAG,UAASC,KAAK,EAAEX,QAAQ,EAAEC,QAAQ,EAAEC,IAAI,EAAE;EAClE,IAAIG,IAAI,GAAG,IAAI;EAEf,IAAIpB,UAAU,CAACe,QAAQ,CAAC,EAAE;IACxBE,IAAI,GAAGD,QAAQ;IACfA,QAAQ,GAAGD,QAAQ;IACnBA,QAAQ,GAAGT,gBAAgB;EAC7B;EAEA,IAAI,CAACJ,QAAQ,CAACa,QAAQ,CAAC,EAAE;IACvB,MAAM,IAAIG,KAAK,CAAC,2BAA2B,CAAC;EAC9C;EAEA,SAASS,eAAeA,CAAA,EAAG;IACzBA,eAAe,CAACC,QAAQ,GAAG,IAAI;IAE/B,IAAIC,MAAM,GAAGb,QAAQ,CAACc,KAAK,CAACb,IAAI,EAAEc,SAAS,CAAC;IAE5CX,IAAI,CAACY,GAAG,CAACN,KAAK,EAAEC,eAAe,CAAC;IAEhC,OAAOE,MAAM;EACf;;EAEA;EACA;EACA;EACAF,eAAe,CAACtB,MAAM,CAAC,GAAGW,QAAQ;EAElC,IAAI,CAACJ,EAAE,CAACc,KAAK,EAAEX,QAAQ,EAAEY,eAAe,CAAC;AAC3C,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAjB,QAAQ,CAACD,SAAS,CAACuB,GAAG,GAAG,UAASlB,MAAM,EAAEE,QAAQ,EAAE;EAElDF,MAAM,GAAGb,OAAO,CAACa,MAAM,CAAC,GAAGA,MAAM,GAAG,CAAEA,MAAM,CAAE;EAE9C,IAAIM,IAAI,GAAG,IAAI;EAEfN,MAAM,CAACO,OAAO,CAAC,UAASK,KAAK,EAAE;IAC7BN,IAAI,CAACa,eAAe,CAACP,KAAK,EAAEV,QAAQ,CAAC;EACvC,CAAC,CAAC;AAEJ,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACAN,QAAQ,CAACD,SAAS,CAACyB,WAAW,GAAG,UAASC,IAAI,EAAE;EAC9C,IAAIT,KAAK,GAAG,IAAIU,aAAa,EAAE;EAE/BV,KAAK,CAACW,IAAI,CAACF,IAAI,CAAC;EAEhB,OAAOT,KAAK;AACd,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAhB,QAAQ,CAACD,SAAS,CAAC6B,IAAI,GAAG,UAASC,IAAI,EAAEJ,IAAI,EAAE;EAC7C,IAAIT,KAAK,EACLc,aAAa,EACbC,WAAW,EACXC,IAAI;EAERA,IAAI,GAAGnC,KAAK,CAACoC,IAAI,CAACZ,SAAS,CAAC;EAE5B,IAAI,OAAOQ,IAAI,KAAK,QAAQ,EAAE;IAC5BJ,IAAI,GAAGI,IAAI;IACXA,IAAI,GAAGJ,IAAI,CAACI,IAAI;EAClB;EAEA,IAAI,CAACA,IAAI,EAAE;IACT,MAAM,IAAIrB,KAAK,CAAC,yBAAyB,CAAC;EAC5C;EAEAsB,aAAa,GAAG,IAAI,CAAC7B,UAAU,CAAC4B,IAAI,CAAC;EAErC,IAAI,CAACC,aAAa,EAAE;IAClB;EACF;;EAEA;EACA;EACA,IAAIL,IAAI,YAAYC,aAAa,EAAE;IAEjC;IACAV,KAAK,GAAGS,IAAI;EACd,CAAC,MAAM;IACLT,KAAK,GAAG,IAAI,CAACQ,WAAW,CAACC,IAAI,CAAC;EAChC;;EAEA;EACAO,IAAI,CAAC,CAAC,CAAC,GAAGhB,KAAK;;EAEf;EACA,IAAIkB,YAAY,GAAGlB,KAAK,CAACa,IAAI;;EAE7B;EACA,IAAIA,IAAI,KAAKK,YAAY,EAAE;IACzBlB,KAAK,CAACa,IAAI,GAAGA,IAAI;EACnB;EAEA,IAAI;IACFE,WAAW,GAAG,IAAI,CAACI,gBAAgB,CAACnB,KAAK,EAAEgB,IAAI,EAAEF,aAAa,CAAC;EACjE,CAAC,SAAS;IAER;IACA,IAAID,IAAI,KAAKK,YAAY,EAAE;MACzBlB,KAAK,CAACa,IAAI,GAAGK,YAAY;IAC3B;EACF;;EAEA;EACA;EACA,IAAIH,WAAW,KAAKK,SAAS,IAAIpB,KAAK,CAACqB,gBAAgB,EAAE;IACvDN,WAAW,GAAG,KAAK;EACrB;EAEA,OAAOA,WAAW;AACpB,CAAC;AAGD/B,QAAQ,CAACD,SAAS,CAACuC,WAAW,GAAG,UAASC,KAAK,EAAE;EAC/C,OAAO,IAAI,CAACX,IAAI,CAAC,OAAO,EAAE;IAAEW,KAAK,EAAEA;EAAM,CAAC,CAAC,KAAK,KAAK;AACvD,CAAC;AAGDvC,QAAQ,CAACD,SAAS,CAACI,QAAQ,GAAG,YAAW;EACvC,IAAI,CAACF,UAAU,GAAG,CAAC,CAAC;AACtB,CAAC;AAEDD,QAAQ,CAACD,SAAS,CAACoC,gBAAgB,GAAG,UAASnB,KAAK,EAAEgB,IAAI,EAAEQ,QAAQ,EAAE;EAEpE,IAAIT,WAAW;EAEf,OAAOS,QAAQ,EAAE;IAEf;IACA,IAAIxB,KAAK,CAACyB,YAAY,EAAE;MACtB;IACF;IAEAV,WAAW,GAAG,IAAI,CAACW,eAAe,CAAC1B,KAAK,EAAEgB,IAAI,EAAEQ,QAAQ,CAAC;IAEzDA,QAAQ,GAAGA,QAAQ,CAAC1B,IAAI;EAC1B;EAEA,OAAOiB,WAAW;AACpB,CAAC;AAED/B,QAAQ,CAACD,SAAS,CAAC2C,eAAe,GAAG,UAAS1B,KAAK,EAAEgB,IAAI,EAAEQ,QAAQ,EAAE;EAEnE,IAAIT,WAAW;EAEf,IAAIS,QAAQ,CAAClC,QAAQ,CAACY,QAAQ,EAAE;IAC9B,OAAOa,WAAW;EACpB;EAEA,IAAI;IAEF;IACAA,WAAW,GAAGY,cAAc,CAACH,QAAQ,CAAClC,QAAQ,EAAE0B,IAAI,CAAC;;IAErD;IACA,IAAID,WAAW,KAAKK,SAAS,EAAE;MAC7BpB,KAAK,CAACe,WAAW,GAAGA,WAAW;MAC/Bf,KAAK,CAAC4B,eAAe,EAAE;IACzB;;IAEA;IACA,IAAIb,WAAW,KAAK,KAAK,EAAE;MACzBf,KAAK,CAAC6B,cAAc,EAAE;IACxB;EACF,CAAC,CAAC,OAAON,KAAK,EAAE;IACd,IAAI,CAAC,IAAI,CAACD,WAAW,CAACC,KAAK,CAAC,EAAE;MAC5BO,OAAO,CAACP,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MAEzD,MAAMA,KAAK;IACb;EACF;EAEA,OAAOR,WAAW;AACpB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA/B,QAAQ,CAACD,SAAS,CAACc,YAAY,GAAG,UAASG,KAAK,EAAE+B,WAAW,EAAE;EAE7D,IAAIP,QAAQ,GAAG,IAAI,CAACQ,aAAa,CAAChC,KAAK,CAAC;IACpCiC,gBAAgB;;EAEpB;EACA,IAAI,CAACT,QAAQ,EAAE;IACb,IAAI,CAACU,aAAa,CAAClC,KAAK,EAAE+B,WAAW,CAAC;IAEtC;EACF;;EAEA;EACA;EACA,OAAOP,QAAQ,EAAE;IAEf,IAAIA,QAAQ,CAACnC,QAAQ,GAAG0C,WAAW,CAAC1C,QAAQ,EAAE;MAE5C0C,WAAW,CAACjC,IAAI,GAAG0B,QAAQ;MAE3B,IAAIS,gBAAgB,EAAE;QACpBA,gBAAgB,CAACnC,IAAI,GAAGiC,WAAW;MACrC,CAAC,MAAM;QACL,IAAI,CAACG,aAAa,CAAClC,KAAK,EAAE+B,WAAW,CAAC;MACxC;MAEA;IACF;IAEAE,gBAAgB,GAAGT,QAAQ;IAC3BA,QAAQ,GAAGA,QAAQ,CAAC1B,IAAI;EAC1B;;EAEA;EACAmC,gBAAgB,CAACnC,IAAI,GAAGiC,WAAW;AACrC,CAAC;AAGD/C,QAAQ,CAACD,SAAS,CAACiD,aAAa,GAAG,UAASG,IAAI,EAAE;EAChD,OAAO,IAAI,CAAClD,UAAU,CAACkD,IAAI,CAAC;AAC9B,CAAC;AAEDnD,QAAQ,CAACD,SAAS,CAACmD,aAAa,GAAG,UAASC,IAAI,EAAEX,QAAQ,EAAE;EAC1D,IAAI,CAACvC,UAAU,CAACkD,IAAI,CAAC,GAAGX,QAAQ;AAClC,CAAC;AAEDxC,QAAQ,CAACD,SAAS,CAACwB,eAAe,GAAG,UAASP,KAAK,EAAEV,QAAQ,EAAE;EAE7D,IAAIkC,QAAQ,GAAG,IAAI,CAACQ,aAAa,CAAChC,KAAK,CAAC;IACpCoC,YAAY;IACZH,gBAAgB;IAChBI,gBAAgB;EAEpB,IAAI,CAAC/C,QAAQ,EAAE;IAEb;IACA,IAAI,CAAC4C,aAAa,CAAClC,KAAK,EAAE,IAAI,CAAC;IAE/B;EACF;EAEA,OAAOwB,QAAQ,EAAE;IAEfY,YAAY,GAAGZ,QAAQ,CAAC1B,IAAI;IAE5BuC,gBAAgB,GAAGb,QAAQ,CAAClC,QAAQ;IAEpC,IAAI+C,gBAAgB,KAAK/C,QAAQ,IAAI+C,gBAAgB,CAAC1D,MAAM,CAAC,KAAKW,QAAQ,EAAE;MAC1E,IAAI2C,gBAAgB,EAAE;QACpBA,gBAAgB,CAACnC,IAAI,GAAGsC,YAAY;MACtC,CAAC,MAAM;QAEL;QACA,IAAI,CAACF,aAAa,CAAClC,KAAK,EAAEoC,YAAY,CAAC;MACzC;IACF;IAEAH,gBAAgB,GAAGT,QAAQ;IAC3BA,QAAQ,GAAGY,YAAY;EACzB;AACF,CAAC;;AAED;AACA;AACA;AACA,SAAS1B,aAAaA,CAAA,EAAG,CAAE;AAE3BA,aAAa,CAAC3B,SAAS,CAAC6C,eAAe,GAAG,YAAW;EACnD,IAAI,CAACH,YAAY,GAAG,IAAI;AAC1B,CAAC;AAEDf,aAAa,CAAC3B,SAAS,CAAC8C,cAAc,GAAG,YAAW;EAClD,IAAI,CAACR,gBAAgB,GAAG,IAAI;AAC9B,CAAC;AAEDX,aAAa,CAAC3B,SAAS,CAAC4B,IAAI,GAAG,UAASF,IAAI,EAAE;EAC5C/B,MAAM,CAAC,IAAI,EAAE+B,IAAI,IAAI,CAAC,CAAC,CAAC;AAC1B,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASkB,cAAcA,CAACW,EAAE,EAAEtB,IAAI,EAAE;EAChC,OAAOsB,EAAE,CAAClC,KAAK,CAAC,IAAI,EAAEY,IAAI,CAAC;AAC7B"},"metadata":{},"sourceType":"module"}