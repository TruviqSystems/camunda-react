{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { customPropTypes, getElementType, getUnhandledProps, META } from '../../lib';\n\n/**\r\n * Button groups can contain conditionals.\r\n */\nfunction ButtonOr(props) {\n  var className = props.className,\n    text = props.text;\n  var classes = cx('or', className);\n  var rest = getUnhandledProps(ButtonOr, props);\n  var ElementType = getElementType(ButtonOr, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes,\n    'data-text': text\n  }));\n}\nButtonOr.handledProps = ['as', 'className', 'text'];\nButtonOr._meta = {\n  name: 'ButtonOr',\n  parent: 'Button',\n  type: META.TYPES.ELEMENT\n};\nButtonOr.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n  /** Additional classes. */\n  className: PropTypes.string,\n  /** Or buttons can have their text localized, or adjusted by using the text prop. */\n  text: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n} : {};\nexport default ButtonOr;","map":{"version":3,"names":["_extends","cx","PropTypes","React","customPropTypes","getElementType","getUnhandledProps","META","ButtonOr","props","className","text","classes","rest","ElementType","createElement","handledProps","_meta","name","parent","type","TYPES","ELEMENT","propTypes","process","env","NODE_ENV","as","string","oneOfType","number"],"sources":["C:/Users/sam/final/camunda-react/node_modules/react-semantic-redux-form/node_modules/semantic-ui-react/dist/es/elements/Button/ButtonOr.js"],"sourcesContent":["import _extends from 'babel-runtime/helpers/extends';\r\nimport cx from 'classnames';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\nimport { customPropTypes, getElementType, getUnhandledProps, META } from '../../lib';\r\n\r\n/**\r\n * Button groups can contain conditionals.\r\n */\r\nfunction ButtonOr(props) {\r\n  var className = props.className,\r\n      text = props.text;\r\n\r\n  var classes = cx('or', className);\r\n  var rest = getUnhandledProps(ButtonOr, props);\r\n  var ElementType = getElementType(ButtonOr, props);\r\n\r\n  return React.createElement(ElementType, _extends({}, rest, { className: classes, 'data-text': text }));\r\n}\r\n\r\nButtonOr.handledProps = ['as', 'className', 'text'];\r\nButtonOr._meta = {\r\n  name: 'ButtonOr',\r\n  parent: 'Button',\r\n  type: META.TYPES.ELEMENT\r\n};\r\n\r\nButtonOr.propTypes = process.env.NODE_ENV !== \"production\" ? {\r\n  /** An element type to render as (string or function). */\r\n  as: customPropTypes.as,\r\n\r\n  /** Additional classes. */\r\n  className: PropTypes.string,\r\n\r\n  /** Or buttons can have their text localized, or adjusted by using the text prop. */\r\n  text: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\r\n} : {};\r\n\r\nexport default ButtonOr;"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,+BAA+B;AACpD,OAAOC,EAAE,MAAM,YAAY;AAC3B,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,KAAK,MAAM,OAAO;AAEzB,SAASC,eAAe,EAAEC,cAAc,EAAEC,iBAAiB,EAAEC,IAAI,QAAQ,WAAW;;AAEpF;AACA;AACA;AACA,SAASC,QAAQA,CAACC,KAAK,EAAE;EACvB,IAAIC,SAAS,GAAGD,KAAK,CAACC,SAAS;IAC3BC,IAAI,GAAGF,KAAK,CAACE,IAAI;EAErB,IAAIC,OAAO,GAAGX,EAAE,CAAC,IAAI,EAAES,SAAS,CAAC;EACjC,IAAIG,IAAI,GAAGP,iBAAiB,CAACE,QAAQ,EAAEC,KAAK,CAAC;EAC7C,IAAIK,WAAW,GAAGT,cAAc,CAACG,QAAQ,EAAEC,KAAK,CAAC;EAEjD,OAAON,KAAK,CAACY,aAAa,CAACD,WAAW,EAAEd,QAAQ,CAAC,CAAC,CAAC,EAAEa,IAAI,EAAE;IAAEH,SAAS,EAAEE,OAAO;IAAE,WAAW,EAAED;EAAK,CAAC,CAAC,CAAC;AACxG;AAEAH,QAAQ,CAACQ,YAAY,GAAG,CAAC,IAAI,EAAE,WAAW,EAAE,MAAM,CAAC;AACnDR,QAAQ,CAACS,KAAK,GAAG;EACfC,IAAI,EAAE,UAAU;EAChBC,MAAM,EAAE,QAAQ;EAChBC,IAAI,EAAEb,IAAI,CAACc,KAAK,CAACC;AACnB,CAAC;AAEDd,QAAQ,CAACe,SAAS,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAG;EAC3D;EACAC,EAAE,EAAEvB,eAAe,CAACuB,EAAE;EAEtB;EACAjB,SAAS,EAAER,SAAS,CAAC0B,MAAM;EAE3B;EACAjB,IAAI,EAAET,SAAS,CAAC2B,SAAS,CAAC,CAAC3B,SAAS,CAAC4B,MAAM,EAAE5B,SAAS,CAAC0B,MAAM,CAAC;AAChE,CAAC,GAAG,CAAC,CAAC;AAEN,eAAepB,QAAQ"},"metadata":{},"sourceType":"module"}