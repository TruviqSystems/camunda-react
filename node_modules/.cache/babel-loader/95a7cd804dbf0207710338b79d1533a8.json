{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, META, SUI, useKeyOnly, useTextAlignProp } from '../../lib';\n\n/**\r\n * A container limits content to a maximum width.\r\n */\nfunction Container(props) {\n  var children = props.children,\n    className = props.className,\n    content = props.content,\n    fluid = props.fluid,\n    text = props.text,\n    textAlign = props.textAlign;\n  var classes = cx('ui', useKeyOnly(text, 'text'), useKeyOnly(fluid, 'fluid'), useTextAlignProp(textAlign), 'container', className);\n  var rest = getUnhandledProps(Container, props);\n  var ElementType = getElementType(Container, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\nContainer.handledProps = ['as', 'children', 'className', 'content', 'fluid', 'text', 'textAlign'];\nContainer._meta = {\n  name: 'Container',\n  type: META.TYPES.ELEMENT\n};\nContainer.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n  /** Primary content. */\n  children: PropTypes.node,\n  /** Additional classes. */\n  className: PropTypes.string,\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n  /** Container has no maximum width. */\n  fluid: PropTypes.bool,\n  /** Reduce maximum width to more naturally accommodate text. */\n  text: PropTypes.bool,\n  /** Align container text. */\n  textAlign: PropTypes.oneOf(SUI.TEXT_ALIGNMENTS)\n} : {};\nexport default Container;","map":{"version":3,"names":["_extends","cx","PropTypes","React","childrenUtils","customPropTypes","getElementType","getUnhandledProps","META","SUI","useKeyOnly","useTextAlignProp","Container","props","children","className","content","fluid","text","textAlign","classes","rest","ElementType","createElement","isNil","handledProps","_meta","name","type","TYPES","ELEMENT","propTypes","process","env","NODE_ENV","as","node","string","contentShorthand","bool","oneOf","TEXT_ALIGNMENTS"],"sources":["C:/Users/sam/final/camunda-react/node_modules/react-semantic-redux-form/node_modules/semantic-ui-react/dist/es/elements/Container/Container.js"],"sourcesContent":["import _extends from 'babel-runtime/helpers/extends';\r\nimport cx from 'classnames';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, META, SUI, useKeyOnly, useTextAlignProp } from '../../lib';\r\n\r\n/**\r\n * A container limits content to a maximum width.\r\n */\r\nfunction Container(props) {\r\n  var children = props.children,\r\n      className = props.className,\r\n      content = props.content,\r\n      fluid = props.fluid,\r\n      text = props.text,\r\n      textAlign = props.textAlign;\r\n\r\n  var classes = cx('ui', useKeyOnly(text, 'text'), useKeyOnly(fluid, 'fluid'), useTextAlignProp(textAlign), 'container', className);\r\n  var rest = getUnhandledProps(Container, props);\r\n  var ElementType = getElementType(Container, props);\r\n\r\n  return React.createElement(\r\n    ElementType,\r\n    _extends({}, rest, { className: classes }),\r\n    childrenUtils.isNil(children) ? content : children\r\n  );\r\n}\r\n\r\nContainer.handledProps = ['as', 'children', 'className', 'content', 'fluid', 'text', 'textAlign'];\r\nContainer._meta = {\r\n  name: 'Container',\r\n  type: META.TYPES.ELEMENT\r\n};\r\n\r\nContainer.propTypes = process.env.NODE_ENV !== \"production\" ? {\r\n  /** An element type to render as (string or function). */\r\n  as: customPropTypes.as,\r\n\r\n  /** Primary content. */\r\n  children: PropTypes.node,\r\n\r\n  /** Additional classes. */\r\n  className: PropTypes.string,\r\n\r\n  /** Shorthand for primary content. */\r\n  content: customPropTypes.contentShorthand,\r\n\r\n  /** Container has no maximum width. */\r\n  fluid: PropTypes.bool,\r\n\r\n  /** Reduce maximum width to more naturally accommodate text. */\r\n  text: PropTypes.bool,\r\n\r\n  /** Align container text. */\r\n  textAlign: PropTypes.oneOf(SUI.TEXT_ALIGNMENTS)\r\n} : {};\r\n\r\nexport default Container;"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,+BAA+B;AACpD,OAAOC,EAAE,MAAM,YAAY;AAC3B,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,KAAK,MAAM,OAAO;AAEzB,SAASC,aAAa,EAAEC,eAAe,EAAEC,cAAc,EAAEC,iBAAiB,EAAEC,IAAI,EAAEC,GAAG,EAAEC,UAAU,EAAEC,gBAAgB,QAAQ,WAAW;;AAEtI;AACA;AACA;AACA,SAASC,SAASA,CAACC,KAAK,EAAE;EACxB,IAAIC,QAAQ,GAAGD,KAAK,CAACC,QAAQ;IACzBC,SAAS,GAAGF,KAAK,CAACE,SAAS;IAC3BC,OAAO,GAAGH,KAAK,CAACG,OAAO;IACvBC,KAAK,GAAGJ,KAAK,CAACI,KAAK;IACnBC,IAAI,GAAGL,KAAK,CAACK,IAAI;IACjBC,SAAS,GAAGN,KAAK,CAACM,SAAS;EAE/B,IAAIC,OAAO,GAAGnB,EAAE,CAAC,IAAI,EAAES,UAAU,CAACQ,IAAI,EAAE,MAAM,CAAC,EAAER,UAAU,CAACO,KAAK,EAAE,OAAO,CAAC,EAAEN,gBAAgB,CAACQ,SAAS,CAAC,EAAE,WAAW,EAAEJ,SAAS,CAAC;EACjI,IAAIM,IAAI,GAAGd,iBAAiB,CAACK,SAAS,EAAEC,KAAK,CAAC;EAC9C,IAAIS,WAAW,GAAGhB,cAAc,CAACM,SAAS,EAAEC,KAAK,CAAC;EAElD,OAAOV,KAAK,CAACoB,aAAa,CACxBD,WAAW,EACXtB,QAAQ,CAAC,CAAC,CAAC,EAAEqB,IAAI,EAAE;IAAEN,SAAS,EAAEK;EAAQ,CAAC,CAAC,EAC1ChB,aAAa,CAACoB,KAAK,CAACV,QAAQ,CAAC,GAAGE,OAAO,GAAGF,QAAQ,CACnD;AACH;AAEAF,SAAS,CAACa,YAAY,GAAG,CAAC,IAAI,EAAE,UAAU,EAAE,WAAW,EAAE,SAAS,EAAE,OAAO,EAAE,MAAM,EAAE,WAAW,CAAC;AACjGb,SAAS,CAACc,KAAK,GAAG;EAChBC,IAAI,EAAE,WAAW;EACjBC,IAAI,EAAEpB,IAAI,CAACqB,KAAK,CAACC;AACnB,CAAC;AAEDlB,SAAS,CAACmB,SAAS,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAG;EAC5D;EACAC,EAAE,EAAE9B,eAAe,CAAC8B,EAAE;EAEtB;EACArB,QAAQ,EAAEZ,SAAS,CAACkC,IAAI;EAExB;EACArB,SAAS,EAAEb,SAAS,CAACmC,MAAM;EAE3B;EACArB,OAAO,EAAEX,eAAe,CAACiC,gBAAgB;EAEzC;EACArB,KAAK,EAAEf,SAAS,CAACqC,IAAI;EAErB;EACArB,IAAI,EAAEhB,SAAS,CAACqC,IAAI;EAEpB;EACApB,SAAS,EAAEjB,SAAS,CAACsC,KAAK,CAAC/B,GAAG,CAACgC,eAAe;AAChD,CAAC,GAAG,CAAC,CAAC;AAEN,eAAe7B,SAAS"},"metadata":{},"sourceType":"module"}